<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\STM324xG-EVAL\STM324xG-EVAL.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\STM324xG-EVAL\STM324xG-EVAL.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Fri Feb 09 18:01:54 2018
<BR><P>
<H3>Maximum Stack Usage =      14124 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
goto_start_capture &rArr; Save_Image_To_File &rArr; Save_Bmp_To_File &rArr; fd_detect_face &rArr; object_detection_process &rArr; icvObjectDetection &rArr; icvPickFace &rArr; QuicksortwIdx &rArr; Quicksort32UwIdx &rArr;  Quicksort32UwIdx (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[68]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68]">ADC_IRQHandler</a><BR>
 <LI><a href="#[274]">AddPageControlObj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[274]">AddPageControlObj</a><BR>
 <LI><a href="#[460]">Quicksort32UwIdx</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[460]">Quicksort32UwIdx</a><BR>
 <LI><a href="#[53a]">netconn_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61d]">netconn_delete</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[68]">ADC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[c8]">AUDIO_AddFileToPlaylist</a> from mod_audio.o(i.AUDIO_AddFileToPlaylist) referenced from mod_audio.o(i.AUDIO_OpenFile)
 <LI><a href="#[16]">AUDIO_Background</a> from mod_audio.o(i.AUDIO_Background) referenced 2 times from mod_audio.o(.data)
 <LI><a href="#[c0]">AUDIO_EqualizerCtrlBand1</a> from mod_audio.o(i.AUDIO_EqualizerCtrlBand1) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[c1]">AUDIO_EqualizerCtrlBand2</a> from mod_audio.o(i.AUDIO_EqualizerCtrlBand2) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[c2]">AUDIO_EqualizerCtrlBand3</a> from mod_audio.o(i.AUDIO_EqualizerCtrlBand3) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[c3]">AUDIO_EqualizerCtrlBand4</a> from mod_audio.o(i.AUDIO_EqualizerCtrlBand4) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[b6]">AUDIO_Forward</a> from mod_audio.o(i.AUDIO_Forward) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[c4]">AUDIO_LoudnessCtrl</a> from mod_audio.o(i.AUDIO_LoudnessCtrl) referenced 2 times from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[17]">AUDIO_Media_changed</a> from mod_audio.o(i.AUDIO_Media_changed) referenced 2 times from mod_audio.o(.data)
 <LI><a href="#[b5]">AUDIO_MuteCtrl</a> from mod_audio.o(i.AUDIO_MuteCtrl) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[b5]">AUDIO_MuteCtrl</a> from mod_audio.o(i.AUDIO_MuteCtrl) referenced from mod_audio.o(i.AUDIO_RefreshIcons)
 <LI><a href="#[b3]">AUDIO_Next</a> from mod_audio.o(i.AUDIO_Next) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[ba]">AUDIO_OpenFile</a> from mod_audio.o(i.AUDIO_OpenFile) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[c9]">AUDIO_Pause</a> from mod_audio.o(i.AUDIO_Pause) referenced from mod_audio.o(i.AUDIO_RefreshIcons)
 <LI><a href="#[b2]">AUDIO_Play</a> from mod_audio.o(i.AUDIO_Play) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[b2]">AUDIO_Play</a> from mod_audio.o(i.AUDIO_Play) referenced from mod_audio.o(i.AUDIO_RefreshIcons)
 <LI><a href="#[b1]">AUDIO_Previous</a> from mod_audio.o(i.AUDIO_Previous) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[bd]">AUDIO_ProgressCtrl</a> from mod_audio.o(i.AUDIO_ProgressCtrl) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[bc]">AUDIO_Repeat</a> from mod_audio.o(i.AUDIO_Repeat) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[bc]">AUDIO_Repeat</a> from mod_audio.o(i.AUDIO_Repeat) referenced from mod_audio.o(i.AUDIO_RefreshIcons)
 <LI><a href="#[b7]">AUDIO_Rewind</a> from mod_audio.o(i.AUDIO_Rewind) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[15]">AUDIO_Startup</a> from mod_audio.o(i.AUDIO_Startup) referenced 2 times from mod_audio.o(.data)
 <LI><a href="#[b4]">AUDIO_Stop</a> from mod_audio.o(i.AUDIO_Stop) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[be]">AUDIO_VolumeCtrl</a> from mod_audio.o(i.AUDIO_VolumeCtrl) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[ee]">AddComboOption</a> from graphicobject.o(i.AddComboOption) referenced from graphicobject.o(i.Create_ComboBoxGrp)
 <LI><a href="#[f4]">AddRadioOption</a> from graphicobject.o(i.AddRadioOption) referenced from graphicobject.o(i.Create_RadioButtonGrp)
 <LI><a href="#[3e]">AudioCmd</a> from stm32_audio_in_if.o(i.AudioCmd) referenced 4 times from stm32_audio_in_if.o(.data)
 <LI><a href="#[c7]">AudioManager_Task</a> from mod_audio.o(i.AudioManager_Task) referenced from mod_audio.o(i.AUDIO_DirectEx)
 <LI><a href="#[c7]">AudioManager_Task</a> from mod_audio.o(i.AudioManager_Task) referenced from mod_audio.o(i.goto_player)
 <LI><a href="#[da]">AudioPlayer_SetPosition</a> from app_audio.o(i.AudioPlayer_SetPosition) referenced from app_audio.o(i.AudioPlayer_Open)
 <LI><a href="#[d9]">AudioPlayer_Task</a> from app_audio.o(i.AudioPlayer_Task) referenced from app_audio.o(i.AudioPlayer_Init)
 <LI><a href="#[dc]">AudioPlayer_XferCplt</a> from app_audio.o(i.AudioPlayer_XferCplt) referenced from app_audio.o(i.AudioPlayer_Open)
 <LI><a href="#[1b8]">Background_Task</a> from main.o(i.Background_Task) referenced from main.o(i.main)
 <LI><a href="#[50]">BusFault_Handler</a> from stm32xxx_it.o(i.BusFault_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[19]">CAMERA_Background</a> from mod_camera.o(i.CAMERA_Background) referenced 2 times from mod_camera.o(.data)
 <LI><a href="#[1a]">CAMERA_Media_changed</a> from mod_camera.o(i.CAMERA_Media_changed) referenced 2 times from mod_camera.o(.data)
 <LI><a href="#[18]">CAMERA_Startup</a> from mod_camera.o(i.CAMERA_Startup) referenced 2 times from mod_camera.o(.data)
 <LI><a href="#[6a]">CAN1_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6b]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6c]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[69]">CAN1_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[96]">CAN2_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[97]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[98]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[95]">CAN2_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[eb]">CONSOLE_Refresh</a> from mod_console.o(i.CONSOLE_Refresh) referenced from mod_console.o(i.CONSOLE_CreatePage)
 <LI><a href="#[27]">CONSOLE_Startup</a> from mod_console.o(i.CONSOLE_Startup) referenced 2 times from mod_console.o(.data)
 <LI><a href="#[a5]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[129]">Camera_Task</a> from mod_camera.o(i.Camera_Task) referenced from mod_camera.o(i.InitCamera)
 <LI><a href="#[d6]">Cancel_ctx_menu</a> from mod_filemgr.o(i.Cancel_ctx_menu) referenced from mod_filemgr.o(i.Add_CtxMenu)
 <LI><a href="#[e6]">Capture_Brightness_Dec</a> from mod_camera.o(i.Capture_Brightness_Dec) referenced from mod_camera.o(i.CAMERA_CreatePage)
 <LI><a href="#[e5]">Capture_Brightness_Inc</a> from mod_camera.o(i.Capture_Brightness_Inc) referenced from mod_camera.o(i.CAMERA_CreatePage)
 <LI><a href="#[127]">ClearCameraBackgound</a> from mod_image.o(i.ClearCameraBackgound) referenced from mod_image.o(i.IMAGE_CreatePage)
 <LI><a href="#[a4]">DCMI_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[61]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[62]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[63]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[64]">DMA1_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[65]">DMA1_Stream4_IRQHandler</a> from stm32_audio_out_if.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[66]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[67]">DMA1_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[85]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8e]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8f]">DMA2_Stream1_IRQHandler</a> from stm32xxx_it.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[90]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[91]">DMA2_Stream3_IRQHandler</a> from stm32xxx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[92]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9a]">DMA2_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9b]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9c]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3d]">DeInit</a> from stm32_audio_in_if.o(i.DeInit) referenced 4 times from stm32_audio_in_if.o(.data)
 <LI><a href="#[53]">DebugMon_Handler</a> from stm32xxx_it.o(i.DebugMon_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[db]">Dec_ReadDataCallback</a> from app_audio.o(i.Dec_ReadDataCallback) referenced from app_audio.o(i.AudioPlayer_Open)
 <LI><a href="#[d5]">Delete_Selected_Item</a> from mod_filemgr.o(i.Delete_Selected_Item) referenced from mod_filemgr.o(i.Add_CtxMenu)
 <LI><a href="#[d5]">Delete_Selected_Item</a> from mod_filemgr.o(i.Delete_Selected_Item) referenced from mod_filemgr.o(i.Display_Files)
 <LI><a href="#[12b]">Display_Line</a> from image_jpeg.o(i.Display_Line) referenced from image_jpeg.o(i.JPEG_Decode)
 <LI><a href="#[10b]">Display_Next</a> from mod_filemgr.o(i.Display_Next) referenced from mod_filemgr.o(i.Explore_Directory)
 <LI><a href="#[10b]">Display_Next</a> from mod_filemgr.o(i.Display_Next) referenced from mod_filemgr.o(i.Explore_SubFolder)
 <LI><a href="#[10b]">Display_Next</a> from mod_filemgr.o(i.Display_Next) referenced from mod_filemgr.o(i.FILEMGR_CreatePage)
 <LI><a href="#[10b]">Display_Next</a> from mod_filemgr.o(i.Display_Next) referenced from mod_filemgr.o(i.FILE_MGR_RefreshScroll)
 <LI><a href="#[10c]">Display_Previous</a> from mod_filemgr.o(i.Display_Previous) referenced from mod_filemgr.o(i.Explore_Directory)
 <LI><a href="#[10c]">Display_Previous</a> from mod_filemgr.o(i.Display_Previous) referenced from mod_filemgr.o(i.Explore_SubFolder)
 <LI><a href="#[10c]">Display_Previous</a> from mod_filemgr.o(i.Display_Previous) referenced from mod_filemgr.o(i.FILEMGR_CreatePage)
 <LI><a href="#[10c]">Display_Previous</a> from mod_filemgr.o(i.Display_Previous) referenced from mod_filemgr.o(i.FILE_MGR_RefreshScroll)
 <LI><a href="#[af]">DrawAudioPlayerBackgound</a> from mod_audio.o(i.DrawAudioPlayerBackgound) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[118]">DrawBackgroundZone</a> from gl_mgr.o(i.DrawBackgroundZone) referenced from gl_mgr.o(i.GL_ShowMainMenu)
 <LI><a href="#[e3]">DrawCameraBackgound</a> from mod_camera.o(i.DrawCameraBackgound) referenced from mod_camera.o(i.CAMERA_CreatePage)
 <LI><a href="#[ea]">DrawConsoleBackground</a> from mod_console.o(i.DrawConsoleBackground) referenced from mod_console.o(i.CONSOLE_CreatePage)
 <LI><a href="#[121]">DrawImageBackgound</a> from mod_image.o(i.DrawImageBackgound) referenced from mod_image.o(i.IMAGE_CreatePage)
 <LI><a href="#[1b]">ETHERNET_Startup</a> from mod_ethernet.o(i.ETHERNET_Startup) referenced 2 times from mod_ethernet.o(.data)
 <LI><a href="#[93]">ETH_IRQHandler</a> from eth_bsp.o(i.ETH_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[94]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5c]">EXTI0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7e]">EXTI15_10_IRQHandler</a> from eth_bsp.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5d]">EXTI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5e]">EXTI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5f]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[60]">EXTI4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6d]">EXTI9_5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[10a]">EnableBackgroundMode</a> from mod_system.o(i.EnableBackgroundMode) referenced from mod_system.o(i.EnableDistantControl)
 <LI><a href="#[10a]">EnableBackgroundMode</a> from mod_system.o(i.EnableBackgroundMode) referenced from mod_system.o(i.SYSTEM_INFO_CreatePage)
 <LI><a href="#[136]">EnableDistantControl</a> from mod_system.o(i.EnableDistantControl) referenced from mod_system.o(i.SYSTEM_INFO_CreatePage)
 <LI><a href="#[fd]">Explore_Directory</a> from mod_filemgr.o(i.Explore_Directory) referenced from mod_filemgr.o(i.Display_Files)
 <LI><a href="#[d8]">Explore_SubFolder</a> from mod_filemgr.o(i.Explore_SubFolder) referenced from mod_filemgr.o(i.Add_CtxMenu)
 <LI><a href="#[28]">FILEMGR_Startup</a> from mod_filemgr.o(i.FILEMGR_Startup) referenced 2 times from mod_filemgr.o(.data)
 <LI><a href="#[29]">FILE_MGR_Media_changed</a> from mod_filemgr.o(i.FILE_MGR_Media_changed) referenced 2 times from mod_filemgr.o(.data)
 <LI><a href="#[5a]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a7]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[86]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[115]">GL_ShowConnectivityGroup</a> from gl_mgr.o(i.GL_ShowConnectivityGroup) referenced from gl_mgr.o(i.GL_ShowMainMenu)
 <LI><a href="#[116]">GL_ShowMultimediaGroup</a> from gl_mgr.o(i.GL_ShowMultimediaGroup) referenced from gl_mgr.o(i.GL_ShowMainMenu)
 <LI><a href="#[117]">GL_ShowUtilitiesGroup</a> from gl_mgr.o(i.GL_ShowUtilitiesGroup) referenced from gl_mgr.o(i.GL_ShowMainMenu)
 <LI><a href="#[f2]">GetObjCoordinates</a> from graphicobject.o(i.GetObjCoordinates) referenced from graphicobject.o(i.Create_PageObj)
 <LI><a href="#[f1]">GetObjStatus</a> from graphicobject.o(i.GetObjStatus) referenced from graphicobject.o(i.Create_PageObj)
 <LI><a href="#[42]">GetState</a> from stm32_audio_in_if.o(i.GetState) referenced 4 times from stm32_audio_in_if.o(.data)
 <LI><a href="#[12c]">Get_Scale</a> from image_jpeg.o(i.Get_Scale) referenced from image_jpeg.o(i.JPEG_Decode)
 <LI><a href="#[a6]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[119]">HandleImageSize</a> from mod_image.o(i.HandleImageSize) referenced from mod_image.o(i.IMAGE_CameraView)
 <LI><a href="#[119]">HandleImageSize</a> from mod_image.o(i.HandleImageSize) referenced from mod_image.o(i.IMAGE_CreatePage)
 <LI><a href="#[119]">HandleImageSize</a> from mod_image.o(i.HandleImageSize) referenced from mod_image.o(i.ImageDirectBackgound)
 <LI><a href="#[4e]">HardFault_Handler</a> from stm32xxx_it.o(i.HardFault_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[76]">I2C1_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[75]">I2C1_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[78]">I2C2_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[77]">I2C2_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9f]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9e]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1e]">IMAGE_Media_changed</a> from mod_image.o(i.IMAGE_Media_changed) referenced 2 times from mod_image.o(.data)
 <LI><a href="#[1c]">IMAGE_Startup</a> from mod_image.o(i.IMAGE_Startup) referenced 2 times from mod_image.o(.data)
 <LI><a href="#[125]">ImageDirectBackgound</a> from mod_image.o(i.ImageDirectBackgound) referenced from mod_image.o(i.IMAGE_CreatePage)
 <LI><a href="#[1d]">Image_background</a> from mod_image.o(i.Image_background) referenced 2 times from mod_image.o(.data)
 <LI><a href="#[3c]">Init</a> from stm32_audio_in_if.o(i.Init) referenced 4 times from stm32_audio_in_if.o(.data)
 <LI><a href="#[e4]">InitCamera</a> from mod_camera.o(i.InitCamera) referenced from mod_camera.o(i.CAMERA_CreatePage)
 <LI><a href="#[103]">InitEthernet</a> from mod_ethernet.o(i.InitEthernet) referenced from mod_ethernet.o(i.ETHERNET_CreatePage)
 <LI><a href="#[12a]">LwIP_DHCP_task</a> from app_ethernet.o(i.LwIP_DHCP_task) referenced from mod_ethernet.o(i.InitEthernet)
 <LI><a href="#[ab]">MOD_NullFunc</a> from mod_core.o(i.MOD_NullFunc) referenced 2 times from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[ab]">MOD_NullFunc</a> from mod_core.o(i.MOD_NullFunc) referenced from mod_camera.o(i.CAMERA_CreatePage)
 <LI><a href="#[ab]">MOD_NullFunc</a> from mod_core.o(i.MOD_NullFunc) referenced 2 times from mod_ethernet.o(i.ETHERNET_CreatePage)
 <LI><a href="#[ab]">MOD_NullFunc</a> from mod_core.o(i.MOD_NullFunc) referenced from mod_ethernet.o(i.ETHERNET_UpdateIcon)
 <LI><a href="#[ab]">MOD_NullFunc</a> from mod_core.o(i.MOD_NullFunc) referenced from mod_filemgr.o(i.FILEMGR_CreatePage)
 <LI><a href="#[ab]">MOD_NullFunc</a> from mod_core.o(i.MOD_NullFunc) referenced from gl_ext.o(i.GL_SetPageHeader)
 <LI><a href="#[ab]">MOD_NullFunc</a> from mod_core.o(i.MOD_NullFunc) referenced from gl_mgr.o(i.GL_ShowMainMenu)
 <LI><a href="#[ab]">MOD_NullFunc</a> from mod_core.o(i.MOD_NullFunc) referenced 2 times from mod_image.o(i.IMAGE_CreatePage)
 <LI><a href="#[ab]">MOD_NullFunc</a> from mod_core.o(i.MOD_NullFunc) referenced 2 times from mod_system.o(i.SYSTEM_INFO_CreatePage)
 <LI><a href="#[4f]">MemManage_Handler</a> from stm32xxx_it.o(i.MemManage_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[40]">MuteCtl</a> from stm32_audio_in_if.o(i.MuteCtl) referenced 4 times from stm32_audio_in_if.o(.data)
 <LI><a href="#[4d]">NMI_Handler</a> from stm32xxx_it.o(i.NMI_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[f3]">NullFunc</a> from graphicobject.o(i.NullFunc) referenced from graphicobject.o(i.Create_PageObj)
 <LI><a href="#[99]">OTG_FS_IRQHandler</a> from stm32xxx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[80]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a1]">OTG_HS_EP1_IN_IRQHandler</a> from stm32xxx_it.o(i.OTG_HS_EP1_IN_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a0]">OTG_HS_EP1_OUT_IRQHandler</a> from stm32xxx_it.o(i.OTG_HS_EP1_OUT_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a3]">OTG_HS_IRQHandler</a> from stm32xxx_it.o(i.OTG_HS_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a2]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[d4]">Open_Selected_Item</a> from mod_filemgr.o(i.Open_Selected_Item) referenced from mod_filemgr.o(i.Add_CtxMenu)
 <LI><a href="#[41]">OptionCtrl</a> from stm32_audio_in_if.o(i.OptionCtrl) referenced 4 times from stm32_audio_in_if.o(.data)
 <LI><a href="#[57]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5b]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7f]">RTC_Alarm_IRQHandler</a> from app_rtc.o(i.RTC_Alarm_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[59]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[112]">Refresh_CustomDraw</a> from mod_filemgr.o(i.Refresh_CustomDraw) referenced from mod_filemgr.o(i.FILEMGR_CreatePage)
 <LI><a href="#[4c]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[d7]">Return_Selected_Item</a> from mod_filemgr.o(i.Return_Selected_Item) referenced from mod_filemgr.o(i.Add_CtxMenu)
 <LI><a href="#[d7]">Return_Selected_Item</a> from mod_filemgr.o(i.Return_Selected_Item) referenced from mod_filemgr.o(i.Display_Files)
 <LI><a href="#[87]">SDIO_IRQHandler</a> from stm32xxx_it.o(i.SDIO_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[79]">SPI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7a]">SPI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[89]">SPI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1f]">SYSTEM_INFO_Startup</a> from mod_system.o(i.SYSTEM_INFO_Startup) referenced 2 times from mod_system.o(.data)
 <LI><a href="#[ec]">ScrollDown</a> from mod_console.o(i.ScrollDown) referenced from mod_console.o(i.CONSOLE_Refresh)
 <LI><a href="#[ec]">ScrollDown</a> from mod_console.o(i.ScrollDown) referenced from mod_console.o(i.DrawConsoleBackground)
 <LI><a href="#[ed]">ScrollUp</a> from mod_console.o(i.ScrollUp) referenced from mod_console.o(i.CONSOLE_Refresh)
 <LI><a href="#[ed]">ScrollUp</a> from mod_console.o(i.ScrollUp) referenced from mod_console.o(i.DrawConsoleBackground)
 <LI><a href="#[e8]">Sel_folder</a> from mod_camera.o(i.Sel_folder) referenced from mod_camera.o(i.CAMERA_CreatePage)
 <LI><a href="#[123]">Sel_folder</a> from mod_image.o(i.Sel_folder) referenced from mod_image.o(i.IMAGE_CreatePage)
 <LI><a href="#[cc]">SetButtonVisible</a> from graphicobject.o(i.SetButtonVisible) referenced from graphicobject.o(i.AddPageControlObj)
 <LI><a href="#[cf]">SetCheckboxVisible</a> from graphicobject.o(i.SetCheckboxVisible) referenced from graphicobject.o(i.AddPageControlObj)
 <LI><a href="#[cb]">SetComboBoxVisible</a> from graphicobject.o(i.SetComboBoxVisible) referenced from graphicobject.o(i.AddPageControlObj)
 <LI><a href="#[d3]">SetGraphChartVisible</a> from graphicobject.o(i.SetGraphChartVisible) referenced from graphicobject.o(i.AddPageControlObj)
 <LI><a href="#[d2]">SetHistogramVisible</a> from graphicobject.o(i.SetHistogramVisible) referenced from graphicobject.o(i.AddPageControlObj)
 <LI><a href="#[d0]">SetIconVisible</a> from graphicobject.o(i.SetIconVisible) referenced from graphicobject.o(i.AddPageControlObj)
 <LI><a href="#[ca]">SetLabelVisible</a> from graphicobject.o(i.SetLabelVisible) referenced from graphicobject.o(i.AddPageControlObj)
 <LI><a href="#[f0]">SetPage</a> from graphicobject.o(i.SetPage) referenced from graphicobject.o(i.Create_PageObj)
 <LI><a href="#[ce]">SetRadioButtonVisible</a> from graphicobject.o(i.SetRadioButtonVisible) referenced from graphicobject.o(i.AddPageControlObj)
 <LI><a href="#[d1]">SetSlidebarVisible</a> from graphicobject.o(i.SetSlidebarVisible) referenced from graphicobject.o(i.AddPageControlObj)
 <LI><a href="#[cd]">SetSwitchVisible</a> from graphicobject.o(i.SetSwitchVisible) referenced from graphicobject.o(i.AddPageControlObj)
 <LI><a href="#[43]">SetXferCpltCallback</a> from stm32_audio_in_if.o(i.SetXferCpltCallback) referenced 4 times from stm32_audio_in_if.o(.data)
 <LI><a href="#[12d]">Set_Scale</a> from image_jpeg.o(i.Set_Scale) referenced from image_jpeg.o(i.JPEG_Decode)
 <LI><a href="#[ef]">ShowPage</a> from graphicobject.o(i.ShowPage) referenced from graphicobject.o(i.Create_PageObj)
 <LI><a href="#[55]">SysTick_Handler</a> from stm32xxx_it.o(i.SysTick_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a9]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[58]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6e]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[71]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[70]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6f]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[72]">TIM2_IRQHandler</a> from stm32xxx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[73]">TIM3_IRQHandler</a> from stm324xg_audio_recorder.o(i.TIM3_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[74]">TIM4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[88]">TIM5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8c]">TIM6_DAC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8d]">TIM7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[81]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[84]">TIM8_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[83]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[82]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[114]">Time_Task</a> from gl_mgr.o(i.Time_Task) referenced from gl_mgr.o(i.GL_Init)
 <LI><a href="#[8a]">UART4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8b]">UART5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7b]">USART1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7c]">USART2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7d]">USART3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9d]">USART6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2b]">USBD_DataInStage</a> from usbd_core.o(i.USBD_DataInStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[2a]">USBD_DataOutStage</a> from usbd_core.o(i.USBD_DataOutStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[33]">USBD_DevConnected</a> from usbd_core.o(i.USBD_DevConnected) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[34]">USBD_DevDisconnected</a> from usbd_core.o(i.USBD_DevDisconnected) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[31]">USBD_IsoINIncomplete</a> from usbd_core.o(i.USBD_IsoINIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[32]">USBD_IsoOUTIncomplete</a> from usbd_core.o(i.USBD_IsoOUTIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[2e]">USBD_Reset</a> from usbd_core.o(i.USBD_Reset) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[30]">USBD_Resume</a> from usbd_core.o(i.USBD_Resume) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[2d]">USBD_SOF</a> from usbd_core.o(i.USBD_SOF) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[2c]">USBD_SetupStage</a> from usbd_core.o(i.USBD_SetupStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[2f]">USBD_Suspend</a> from usbd_core.o(i.USBD_Suspend) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[25]">USBD_USR_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[20]">USBD_USR_DeviceDescriptor</a> from usbd_desc.o(i.USBD_USR_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[26]">USBD_USR_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[21]">USBD_USR_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_USR_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[22]">USBD_USR_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[23]">USBD_USR_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[24]">USBD_USR_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_USR_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[3a]">USBH_Connected</a> from usbh_core.o(i.USBH_Connected) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[3b]">USBH_Disconnected</a> from usbh_core.o(i.USBH_Disconnected) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[37]">USBH_MSC_ClassRequest</a> from usbh_msc_core.o(i.USBH_MSC_ClassRequest) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[38]">USBH_MSC_Handle</a> from usbh_msc_core.o(i.USBH_MSC_Handle) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[36]">USBH_MSC_InterfaceDeInit</a> from usbh_msc_core.o(i.USBH_MSC_InterfaceDeInit) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[35]">USBH_MSC_InterfaceInit</a> from usbh_msc_core.o(i.USBH_MSC_InterfaceInit) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[39]">USBH_SOF</a> from usbh_core.o(i.USBH_SOF) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[c]">USBH_USR_Configuration_DescAvailable</a> from usbh_usr.o(i.USBH_USR_Configuration_DescAvailable) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[4]">USBH_USR_DeInit</a> from usbh_usr.o(i.USBH_USR_DeInit) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[b]">USBH_USR_DeviceAddressAssigned</a> from usbh_usr.o(i.USBH_USR_DeviceAddressAssigned) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[5]">USBH_USR_DeviceAttached</a> from usbh_usr.o(i.USBH_USR_DeviceAttached) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[7]">USBH_USR_DeviceDisconnected</a> from usbh_usr.o(i.USBH_USR_DeviceDisconnected) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[13]">USBH_USR_DeviceNotSupported</a> from usbh_usr.o(i.USBH_USR_DeviceNotSupported) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[9]">USBH_USR_DeviceSpeedDetected</a> from usbh_usr.o(i.USBH_USR_DeviceSpeedDetected) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[a]">USBH_USR_Device_DescAvailable</a> from usbh_usr.o(i.USBH_USR_Device_DescAvailable) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[10]">USBH_USR_EnumerationDone</a> from usbh_usr.o(i.USBH_USR_EnumerationDone) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[3]">USBH_USR_Init</a> from usbh_usr.o(i.USBH_USR_Init) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[12]">USBH_USR_MSC_Application</a> from usbh_usr.o(i.USBH_USR_MSC_Application) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[d]">USBH_USR_Manufacturer_String</a> from usbh_usr.o(i.USBH_USR_Manufacturer_String) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[8]">USBH_USR_OverCurrentDetected</a> from usbh_usr.o(i.USBH_USR_OverCurrentDetected) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[e]">USBH_USR_Product_String</a> from usbh_usr.o(i.USBH_USR_Product_String) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[6]">USBH_USR_ResetDevice</a> from usbh_usr.o(i.USBH_USR_ResetDevice) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[f]">USBH_USR_SerialNum_String</a> from usbh_usr.o(i.USBH_USR_SerialNum_String) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[14]">USBH_USR_UnrecoveredError</a> from usbh_usr.o(i.USBH_USR_UnrecoveredError) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[11]">USBH_USR_UserInput</a> from usbh_usr.o(i.USBH_USR_UserInput) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[b0]">UpdateAudioPlayerPage</a> from mod_audio.o(i.UpdateAudioPlayerPage) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[13b]">Update_folder</a> from mod_camera.o(i.Update_folder) referenced 2 times from mod_camera.o(i.Sel_folder)
 <LI><a href="#[51]">UsageFault_Handler</a> from stm32xxx_it.o(i.UsageFault_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3f]">VolumeCtl</a> from stm32_audio_in_if.o(i.VolumeCtl) referenced 4 times from stm32_audio_in_if.o(.data)
 <LI><a href="#[56]">WWDG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[f9]">WavProcess_DecodeData</a> from wavprocess.o(i.WavProcess_DecodeData) referenced from stm32_audio_decoders.o(i.Decoders_SelectDecoder)
 <LI><a href="#[f5]">WavProcess_DecoderInit</a> from wavprocess.o(i.WavProcess_DecoderInit) referenced from stm32_audio_decoders.o(i.Decoders_SelectDecoder)
 <LI><a href="#[fc]">WavProcess_GetElapsedTime</a> from wavprocess.o(i.WavProcess_GetElapsedTime) referenced from stm32_audio_decoders.o(i.Decoders_SelectDecoder)
 <LI><a href="#[fa]">WavProcess_GetSamplingRate</a> from wavprocess.o(i.WavProcess_GetSamplingRate) referenced from stm32_audio_decoders.o(i.Decoders_SelectDecoder)
 <LI><a href="#[fb]">WavProcess_GetStreamLenght</a> from wavprocess.o(i.WavProcess_GetStreamLenght) referenced from stm32_audio_decoders.o(i.Decoders_SelectDecoder)
 <LI><a href="#[f6]">WavProcess_StopMode</a> from wavprocess.o(i.WavProcess_StopMode) referenced from stm32_audio_decoders.o(i.Decoders_SelectDecoder)
 <LI><a href="#[f8]">WavProcess_StreamBackward</a> from wavprocess.o(i.WavProcess_StreamBackward) referenced from stm32_audio_decoders.o(i.Decoders_SelectDecoder)
 <LI><a href="#[f7]">WavProcess_StreamForward</a> from wavprocess.o(i.WavProcess_StreamForward) referenced from stm32_audio_decoders.o(i.Decoders_SelectDecoder)
 <LI><a href="#[aa]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[13d]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[146]">accept_function</a> from api_msg.o(i.accept_function) referenced from api_msg.o(i.do_listen)
 <LI><a href="#[19b]">access_virt_barray</a> from jmemmgr.o(i.access_virt_barray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[19a]">access_virt_sarray</a> from jmemmgr.o(i.access_virt_sarray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[196]">alloc_barray</a> from jmemmgr.o(i.alloc_barray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[194]">alloc_large</a> from jmemmgr.o(i.alloc_large) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[195]">alloc_sarray</a> from jmemmgr.o(i.alloc_sarray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[193]">alloc_small</a> from jmemmgr.o(i.alloc_small) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[13e]">arp_timer</a> from tcpip.o(i.arp_timer) referenced 2 times from tcpip.o(i.arp_timer)
 <LI><a href="#[13f]">arp_timer</a> from ethernetif.o(i.arp_timer) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[13e]">arp_timer</a> from tcpip.o(i.arp_timer) referenced from tcpip.o(i.tcpip_thread)
 <LI><a href="#[111]">back_to_drives</a> from mod_filemgr.o(i.back_to_drives) referenced from mod_filemgr.o(i.FILEMGR_CreatePage)
 <LI><a href="#[14b]">cancel_exit_player</a> from mod_audio.o(i.cancel_exit_player) referenced from mod_audio.o(i.exit_player)
 <LI><a href="#[165]">cmyk_ycck_convert</a> from jccolor.o(i.cmyk_ycck_convert) referenced from jccolor.o(i.jinit_color_converter)
 <LI><a href="#[1f0]">color_quantize</a> from jquant1.o(i.color_quantize) referenced from jquant1.o(i.start_pass_1_quant)
 <LI><a href="#[1ef]">color_quantize3</a> from jquant1.o(i.color_quantize3) referenced from jquant1.o(i.start_pass_1_quant)
 <LI><a href="#[1f9]">compress_data</a> from jccoefct.o(i.compress_data) referenced from jccoefct.o(i.start_pass_coef)
 <LI><a href="#[1fa]">compress_first_pass</a> from jccoefct.o(i.compress_first_pass) referenced from jccoefct.o(i.start_pass_coef)
 <LI><a href="#[1fb]">compress_output</a> from jccoefct.o(i.compress_output) referenced from jccoefct.o(i.start_pass_coef)
 <LI><a href="#[170]">consume_data</a> from jdcoefct.o(i.consume_data) referenced from jdcoefct.o(i.jinit_d_coef_controller)
 <LI><a href="#[14c]">consume_markers</a> from jdinput.o(i.consume_markers) referenced from jdinput.o(i.finish_input_pass)
 <LI><a href="#[14c]">consume_markers</a> from jdinput.o(i.consume_markers) referenced from jdinput.o(i.jinit_input_controller)
 <LI><a href="#[14c]">consume_markers</a> from jdinput.o(i.consume_markers) referenced from jdinput.o(i.reset_input_controller)
 <LI><a href="#[1cc]">decode_mcu</a> from jdarith.o(i.decode_mcu) referenced from jdarith.o(i.start_pass)
 <LI><a href="#[230]">decode_mcu</a> from jdhuff.o(i.decode_mcu) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[1c9]">decode_mcu_AC_first</a> from jdarith.o(i.decode_mcu_AC_first) referenced from jdarith.o(i.start_pass)
 <LI><a href="#[22c]">decode_mcu_AC_first</a> from jdhuff.o(i.decode_mcu_AC_first) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[1cb]">decode_mcu_AC_refine</a> from jdarith.o(i.decode_mcu_AC_refine) referenced from jdarith.o(i.start_pass)
 <LI><a href="#[22e]">decode_mcu_AC_refine</a> from jdhuff.o(i.decode_mcu_AC_refine) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[1c8]">decode_mcu_DC_first</a> from jdarith.o(i.decode_mcu_DC_first) referenced from jdarith.o(i.start_pass)
 <LI><a href="#[22b]">decode_mcu_DC_first</a> from jdhuff.o(i.decode_mcu_DC_first) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[1ca]">decode_mcu_DC_refine</a> from jdarith.o(i.decode_mcu_DC_refine) referenced from jdarith.o(i.start_pass)
 <LI><a href="#[22d]">decode_mcu_DC_refine</a> from jdhuff.o(i.decode_mcu_DC_refine) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[22f]">decode_mcu_sub</a> from jdhuff.o(i.decode_mcu_sub) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[171]">decompress_data</a> from jdcoefct.o(i.decompress_data) referenced from jdcoefct.o(i.jinit_d_coef_controller)
 <LI><a href="#[173]">decompress_onepass</a> from jdcoefct.o(i.decompress_onepass) referenced from jdcoefct.o(i.jinit_d_coef_controller)
 <LI><a href="#[140]">dhcp_recv</a> from dhcp.o(i.dhcp_recv) referenced from dhcp.o(i.dhcp_start)
 <LI><a href="#[141]">dhcp_timer_coarse</a> from tcpip.o(i.dhcp_timer_coarse) referenced from tcpip.o(i.dhcp_timer_coarse)
 <LI><a href="#[141]">dhcp_timer_coarse</a> from tcpip.o(i.dhcp_timer_coarse) referenced from tcpip.o(i.tcpip_thread)
 <LI><a href="#[142]">dhcp_timer_fine</a> from tcpip.o(i.dhcp_timer_fine) referenced from tcpip.o(i.dhcp_timer_fine)
 <LI><a href="#[142]">dhcp_timer_fine</a> from tcpip.o(i.dhcp_timer_fine) referenced from tcpip.o(i.tcpip_thread)
 <LI><a href="#[107]">disable_distant_control</a> from mod_ethernet.o(i.disable_distant_control) referenced from mod_ethernet.o(i.ETHERNET_CreatePage)
 <LI><a href="#[1b9]">do_bind</a> from api_msg.o(i.do_bind) referenced from api_lib.o(i.netconn_bind)
 <LI><a href="#[1ba]">do_close</a> from api_msg.o(i.do_close) referenced from api_lib.o(i.netconn_close)
 <LI><a href="#[1bb]">do_delconn</a> from api_msg.o(i.do_delconn) referenced from api_lib.o(i.netconn_delete)
 <LI><a href="#[1bc]">do_listen</a> from api_msg.o(i.do_listen) referenced from api_lib.o(i.netconn_listen_with_backlog)
 <LI><a href="#[1bd]">do_newconn</a> from api_msg.o(i.do_newconn) referenced from api_lib.o(i.netconn_new_with_proto_and_callback)
 <LI><a href="#[1be]">do_recv</a> from api_msg.o(i.do_recv) referenced from api_lib.o(i.netconn_recv)
 <LI><a href="#[1bf]">do_write</a> from api_msg.o(i.do_write) referenced from api_lib.o(i.netconn_write)
 <LI><a href="#[172]">dummy_consume_data</a> from jdcoefct.o(i.dummy_consume_data) referenced from jdcoefct.o(i.jinit_d_coef_controller)
 <LI><a href="#[1ab]">emit_message</a> from jerror.o(i.emit_message) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[1b0]">empty_output_buffer</a> from jdatadst.o(i.empty_output_buffer) referenced from jdatadst.o(i.jpeg_stdio_dest)
 <LI><a href="#[1c7]">encode_mcu</a> from jcarith.o(i.encode_mcu) referenced from jcarith.o(i.start_pass)
 <LI><a href="#[1c4]">encode_mcu_AC_first</a> from jcarith.o(i.encode_mcu_AC_first) referenced from jcarith.o(i.start_pass)
 <LI><a href="#[226]">encode_mcu_AC_first</a> from jchuff.o(i.encode_mcu_AC_first) referenced from jchuff.o(i.start_pass_huff)
 <LI><a href="#[1c6]">encode_mcu_AC_refine</a> from jcarith.o(i.encode_mcu_AC_refine) referenced from jcarith.o(i.start_pass)
 <LI><a href="#[228]">encode_mcu_AC_refine</a> from jchuff.o(i.encode_mcu_AC_refine) referenced from jchuff.o(i.start_pass_huff)
 <LI><a href="#[1c3]">encode_mcu_DC_first</a> from jcarith.o(i.encode_mcu_DC_first) referenced from jcarith.o(i.start_pass)
 <LI><a href="#[225]">encode_mcu_DC_first</a> from jchuff.o(i.encode_mcu_DC_first) referenced from jchuff.o(i.start_pass_huff)
 <LI><a href="#[1c5]">encode_mcu_DC_refine</a> from jcarith.o(i.encode_mcu_DC_refine) referenced from jcarith.o(i.start_pass)
 <LI><a href="#[227]">encode_mcu_DC_refine</a> from jchuff.o(i.encode_mcu_DC_refine) referenced from jchuff.o(i.start_pass_huff)
 <LI><a href="#[229]">encode_mcu_gather</a> from jchuff.o(i.encode_mcu_gather) referenced from jchuff.o(i.start_pass_huff)
 <LI><a href="#[22a]">encode_mcu_huff</a> from jchuff.o(i.encode_mcu_huff) referenced from jchuff.o(i.start_pass_huff)
 <LI><a href="#[145]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[145]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[1aa]">error_exit</a> from jerror.o(i.error_exit) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[147]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[12f]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from app_ethernet.o(i.LwIP_Init)
 <LI><a href="#[1b7]">ethernetif_input</a> from ethernetif.o(i.ethernetif_input) referenced from ethernetif.o(i.low_level_init)
 <LI><a href="#[b8]">exit_player</a> from mod_audio.o(i.exit_player) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[1b3]">fill_input_buffer</a> from jdatasrc.o(i.fill_input_buffer) referenced from jdatasrc.o(i.jpeg_stdio_src)
 <LI><a href="#[183]">finish_input_pass</a> from jdinput.o(i.finish_input_pass) referenced from jdinput.o(i.jinit_input_controller)
 <LI><a href="#[192]">finish_output_pass</a> from jdmaster.o(i.finish_output_pass) referenced from jdmaster.o(i.jinit_master_decompress)
 <LI><a href="#[155]">finish_pass</a> from jcarith.o(i.finish_pass) referenced from jcarith.o(i.jinit_arith_encoder)
 <LI><a href="#[1f5]">finish_pass1</a> from jquant2.o(i.finish_pass1) referenced from jquant2.o(i.start_pass_2_quant)
 <LI><a href="#[1f8]">finish_pass2</a> from jquant2.o(i.finish_pass2) referenced from jquant2.o(i.start_pass_2_quant)
 <LI><a href="#[14f]">finish_pass_1_quant</a> from jquant1.o(i.finish_pass_1_quant) referenced from jquant1.o(i.jinit_1pass_quantizer)
 <LI><a href="#[223]">finish_pass_gather</a> from jchuff.o(i.finish_pass_gather) referenced from jchuff.o(i.start_pass_huff)
 <LI><a href="#[224]">finish_pass_huff</a> from jchuff.o(i.finish_pass_huff) referenced from jchuff.o(i.start_pass_huff)
 <LI><a href="#[15a]">finish_pass_master</a> from jcmaster.o(i.finish_pass_master) referenced from jcmaster.o(i.jinit_c_master_control)
 <LI><a href="#[1ad]">format_message</a> from jerror.o(i.format_message) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[221]">forward_DCT</a> from jcdctmgr.o(i.forward_DCT) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[222]">forward_DCT_float</a> from jcdctmgr.o(i.forward_DCT_float) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[19c]">free_pool</a> from jmemmgr.o(i.free_pool) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[179]">fullsize_downsample</a> from jcsample.o(i.fullsize_downsample) referenced from jcsample.o(i.jinit_downsampler)
 <LI><a href="#[178]">fullsize_smooth_downsample</a> from jcsample.o(i.fullsize_smooth_downsample) referenced from jcsample.o(i.jinit_downsampler)
 <LI><a href="#[1a6]">fullsize_upsample</a> from jdsample.o(i.fullsize_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[189]">get_interesting_appn</a> from jdmarker.o(i.get_interesting_appn) referenced from jdmarker.o(i.jinit_marker_reader)
 <LI><a href="#[100]">goto_EthernetSettingss</a> from mod_ethernet.o(i.goto_EthernetSettingss) referenced from mod_ethernet.o(i.ETHERNET_CreatePage)
 <LI><a href="#[132]">goto_Settings</a> from mod_system.o(i.goto_Settings) referenced from mod_system.o(i.SYSTEM_INFO_CreatePage)
 <LI><a href="#[14a]">goto_background</a> from mod_audio.o(i.goto_background) referenced from mod_audio.o(i.exit_player)
 <LI><a href="#[11a]">goto_browser</a> from mod_image.o(i.goto_browser) referenced from mod_image.o(i.IMAGE_CreatePage)
 <LI><a href="#[dd]">goto_capture</a> from mod_camera.o(i.goto_capture) referenced from mod_camera.o(i.CAMERA_CreatePage)
 <LI><a href="#[ff]">goto_distantcontrol</a> from mod_ethernet.o(i.goto_distantcontrol) referenced from mod_ethernet.o(i.ETHERNET_CreatePage)
 <LI><a href="#[b9]">goto_equalizer</a> from mod_audio.o(i.goto_equalizer) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[11b]">goto_image_effects</a> from mod_image.o(i.goto_image_effects) referenced from mod_image.o(i.IMAGE_CreatePage)
 <LI><a href="#[10e]">goto_msd_drive</a> from mod_filemgr.o(i.goto_msd_drive) referenced from mod_filemgr.o(i.FILEMGR_CreatePage)
 <LI><a href="#[11f]">goto_next_file</a> from mod_image.o(i.goto_next_file) referenced 2 times from mod_image.o(i.IMAGE_CreatePage)
 <LI><a href="#[ac]">goto_player</a> from mod_audio.o(i.goto_player) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[bb]">goto_playlist</a> from mod_audio.o(i.goto_playlist) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[120]">goto_previous_file</a> from mod_image.o(i.goto_previous_file) referenced 2 times from mod_image.o(i.IMAGE_CreatePage)
 <LI><a href="#[ad]">goto_settings</a> from mod_audio.o(i.goto_settings) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[de]">goto_settings</a> from mod_camera.o(i.goto_settings) referenced from mod_camera.o(i.CAMERA_CreatePage)
 <LI><a href="#[11c]">goto_settings</a> from mod_image.o(i.goto_settings) referenced from mod_image.o(i.IMAGE_CreatePage)
 <LI><a href="#[e1]">goto_start_capture</a> from mod_camera.o(i.goto_start_capture) referenced from mod_camera.o(i.CAMERA_CreatePage)
 <LI><a href="#[130]">goto_system_info</a> from mod_system.o(i.goto_system_info) referenced from mod_system.o(i.SYSTEM_INFO_CreatePage)
 <LI><a href="#[131]">goto_upgrade</a> from mod_system.o(i.goto_upgrade) referenced from mod_system.o(i.SYSTEM_INFO_CreatePage)
 <LI><a href="#[10f]">goto_usb_drive</a> from mod_filemgr.o(i.goto_usb_drive) referenced from mod_filemgr.o(i.FILEMGR_CreatePage)
 <LI><a href="#[df]">goto_view</a> from mod_camera.o(i.goto_view) referenced from mod_camera.o(i.CAMERA_CreatePage)
 <LI><a href="#[fe]">goto_webserver</a> from mod_ethernet.o(i.goto_webserver) referenced from mod_ethernet.o(i.ETHERNET_CreatePage)
 <LI><a href="#[16a]">gray_rgb_convert</a> from jdcolor.o(i.gray_rgb_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[15f]">grayscale_convert</a> from jccolor.o(i.grayscale_convert) referenced from jccolor.o(i.jinit_color_converter)
 <LI><a href="#[167]">grayscale_convert</a> from jdcolor.o(i.grayscale_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[17a]">h2v1_downsample</a> from jcsample.o(i.h2v1_downsample) referenced from jcsample.o(i.jinit_downsampler)
 <LI><a href="#[1a2]">h2v1_merged_upsample</a> from jdmerge.o(i.h2v1_merged_upsample) referenced from jdmerge.o(i.jinit_merged_upsampler)
 <LI><a href="#[1a7]">h2v1_upsample</a> from jdsample.o(i.h2v1_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[17c]">h2v2_downsample</a> from jcsample.o(i.h2v2_downsample) referenced from jcsample.o(i.jinit_downsampler)
 <LI><a href="#[1a0]">h2v2_merged_upsample</a> from jdmerge.o(i.h2v2_merged_upsample) referenced from jdmerge.o(i.jinit_merged_upsampler)
 <LI><a href="#[17b]">h2v2_smooth_downsample</a> from jcsample.o(i.h2v2_smooth_downsample) referenced from jcsample.o(i.jinit_downsampler)
 <LI><a href="#[1a8]">h2v2_upsample</a> from jdsample.o(i.h2v2_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[14d]">http_ipcam_thread</a> from app_ethernet.o(i.http_ipcam_thread) referenced from app_ethernet.o(i.http_init)
 <LI><a href="#[1af]">init_destination</a> from jdatadst.o(i.init_destination) referenced from jdatadst.o(i.jpeg_stdio_dest)
 <LI><a href="#[1b2]">init_source</a> from jdatasrc.o(i.init_source) referenced from jdatasrc.o(i.jpeg_stdio_src)
 <LI><a href="#[17d]">int_downsample</a> from jcsample.o(i.int_downsample) referenced from jcsample.o(i.jinit_downsampler)
 <LI><a href="#[1a9]">int_upsample</a> from jdsample.o(i.int_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[207]">jpeg_fdct_10x10</a> from jfdctint.o(i.jpeg_fdct_10x10) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[211]">jpeg_fdct_10x5</a> from jfdctint.o(i.jpeg_fdct_10x5) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[208]">jpeg_fdct_11x11</a> from jfdctint.o(i.jpeg_fdct_11x11) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[209]">jpeg_fdct_12x12</a> from jfdctint.o(i.jpeg_fdct_12x12) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[210]">jpeg_fdct_12x6</a> from jfdctint.o(i.jpeg_fdct_12x6) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[20a]">jpeg_fdct_13x13</a> from jfdctint.o(i.jpeg_fdct_13x13) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[20b]">jpeg_fdct_14x14</a> from jfdctint.o(i.jpeg_fdct_14x14) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[20f]">jpeg_fdct_14x7</a> from jfdctint.o(i.jpeg_fdct_14x7) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[20c]">jpeg_fdct_15x15</a> from jfdctint.o(i.jpeg_fdct_15x15) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[20d]">jpeg_fdct_16x16</a> from jfdctint.o(i.jpeg_fdct_16x16) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[20e]">jpeg_fdct_16x8</a> from jfdctint.o(i.jpeg_fdct_16x8) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[1ff]">jpeg_fdct_1x1</a> from jfdctint.o(i.jpeg_fdct_1x1) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[21d]">jpeg_fdct_1x2</a> from jfdctint.o(i.jpeg_fdct_1x2) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[215]">jpeg_fdct_2x1</a> from jfdctint.o(i.jpeg_fdct_2x1) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[200]">jpeg_fdct_2x2</a> from jfdctint.o(i.jpeg_fdct_2x2) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[21c]">jpeg_fdct_2x4</a> from jfdctint.o(i.jpeg_fdct_2x4) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[201]">jpeg_fdct_3x3</a> from jfdctint.o(i.jpeg_fdct_3x3) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[21b]">jpeg_fdct_3x6</a> from jfdctint.o(i.jpeg_fdct_3x6) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[214]">jpeg_fdct_4x2</a> from jfdctint.o(i.jpeg_fdct_4x2) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[202]">jpeg_fdct_4x4</a> from jfdctint.o(i.jpeg_fdct_4x4) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[21a]">jpeg_fdct_4x8</a> from jfdctint.o(i.jpeg_fdct_4x8) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[219]">jpeg_fdct_5x10</a> from jfdctint.o(i.jpeg_fdct_5x10) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[203]">jpeg_fdct_5x5</a> from jfdctint.o(i.jpeg_fdct_5x5) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[218]">jpeg_fdct_6x12</a> from jfdctint.o(i.jpeg_fdct_6x12) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[213]">jpeg_fdct_6x3</a> from jfdctint.o(i.jpeg_fdct_6x3) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[204]">jpeg_fdct_6x6</a> from jfdctint.o(i.jpeg_fdct_6x6) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[217]">jpeg_fdct_7x14</a> from jfdctint.o(i.jpeg_fdct_7x14) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[205]">jpeg_fdct_7x7</a> from jfdctint.o(i.jpeg_fdct_7x7) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[216]">jpeg_fdct_8x16</a> from jfdctint.o(i.jpeg_fdct_8x16) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[212]">jpeg_fdct_8x4</a> from jfdctint.o(i.jpeg_fdct_8x4) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[206]">jpeg_fdct_9x9</a> from jfdctint.o(i.jpeg_fdct_9x9) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[220]">jpeg_fdct_float</a> from jfdctflt.o(i.jpeg_fdct_float) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[21f]">jpeg_fdct_ifast</a> from jfdctfst.o(i.jpeg_fdct_ifast) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[21e]">jpeg_fdct_islow</a> from jfdctint.o(i.jpeg_fdct_islow) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[1d5]">jpeg_idct_10x10</a> from jidctint.o(i.jpeg_idct_10x10) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1df]">jpeg_idct_10x5</a> from jidctint.o(i.jpeg_idct_10x5) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1d6]">jpeg_idct_11x11</a> from jidctint.o(i.jpeg_idct_11x11) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1d7]">jpeg_idct_12x12</a> from jidctint.o(i.jpeg_idct_12x12) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1de]">jpeg_idct_12x6</a> from jidctint.o(i.jpeg_idct_12x6) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1d8]">jpeg_idct_13x13</a> from jidctint.o(i.jpeg_idct_13x13) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1d9]">jpeg_idct_14x14</a> from jidctint.o(i.jpeg_idct_14x14) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1dd]">jpeg_idct_14x7</a> from jidctint.o(i.jpeg_idct_14x7) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1da]">jpeg_idct_15x15</a> from jidctint.o(i.jpeg_idct_15x15) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1db]">jpeg_idct_16x16</a> from jidctint.o(i.jpeg_idct_16x16) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1dc]">jpeg_idct_16x8</a> from jidctint.o(i.jpeg_idct_16x8) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1cd]">jpeg_idct_1x1</a> from jidctint.o(i.jpeg_idct_1x1) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1eb]">jpeg_idct_1x2</a> from jidctint.o(i.jpeg_idct_1x2) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1e3]">jpeg_idct_2x1</a> from jidctint.o(i.jpeg_idct_2x1) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1ce]">jpeg_idct_2x2</a> from jidctint.o(i.jpeg_idct_2x2) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1ea]">jpeg_idct_2x4</a> from jidctint.o(i.jpeg_idct_2x4) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1cf]">jpeg_idct_3x3</a> from jidctint.o(i.jpeg_idct_3x3) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1e9]">jpeg_idct_3x6</a> from jidctint.o(i.jpeg_idct_3x6) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1e2]">jpeg_idct_4x2</a> from jidctint.o(i.jpeg_idct_4x2) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1d0]">jpeg_idct_4x4</a> from jidctint.o(i.jpeg_idct_4x4) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1e8]">jpeg_idct_4x8</a> from jidctint.o(i.jpeg_idct_4x8) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1e7]">jpeg_idct_5x10</a> from jidctint.o(i.jpeg_idct_5x10) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1d1]">jpeg_idct_5x5</a> from jidctint.o(i.jpeg_idct_5x5) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1e6]">jpeg_idct_6x12</a> from jidctint.o(i.jpeg_idct_6x12) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1e1]">jpeg_idct_6x3</a> from jidctint.o(i.jpeg_idct_6x3) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1d2]">jpeg_idct_6x6</a> from jidctint.o(i.jpeg_idct_6x6) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1e5]">jpeg_idct_7x14</a> from jidctint.o(i.jpeg_idct_7x14) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1d3]">jpeg_idct_7x7</a> from jidctint.o(i.jpeg_idct_7x7) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1e4]">jpeg_idct_8x16</a> from jidctint.o(i.jpeg_idct_8x16) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1e0]">jpeg_idct_8x4</a> from jidctint.o(i.jpeg_idct_8x4) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1d4]">jpeg_idct_9x9</a> from jidctint.o(i.jpeg_idct_9x9) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1ee]">jpeg_idct_float</a> from jidctflt.o(i.jpeg_idct_float) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1ed]">jpeg_idct_ifast</a> from jidctfst.o(i.jpeg_idct_ifast) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1ec]">jpeg_idct_islow</a> from jidctint.o(i.jpeg_idct_islow) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[1b5]">jpeg_resync_to_restart</a> from jdmarker.o(i.jpeg_resync_to_restart) referenced from jdatasrc.o(i.jpeg_stdio_src)
 <LI><a href="#[148]">low_level_output</a> from ethernetif.o(i.low_level_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[a8]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1a1]">merged_1v_upsample</a> from jdmerge.o(i.merged_1v_upsample) referenced from jdmerge.o(i.jinit_merged_upsampler)
 <LI><a href="#[19f]">merged_2v_upsample</a> from jdmerge.o(i.merged_2v_upsample) referenced from jdmerge.o(i.jinit_merged_upsampler)
 <LI><a href="#[150]">new_color_map_1_quant</a> from jquant1.o(i.new_color_map_1_quant) referenced from jquant1.o(i.jinit_1pass_quantizer)
 <LI><a href="#[152]">new_color_map_2_quant</a> from jquant2.o(i.new_color_map_2_quant) referenced from jquant2.o(i.jinit_2pass_quantizer)
 <LI><a href="#[1a5]">noop_upsample</a> from jdsample.o(i.noop_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[164]">null_convert</a> from jccolor.o(i.null_convert) referenced from jccolor.o(i.jinit_color_converter)
 <LI><a href="#[16d]">null_convert</a> from jdcolor.o(i.null_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[15e]">null_method</a> from jccolor.o(i.null_method) referenced from jccolor.o(i.jinit_color_converter)
 <LI><a href="#[1ac]">output_message</a> from jerror.o(i.output_message) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[1f6]">pass2_fs_dither</a> from jquant2.o(i.pass2_fs_dither) referenced from jquant2.o(i.start_pass_2_quant)
 <LI><a href="#[1f7]">pass2_no_dither</a> from jquant2.o(i.pass2_no_dither) referenced from jquant2.o(i.start_pass_2_quant)
 <LI><a href="#[159]">pass_startup</a> from jcmaster.o(i.pass_startup) referenced from jcmaster.o(i.jinit_c_master_control)
 <LI><a href="#[144]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[144]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[1fc]">post_process_1pass</a> from jdpostct.o(i.post_process_1pass) referenced from jdpostct.o(i.start_pass_dpost)
 <LI><a href="#[1fe]">post_process_2pass</a> from jdpostct.o(i.post_process_2pass) referenced from jdpostct.o(i.start_pass_dpost)
 <LI><a href="#[1fd]">post_process_prepass</a> from jdpostct.o(i.post_process_prepass) referenced from jdpostct.o(i.start_pass_dpost)
 <LI><a href="#[15c]">pre_process_context</a> from jcprepct.o(i.pre_process_context) referenced from jcprepct.o(i.jinit_c_prep_controller)
 <LI><a href="#[15d]">pre_process_data</a> from jcprepct.o(i.pre_process_data) referenced from jcprepct.o(i.jinit_c_prep_controller)
 <LI><a href="#[191]">prepare_for_output_pass</a> from jdmaster.o(i.prepare_for_output_pass) referenced from jdmaster.o(i.jinit_master_decompress)
 <LI><a href="#[158]">prepare_for_pass</a> from jcmaster.o(i.prepare_for_pass) referenced from jcmaster.o(i.jinit_c_master_control)
 <LI><a href="#[1f4]">prescan_quantize</a> from jquant2.o(i.prescan_quantize) referenced from jquant2.o(i.start_pass_2_quant)
 <LI><a href="#[232]">process_data_context_main</a> from jdmainct.o(i.process_data_context_main) referenced from jdmainct.o(i.start_pass_main)
 <LI><a href="#[234]">process_data_crank_post</a> from jdmainct.o(i.process_data_crank_post) referenced from jdmainct.o(i.start_pass_main)
 <LI><a href="#[231]">process_data_simple_main</a> from jcmainct.o(i.process_data_simple_main) referenced 2 times from jcmainct.o(i.start_pass_main)
 <LI><a href="#[239]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[1f1]">quantize3_ord_dither</a> from jquant1.o(i.quantize3_ord_dither) referenced from jquant1.o(i.start_pass_1_quant)
 <LI><a href="#[1f3]">quantize_fs_dither</a> from jquant1.o(i.quantize_fs_dither) referenced from jquant1.o(i.start_pass_1_quant)
 <LI><a href="#[1f2]">quantize_ord_dither</a> from jquant1.o(i.quantize_ord_dither) referenced from jquant1.o(i.start_pass_1_quant)
 <LI><a href="#[186]">read_markers</a> from jdmarker.o(i.read_markers) referenced from jdmarker.o(i.jinit_marker_reader)
 <LI><a href="#[187]">read_restart_marker</a> from jdmarker.o(i.read_restart_marker) referenced from jdmarker.o(i.jinit_marker_reader)
 <LI><a href="#[199]">realize_virt_arrays</a> from jmemmgr.o(i.realize_virt_arrays) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[1c0]">recv_raw</a> from api_msg.o(i.recv_raw) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[1c2]">recv_tcp</a> from api_msg.o(i.recv_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[1c1]">recv_udp</a> from api_msg.o(i.recv_udp) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[198]">request_virt_barray</a> from jmemmgr.o(i.request_virt_barray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[197]">request_virt_sarray</a> from jmemmgr.o(i.request_virt_sarray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[1ae]">reset_error_mgr</a> from jerror.o(i.reset_error_mgr) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[181]">reset_input_controller</a> from jdinput.o(i.reset_input_controller) referenced from jdinput.o(i.jinit_input_controller)
 <LI><a href="#[185]">reset_marker_reader</a> from jdmarker.o(i.reset_marker_reader) referenced from jdmarker.o(i.jinit_marker_reader)
 <LI><a href="#[109]">return_bkgnd_from_errorpage</a> from mod_ethernet.o(i.return_bkgnd_from_errorpage) referenced from mod_ethernet.o(i.ETHERNET_CreatePage)
 <LI><a href="#[139]">return_bkgnd_from_errorpage</a> from mod_system.o(i.return_bkgnd_from_errorpage) referenced from mod_system.o(i.SYSTEM_INFO_CreatePage)
 <LI><a href="#[13a]">return_dcontrol_from_errorpage</a> from mod_system.o(i.return_dcontrol_from_errorpage) referenced from mod_system.o(i.SYSTEM_INFO_CreatePage)
 <LI><a href="#[11e]">return_from_browser</a> from mod_image.o(i.return_from_browser) referenced from mod_image.o(i.IMAGE_CreatePage)
 <LI><a href="#[e2]">return_from_capture</a> from mod_camera.o(i.return_from_capture) referenced from mod_camera.o(i.CAMERA_CreatePage)
 <LI><a href="#[10d]">return_from_direct</a> from mod_filemgr.o(i.return_from_direct) referenced from mod_filemgr.o(i.FILEMGR_CreatePage)
 <LI><a href="#[124]">return_from_direct</a> from mod_image.o(i.return_from_direct) referenced from mod_image.o(i.IMAGE_CreatePage)
 <LI><a href="#[126]">return_from_direct_camera</a> from mod_image.o(i.return_from_direct_camera) referenced from mod_image.o(i.IMAGE_CreatePage)
 <LI><a href="#[104]">return_from_distantcontrol</a> from mod_ethernet.o(i.return_from_distantcontrol) referenced from mod_ethernet.o(i.ETHERNET_CreatePage)
 <LI><a href="#[128]">return_from_effects</a> from mod_image.o(i.return_from_effects) referenced from mod_image.o(i.IMAGE_CreatePage)
 <LI><a href="#[bf]">return_from_equalizer</a> from mod_audio.o(i.return_from_equalizer) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[c6]">return_from_errorpage</a> from mod_audio.o(i.return_from_errorpage) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[149]">return_from_player</a> from mod_audio.o(i.return_from_player) referenced from mod_audio.o(i.exit_player)
 <LI><a href="#[c5]">return_from_settings</a> from mod_audio.o(i.return_from_settings) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[e7]">return_from_settings</a> from mod_camera.o(i.return_from_settings) referenced from mod_camera.o(i.CAMERA_CreatePage)
 <LI><a href="#[105]">return_from_settings</a> from mod_ethernet.o(i.return_from_settings) referenced from mod_ethernet.o(i.ETHERNET_CreatePage)
 <LI><a href="#[122]">return_from_settings</a> from mod_image.o(i.return_from_settings) referenced from mod_image.o(i.IMAGE_CreatePage)
 <LI><a href="#[135]">return_from_settings</a> from mod_system.o(i.return_from_settings) referenced from mod_system.o(i.SYSTEM_INFO_CreatePage)
 <LI><a href="#[134]">return_from_system_info</a> from mod_system.o(i.return_from_system_info) referenced from mod_system.o(i.SYSTEM_INFO_CreatePage)
 <LI><a href="#[137]">return_from_upgrade</a> from mod_system.o(i.return_from_upgrade) referenced from mod_system.o(i.SYSTEM_INFO_CreatePage)
 <LI><a href="#[106]">return_from_warning</a> from mod_ethernet.o(i.return_from_warning) referenced from mod_ethernet.o(i.ETHERNET_CreatePage)
 <LI><a href="#[102]">return_from_webserver</a> from mod_ethernet.o(i.return_from_webserver) referenced from mod_ethernet.o(i.ETHERNET_CreatePage)
 <LI><a href="#[ae]">return_to_menu</a> from mod_audio.o(i.return_to_menu) referenced from mod_audio.o(i.AUDIO_CreatePage)
 <LI><a href="#[e0]">return_to_menu</a> from mod_camera.o(i.return_to_menu) referenced from mod_camera.o(i.CAMERA_CreatePage)
 <LI><a href="#[e9]">return_to_menu</a> from mod_console.o(i.return_to_menu) referenced from mod_console.o(i.CONSOLE_CreatePage)
 <LI><a href="#[101]">return_to_menu</a> from mod_ethernet.o(i.return_to_menu) referenced from mod_ethernet.o(i.ETHERNET_CreatePage)
 <LI><a href="#[110]">return_to_menu</a> from mod_filemgr.o(i.return_to_menu) referenced from mod_filemgr.o(i.FILEMGR_CreatePage)
 <LI><a href="#[11d]">return_to_menu</a> from mod_image.o(i.return_to_menu) referenced from mod_image.o(i.IMAGE_CreatePage)
 <LI><a href="#[133]">return_to_menu</a> from mod_system.o(i.return_to_menu) referenced from mod_system.o(i.SYSTEM_INFO_CreatePage)
 <LI><a href="#[113]">return_to_whole_drive</a> from mod_filemgr.o(i.return_to_whole_drive) referenced from mod_filemgr.o(i.FILEMGR_CreatePage)
 <LI><a href="#[162]">rgb_convert</a> from jccolor.o(i.rgb_convert) referenced from jccolor.o(i.jinit_color_converter)
 <LI><a href="#[16b]">rgb_convert</a> from jdcolor.o(i.rgb_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[161]">rgb_gray_convert</a> from jccolor.o(i.rgb_gray_convert) referenced from jccolor.o(i.jinit_color_converter)
 <LI><a href="#[168]">rgb_gray_convert</a> from jdcolor.o(i.rgb_gray_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[163]">rgb_ycc_convert</a> from jccolor.o(i.rgb_ycc_convert) referenced from jccolor.o(i.jinit_color_converter)
 <LI><a href="#[160]">rgb_ycc_start</a> from jccolor.o(i.rgb_ycc_start) referenced from jccolor.o(i.jinit_color_converter)
 <LI><a href="#[19d]">self_destruct</a> from jmemmgr.o(i.self_destruct) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[143]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[143]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[177]">sep_downsample</a> from jcsample.o(i.sep_downsample) referenced from jcsample.o(i.jinit_downsampler)
 <LI><a href="#[1a4]">sep_upsample</a> from jdsample.o(i.sep_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[1b4]">skip_input_data</a> from jdatasrc.o(i.skip_input_data) referenced from jdatasrc.o(i.jpeg_stdio_src)
 <LI><a href="#[188]">skip_variable</a> from jdmarker.o(i.skip_variable) referenced from jdmarker.o(i.jinit_marker_reader)
 <LI><a href="#[16e]">start_input_pass</a> from jdcoefct.o(i.start_input_pass) referenced from jdcoefct.o(i.jinit_d_coef_controller)
 <LI><a href="#[182]">start_input_pass</a> from jdinput.o(i.start_input_pass) referenced from jdinput.o(i.jinit_input_controller)
 <LI><a href="#[16f]">start_output_pass</a> from jdcoefct.o(i.start_output_pass) referenced from jdcoefct.o(i.jinit_d_coef_controller)
 <LI><a href="#[153]">start_pass</a> from jdarith.o(i.start_pass) referenced from jdarith.o(i.jinit_arith_decoder)
 <LI><a href="#[154]">start_pass</a> from jcarith.o(i.start_pass) referenced from jcarith.o(i.jinit_arith_encoder)
 <LI><a href="#[184]">start_pass</a> from jddctmgr.o(i.start_pass) referenced from jddctmgr.o(i.jinit_inverse_dct)
 <LI><a href="#[14e]">start_pass_1_quant</a> from jquant1.o(i.start_pass_1_quant) referenced from jquant1.o(i.jinit_1pass_quantizer)
 <LI><a href="#[151]">start_pass_2_quant</a> from jquant2.o(i.start_pass_2_quant) referenced from jquant2.o(i.jinit_2pass_quantizer)
 <LI><a href="#[156]">start_pass_coef</a> from jccoefct.o(i.start_pass_coef) referenced from jccoefct.o(i.jinit_c_coef_controller)
 <LI><a href="#[166]">start_pass_dcolor</a> from jdcolor.o(i.start_pass_dcolor) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[176]">start_pass_downsample</a> from jcsample.o(i.start_pass_downsample) referenced from jcsample.o(i.jinit_downsampler)
 <LI><a href="#[175]">start_pass_dpost</a> from jdpostct.o(i.start_pass_dpost) referenced from jdpostct.o(i.jinit_d_post_controller)
 <LI><a href="#[17e]">start_pass_fdctmgr</a> from jcdctmgr.o(i.start_pass_fdctmgr) referenced from jcdctmgr.o(i.jinit_forward_dct)
 <LI><a href="#[180]">start_pass_huff</a> from jchuff.o(i.start_pass_huff) referenced from jchuff.o(i.jinit_huff_encoder)
 <LI><a href="#[17f]">start_pass_huff_decoder</a> from jdhuff.o(i.start_pass_huff_decoder) referenced from jdhuff.o(i.jinit_huff_decoder)
 <LI><a href="#[157]">start_pass_main</a> from jcmainct.o(i.start_pass_main) referenced from jcmainct.o(i.jinit_c_main_controller)
 <LI><a href="#[174]">start_pass_main</a> from jdmainct.o(i.start_pass_main) referenced from jdmainct.o(i.jinit_d_main_controller)
 <LI><a href="#[19e]">start_pass_merged_upsample</a> from jdmerge.o(i.start_pass_merged_upsample) referenced from jdmerge.o(i.jinit_merged_upsampler)
 <LI><a href="#[15b]">start_pass_prep</a> from jcprepct.o(i.start_pass_prep) referenced from jcprepct.o(i.jinit_c_prep_controller)
 <LI><a href="#[1a3]">start_pass_upsample</a> from jdsample.o(i.start_pass_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[138]">start_upgrade</a> from mod_system.o(i.start_upgrade) referenced from mod_system.o(i.SYSTEM_INFO_CreatePage)
 <LI><a href="#[236]">tcp_accept_null</a> from tcp.o(i.tcp_accept_null) referenced from tcp.o(i.tcp_listen_with_backlog)
 <LI><a href="#[235]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[12e]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from app_ethernet.o(i.LwIP_Init)
 <LI><a href="#[237]">tcpip_tcp_timer</a> from tcpip.o(i.tcpip_tcp_timer) referenced from tcpip.o(i.tcp_timer_needed)
 <LI><a href="#[237]">tcpip_tcp_timer</a> from tcpip.o(i.tcpip_tcp_timer) referenced from tcpip.o(i.tcpip_tcp_timer)
 <LI><a href="#[238]">tcpip_thread</a> from tcpip.o(i.tcpip_thread) referenced from tcpip.o(i.tcpip_init)
 <LI><a href="#[1b1]">term_destination</a> from jdatadst.o(i.term_destination) referenced from jdatadst.o(i.jpeg_stdio_dest)
 <LI><a href="#[1b6]">term_source</a> from jdatasrc.o(i.term_source) referenced from jdatasrc.o(i.jpeg_stdio_src)
 <LI><a href="#[52]">vPortSVCHandler</a> from port_cm4.o(.emb_text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[108]">wUpdateConnectionStatus</a> from mod_ethernet.o(i.wUpdateConnectionStatus) referenced from mod_ethernet.o(i.ETHERNET_CreatePage)
 <LI><a href="#[18a]">write_file_header</a> from jcmarker.o(i.write_file_header) referenced from jcmarker.o(i.jinit_marker_writer)
 <LI><a href="#[18d]">write_file_trailer</a> from jcmarker.o(i.write_file_trailer) referenced from jcmarker.o(i.jinit_marker_writer)
 <LI><a href="#[18b]">write_frame_header</a> from jcmarker.o(i.write_frame_header) referenced from jcmarker.o(i.jinit_marker_writer)
 <LI><a href="#[190]">write_marker_byte</a> from jcmarker.o(i.write_marker_byte) referenced from jcmarker.o(i.jinit_marker_writer)
 <LI><a href="#[18f]">write_marker_header</a> from jcmarker.o(i.write_marker_header) referenced from jcmarker.o(i.jinit_marker_writer)
 <LI><a href="#[18c]">write_scan_header</a> from jcmarker.o(i.write_scan_header) referenced from jcmarker.o(i.jinit_marker_writer)
 <LI><a href="#[18e]">write_tables_only</a> from jcmarker.o(i.write_tables_only) referenced from jcmarker.o(i.jinit_marker_writer)
 <LI><a href="#[54]">xPortPendSVHandler</a> from port_cm4.o(.emb_text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[169]">ycc_rgb_convert</a> from jdcolor.o(i.ycc_rgb_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[16c]">ycck_cmyk_convert</a> from jdcolor.o(i.ycck_cmyk_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[aa]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[708]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[23a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[265]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[709]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[70a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[70b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[70c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[70d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[52]"></a>vPortSVCHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port_cm4.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[703]"></a>__asm___10_port_cm4_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port_cm4.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[702]"></a>__asm___10_port_cm4_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port_cm4.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[54]"></a>xPortPendSVHandler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port_cm4.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6fa]"></a>vPortSetInterruptMask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, port_cm4.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[6fb]"></a>vPortClearInterruptMask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, port_cm4.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[4c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[246]"></a>LOUDNESS_SPCORP_Symbol_000</STRONG> (Thumb, 178 bytes, Stack size 44 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LOUDNESS_SPCORP_Symbol_000
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOUDNESS_SPCORP_Symbol_005
</UL>

<P><STRONG><a name="[240]"></a>LOUDNESS_SPCORP_Symbol_004</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOUDNESS_SPCORP_Symbol_004
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transition_len
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_approx
</UL>

<P><STRONG><a name="[24a]"></a>LOUDNESS_SPCORP_Symbol_009</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, filter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritLdCtrl_SetPrms
</UL>

<P><STRONG><a name="[70e]"></a>LOUDNESS_SPCORP_Symbol_006</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, filter.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>LOUDNESS_SPCORP_Symbol_008</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, filter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritLdCtrl_Reset
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOUDNESS_SPCORP_Symbol_007
</UL>

<P><STRONG><a name="[23d]"></a>LOUDNESS_SPCORP_Symbol_007</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LOUDNESS_SPCORP_Symbol_007
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOUDNESS_SPCORP_Symbol_008
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritLdCtrl_Init
</UL>

<P><STRONG><a name="[243]"></a>LOUDNESS_SPCORP_Symbol_005</STRONG> (Thumb, 588 bytes, Stack size 48 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LOUDNESS_SPCORP_Symbol_005 &rArr; mix &rArr; mid_point_prms
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOUDNESS_SPCORP_Symbol_000
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transition_len
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_approx
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mid_point_prms
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritLdCtrl_Apply
</UL>

<P><STRONG><a name="[247]"></a>SpiritLdCtrl_Reset</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SpiritLdCtrl_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOUDNESS_SPCORP_Symbol_008
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Audio_SetLoudnessGain
</UL>

<P><STRONG><a name="[248]"></a>SpiritLdCtrl_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SpiritLdCtrl_Init &rArr; LOUDNESS_SPCORP_Symbol_007
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOUDNESS_SPCORP_Symbol_007
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Open
</UL>

<P><STRONG><a name="[249]"></a>SpiritLdCtrl_SetPrms</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, filter.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOUDNESS_SPCORP_Symbol_009
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Open
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Audio_SetLoudnessGain
</UL>

<P><STRONG><a name="[2b2]"></a>SpiritLdCtrl_GetPrms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, filter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Open
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Audio_SetLoudnessGain
</UL>

<P><STRONG><a name="[24b]"></a>SpiritLdCtrl_Apply</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SpiritLdCtrl_Apply &rArr; LOUDNESS_SPCORP_Symbol_005 &rArr; mix &rArr; mid_point_prms
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOUDNESS_SPCORP_Symbol_005
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player_FRead
</UL>

<P><STRONG><a name="[24f]"></a>EQ_SPCORP_Symbol_002</STRONG> (Thumb, 910 bytes, Stack size 100 bytes, flt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = EQ_SPCORP_Symbol_002
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritEQ_FltSet
</UL>

<P><STRONG><a name="[70f]"></a>EQ_SPCORP_Symbol_001</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, flt.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>EQ_SPCORP_Symbol_000</STRONG> (Thumb, 618 bytes, Stack size 144 bytes, flt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EQ_SPCORP_Symbol_000
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritEQ_Apply
</UL>

<P><STRONG><a name="[24c]"></a>SpiritEQ_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, flt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiritEQ_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Open
</UL>

<P><STRONG><a name="[24e]"></a>SpiritEQ_FltSet</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, flt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SpiritEQ_FltSet &rArr; EQ_SPCORP_Symbol_002
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EQ_SPCORP_Symbol_002
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Open
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Audio_SetEq
</UL>

<P><STRONG><a name="[2b1]"></a>SpiritEQ_FltGet</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, flt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Open
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Audio_SetEq
</UL>

<P><STRONG><a name="[710]"></a>SpiritEQ_FltReset</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, flt.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>SpiritEQ_Apply</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, flt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SpiritEQ_Apply &rArr; EQ_SPCORP_Symbol_000
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EQ_SPCORP_Symbol_000
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player_FRead
</UL>

<P><STRONG><a name="[252]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[387]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateDHCPState
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_huff_table
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_range_limit_table
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dht
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvObjectDetection
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[281]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_DirectEx
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_player
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_gen_optimal_table
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass_huff
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_huff
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_context_buffer
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_script
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dht
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;latch_quant_tables
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_sub
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_first
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu
</UL>

<P><STRONG><a name="[711]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateInitDisplay
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateConnState
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateFileListDisplay
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEthernet
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateDHCPState
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_DHCPFailState
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayImageLabel
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[712]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[713]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritEQ_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_first_pass
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_data
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_coef_controller
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress_onepass
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_range_limit_table
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_inverse_dct
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_2_quant
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_1_quant
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quantize_ord_dither
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quantize_fs_dither
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_virt_sarray
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_virt_barray
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrouprectangular
</UL>

<P><STRONG><a name="[34f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_PreInit
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_init
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateDecompress
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateCompress
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_PageObj
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DynWebPage
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_huff
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_make_c_derived_tbl
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_gen_optimal_table
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_8x4
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_7x7
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_7x14
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_6x6
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_6x3
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_6x12
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_5x5
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_5x10
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_4x8
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_4x4
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_4x2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_3x6
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_3x3
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_2x4
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_2x2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_2x1
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_1x2
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_1x1
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_14x7
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_12x6
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_10x5
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_make_d_derived_tbl
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvhistogramEqualizeImage
</UL>

<P><STRONG><a name="[714]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[324]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateBackgroundProcessStatus
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Jpg_To_File
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_previous_file
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_next_file
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_StartBrowser
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCameraBackgound
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DynWebPage
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Selected_Item
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Selected_Item
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_SubFolder
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Selected_Item
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
</UL>

<P><STRONG><a name="[3fd]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_BuildCameraList
</UL>

<P><STRONG><a name="[2ae]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSmallIconControlObj
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CameraView
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_folder
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_DefaultPath
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_previous_file
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_next_file
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_folder
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_StartBrowser
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_BuildList
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_BuildCameraList
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCameraBackgound
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_DefaultPath
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sort_Files
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetStringFieldValue
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[2a4]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Label
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CenterCaption
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSmallIconControlObj
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddIconControlObj
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateFileListDisplay
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Open
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_folder
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_CreatePage
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_folder
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateDHCPState
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DynWebPage
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayImageLabel
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwitchVisible
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlidebarVisible
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioButtonVisible
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLabelVisible
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCheckboxVisible
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetButtonVisible
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjSize
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetStringFieldValue
</UL>

<P><STRONG><a name="[3b6]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_filename_ext
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_set_param
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Directory
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_param
</UL>

<P><STRONG><a name="[2a3]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateFileListDisplay
</UL>

<P><STRONG><a name="[26a]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileOnly
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateBackgroundProcessStatus
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILMGR_DirectEx
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_DirectEx
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_player
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateFileListDisplay
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_AddFileToPlaylist
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Open
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_DefaultPath
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Jpg_To_File
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_previous_file
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_next_file
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_StartBrowser
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCameraBackgound
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_DefaultPath
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_CreatePage
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Selected_Item
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_DirectEx
</UL>

<P><STRONG><a name="[61a]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_serve
</UL>

<P><STRONG><a name="[3e8]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_filename_ext
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileOnly
</UL>

<P><STRONG><a name="[257]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_detect_face
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistogramVisible
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvhistogramEqualizeImage
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvObjectDetection
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrouprectangular
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[25b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_detect_face
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistogramVisible
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[25c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistogramVisible
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[25d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_detect_face
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistogramVisible
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_fdctmgr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrouprectangular
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[25e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_detect_face
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistogramVisible
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_fdctmgr
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[25f]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_detect_face
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistogramVisible
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[260]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistogramVisible
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_fdctmgr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrouprectangular
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[261]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistogramVisible
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvhistogramEqualizeImage
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvObjectDetection
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrouprectangular
</UL>

<P><STRONG><a name="[5fc]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_detect_face
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvhistogramEqualizeImage
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvObjectDetection
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrouprectangular
</UL>

<P><STRONG><a name="[715]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[4ab]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistogramVisible
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
</UL>

<P><STRONG><a name="[4aa]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistogramVisible
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvObjectDetection
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[262]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_detect_face
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_fdctmgr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass
</UL>

<P><STRONG><a name="[716]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[536]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[254]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[717]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[718]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[719]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[71a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[71b]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[259]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[264]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[23b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[71c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[71d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[71e]"></a>__decompress2</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[4b3]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[49a]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_Stop
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_Start
</UL>

<P><STRONG><a name="[492]"></a>ADC_CommonInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_ADC_Init
</UL>

<P><STRONG><a name="[491]"></a>ADC_CommonStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_CommonStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_ADC_Init
</UL>

<P><STRONG><a name="[267]"></a>ADC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_ADC_Init
</UL>

<P><STRONG><a name="[4b2]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[4b1]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[494]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_ADC_Init
</UL>

<P><STRONG><a name="[499]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_Start
</UL>

<P><STRONG><a name="[49b]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_Start
</UL>

<P><STRONG><a name="[493]"></a>ADC_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_ADC_Init
</UL>

<P><STRONG><a name="[280]"></a>AUDIO_DirectEx</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, mod_audio.o(i.AUDIO_DirectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1244<LI>Call Chain = AUDIO_DirectEx &rArr; AUDIO_AddFileToPlaylist &rArr; AUDIO_Play &rArr; AudioPlayer_Play &rArr; AudioPlayer_Open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Stop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Play
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_AddFileToPlaylist
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Init
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_GetState
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Selected_Item
</UL>

<P><STRONG><a name="[ee]"></a>AddComboOption</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, graphicobject.o(i.AddComboOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AddComboOption &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetStringFieldValue
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_ComboBoxOption
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_CreatePage
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_CreatePage
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicobject.o(i.Create_ComboBoxGrp)
</UL>
<P><STRONG><a name="[2a9]"></a>AddIconControlObj</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, gl_ext.o(i.AddIconControlObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AddIconControlObj &rArr; NewLabel &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewLabel
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewIcon
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_BMP_file
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowUtilitiesGroup
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMultimediaGroup
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowConnectivityGroup
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_CreatePage
</UL>

<P><STRONG><a name="[274]"></a>AddPageControlObj</STRONG> (Thumb, 592 bytes, Stack size 40 bytes, graphicobject.o(i.AddPageControlObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewComboBoxGrp
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetPageHeader
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetMenuItem
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_AddScroll
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSmallIconControlObj
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddIconControlObj
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateIcon
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_player
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_RefreshIcons
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_CreatePage
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_CreatePage
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_CreatePage
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_CtxMenu
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_CreatePage
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDistantControl
</UL>

<P><STRONG><a name="[f4]"></a>AddRadioOption</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, graphicobject.o(i.AddRadioOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AddRadioOption &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetStringFieldValue
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_RadioButtonOption
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicobject.o(i.Create_RadioButtonGrp)
</UL>
<P><STRONG><a name="[2ad]"></a>AddSmallIconControlObj</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, gl_ext.o(i.AddSmallIconControlObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AddSmallIconControlObj &rArr; NewLabel &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewLabel
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewIcon
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Files
</UL>

<P><STRONG><a name="[287]"></a>App_Audio_SetEq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_audio.o(i.App_Audio_SetEq))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = App_Audio_SetEq &rArr; SpiritEQ_FltSet &rArr; EQ_SPCORP_Symbol_002
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritEQ_FltSet
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritEQ_FltGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_EqualizerCtrlBand4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_EqualizerCtrlBand3
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_EqualizerCtrlBand2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_EqualizerCtrlBand1
</UL>

<P><STRONG><a name="[28e]"></a>App_Audio_SetLoudnessGain</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_audio.o(i.App_Audio_SetLoudnessGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = App_Audio_SetLoudnessGain &rArr; SpiritLdCtrl_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritLdCtrl_SetPrms
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritLdCtrl_Reset
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritLdCtrl_GetPrms
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_LoudnessCtrl
</UL>

<P><STRONG><a name="[2b3]"></a>Apply_camera_native_effects</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, app_camera.o(i.Apply_camera_native_effects))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Apply_camera_native_effects &rArr; OV2640_ColorEffectsConfig &rArr; OV2640_WriteReg &rArr; OV2640_TimeoutUserCallback &rArr; OV2640_HW_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ColorEffectsConfig
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_BandWConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
</UL>

<P><STRONG><a name="[299]"></a>AudioPlayer_Close</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_audio.o(i.AudioPlayer_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = AudioPlayer_Close &rArr; f_close &rArr; f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decoders_SelectDecoder
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_player
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Stop
</UL>

<P><STRONG><a name="[2be]"></a>AudioPlayer_DeInit</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, app_audio.o(i.AudioPlayer_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AudioPlayer_DeInit &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_free
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_player
</UL>

<P><STRONG><a name="[2a0]"></a>AudioPlayer_GetFileInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_audio.o(i.AudioPlayer_GetFileInfo))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateFileListDisplay
</UL>

<P><STRONG><a name="[28c]"></a>AudioPlayer_GetFileLength</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_audio.o(i.AudioPlayer_GetFileLength))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Rewind
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_ProgressCtrl
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Forward
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_GetTimeInfo
</UL>

<P><STRONG><a name="[26c]"></a>AudioPlayer_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_audio.o(i.AudioPlayer_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_DirectEx
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Startup
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Rewind
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_ProgressCtrl
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Forward
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Background
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_AddFileToPlaylist
</UL>

<P><STRONG><a name="[289]"></a>AudioPlayer_GetTimeInfo</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_audio.o(i.AudioPlayer_GetTimeInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AudioPlayer_GetTimeInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_GetFileLength
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateTimeInformation
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Rewind
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Forward
</UL>

<P><STRONG><a name="[283]"></a>AudioPlayer_Init</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, app_audio.o(i.AudioPlayer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = AudioPlayer_Init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_malloc
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_free
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decoders_SelectDecoder
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_DirectEx
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_player
</UL>

<P><STRONG><a name="[2c5]"></a>AudioPlayer_Open</STRONG> (Thumb, 628 bytes, Stack size 160 bytes, app_audio.o(i.AudioPlayer_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1156<LI>Call Chain = AudioPlayer_Open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileOnly
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritLdCtrl_SetPrms
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritLdCtrl_Init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritLdCtrl_GetPrms
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritEQ_Init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritEQ_FltSet
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritEQ_FltGet
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decoders_SelectDecoder
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Play
</UL>

<P><STRONG><a name="[28a]"></a>AudioPlayer_Pause</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, app_audio.o(i.AudioPlayer_Pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AudioPlayer_Pause
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Rewind
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_ProgressCtrl
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Pause
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Forward
</UL>

<P><STRONG><a name="[28d]"></a>AudioPlayer_Play</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, app_audio.o(i.AudioPlayer_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172<LI>Call Chain = AudioPlayer_Play &rArr; AudioPlayer_Open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_DeInitBuffer
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Rewind
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_ProgressCtrl
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PlayFromPlayList
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Play
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Forward
</UL>

<P><STRONG><a name="[2c3]"></a>AudioPlayer_PlayUpdate</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, app_audio.o(i.AudioPlayer_PlayUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = AudioPlayer_PlayUpdate &rArr; Player_FRead &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player_FRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_DeInitBuffer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Task
</UL>

<P><STRONG><a name="[da]"></a>AudioPlayer_SetPosition</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_audio.o(i.AudioPlayer_SetPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = AudioPlayer_SetPosition &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Rewind
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_ProgressCtrl
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_audio.o(i.AudioPlayer_Open)
</UL>
<P><STRONG><a name="[28f]"></a>AudioPlayer_SetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_audio.o(i.AudioPlayer_SetState))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Media_changed
</UL>

<P><STRONG><a name="[298]"></a>AudioPlayer_Stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_audio.o(i.AudioPlayer_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AudioPlayer_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player_FRead
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_player
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Stop
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dec_ReadDataCallback
</UL>

<P><STRONG><a name="[d9]"></a>AudioPlayer_Task</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, app_audio.o(i.AudioPlayer_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = AudioPlayer_Task &rArr; AudioPlayer_PlayUpdate &rArr; Player_FRead &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_PlayUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_audio.o(i.AudioPlayer_Init)
</UL>
<P><STRONG><a name="[290]"></a>AudioPlayer_VolumeCtrl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_audio.o(i.AudioPlayer_VolumeCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AudioPlayer_VolumeCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_VolumeCtrl
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_MuteCtrl
</UL>

<P><STRONG><a name="[dc]"></a>AudioPlayer_XferCplt</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, app_audio.o(i.AudioPlayer_XferCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AudioPlayer_XferCplt &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_audio.o(i.AudioPlayer_Open)
</UL>
<P><STRONG><a name="[2cc]"></a>Audio_MAL_Init</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm324xg_audio_codec.o(i.Audio_MAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Audio_MAL_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVAL_AUDIO_Init
</UL>

<P><STRONG><a name="[2d4]"></a>Audio_MAL_PauseResume</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm324xg_audio_codec.o(i.Audio_MAL_PauseResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Audio_MAL_PauseResume &rArr; Codec_AudioInterface_Init &rArr; I2S_InitExt
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_AudioInterface_Init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_AudioInterface_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVAL_AUDIO_PauseResume
</UL>

<P><STRONG><a name="[2b8]"></a>Audio_MAL_Play</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm324xg_audio_codec.o(i.Audio_MAL_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Audio_MAL_Play &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioCmd
</UL>

<P><STRONG><a name="[2da]"></a>Audio_MAL_Stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm324xg_audio_codec.o(i.Audio_MAL_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Audio_MAL_Stop &rArr; Codec_AudioInterface_Init &rArr; I2S_InitExt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_AudioInterface_Init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_AudioInterface_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVAL_AUDIO_Stop
</UL>

<P><STRONG><a name="[2db]"></a>BMP_Decode</STRONG> (Thumb, 1148 bytes, Stack size 152 bytes, image_bmp.o(i.BMP_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = BMP_Decode &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Line
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeImagePitch
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_Decode
</UL>

<P><STRONG><a name="[2e6]"></a>BSP_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, bsp.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BSP_Init &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDInit
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Cmd
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_CompensationCellCmd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_TSC_Init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_Init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_JOY_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_PreInit
</UL>

<P><STRONG><a name="[50]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32xxx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2e8]"></a>CONSOLE_AddMessage</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, app_console.o(i.CONSOLE_AddMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_UpdateCursor
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_ScrollReset
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Refresh
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_PreInit
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_LibInit
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_AddModule
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player_FRead
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_Task
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_UnrecoveredError
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_SerialNum_String
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Product_String
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_OverCurrentDetected
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Manufacturer_String
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_EnumerationDone
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Device_DescAvailable
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceSpeedDetected
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceNotSupported
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceDisconnected
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceAttached
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Configuration_DescAvailable
</UL>

<P><STRONG><a name="[446]"></a>CONSOLE_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_console.o(i.CONSOLE_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_PreInit
</UL>

<P><STRONG><a name="[eb]"></a>CONSOLE_Refresh</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, mod_console.o(i.CONSOLE_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetBackColor
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_AddScroll
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearTextZone
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollUp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollDown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_console.o(i.CONSOLE_CreatePage)
</UL>
<P><STRONG><a name="[305]"></a>CONSOLE_ScrollReset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mod_console.o(i.CONSOLE_ScrollReset))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_menu
</UL>

<P><STRONG><a name="[306]"></a>CONSOLE_UpdateCursor</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mod_console.o(i.CONSOLE_UpdateCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CONSOLE_UpdateCursor &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateScrollPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
</UL>

<P><STRONG><a name="[304]"></a>Camera_Config</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, camera_api.o(i.Camera_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Camera_Config &rArr; OV2640_QVGAConfig &rArr; OV2640_Reset &rArr; OV2640_WriteReg &rArr; OV2640_TimeoutUserCallback &rArr; OV2640_HW_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_ReadID
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QVGAConfig
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QQVGAConfig
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_HW_Init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QVGAConfig
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QQVGAConfig
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_Startup
</UL>

<P><STRONG><a name="[317]"></a>Camera_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, camera_api.o(i.Camera_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Camera_IRQHandler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ClearFlag
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[31a]"></a>Camera_SetBrighnessValue</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, camera_api.o(i.Camera_SetBrighnessValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Camera_SetBrighnessValue &rArr; OV2640_BrightnessConfig &rArr; OV2640_WriteReg &rArr; OV2640_TimeoutUserCallback &rArr; OV2640_HW_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_BrightnessConfig
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_BrightnessConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Capture_Brightness_Inc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Capture_Brightness_Dec
</UL>

<P><STRONG><a name="[2b0]"></a>ChangeLabelColor</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gl_ext.o(i.ChangeLabelColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ChangeLabelColor &rArr; RefreshPageControl
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPageControl
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_CtxMenu
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_CtxMenu
</UL>

<P><STRONG><a name="[2d6]"></a>Codec_AudioInterface_Init</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm324xg_audio_codec.o(i.Codec_AudioInterface_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Codec_AudioInterface_Init &rArr; I2S_InitExt
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_InitExt
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Stop
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_PauseResume
</UL>

<P><STRONG><a name="[33f]"></a>Codec_Init</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, stm324xg_audio_codec.o(i.Codec_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Codec_Init &rArr; Codec_VolumeCtrl &rArr; Codec_WriteRegister &rArr; Codec_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_VolumeCtrl
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_AudioInterface_Init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WriteRegister
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_GPIO_Init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_CtrlInterface_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVAL_AUDIO_Init
</UL>

<P><STRONG><a name="[342]"></a>Codec_Mute</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm324xg_audio_codec.o(i.Codec_Mute))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Codec_Mute &rArr; Codec_WriteRegister &rArr; Codec_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Stop
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_PauseResume
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVAL_AUDIO_Mute
</UL>

<P><STRONG><a name="[343]"></a>Codec_PauseResume</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm324xg_audio_codec.o(i.Codec_PauseResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Codec_PauseResume &rArr; Codec_Mute &rArr; Codec_WriteRegister &rArr; Codec_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Mute
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVAL_AUDIO_PauseResume
</UL>

<P><STRONG><a name="[344]"></a>Codec_Stop</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm324xg_audio_codec.o(i.Codec_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Codec_Stop &rArr; IOE_WriteIOPin &rArr; I2C_WriteDeviceRegister &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_WriteIOPin
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Mute
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVAL_AUDIO_Stop
</UL>

<P><STRONG><a name="[347]"></a>Codec_TIMEOUT_UserCallback</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, app_audio.o(i.Codec_TIMEOUT_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Codec_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftwareResetCmd
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WriteRegister
</UL>

<P><STRONG><a name="[341]"></a>Codec_VolumeCtrl</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm324xg_audio_codec.o(i.Codec_VolumeCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Codec_VolumeCtrl &rArr; Codec_WriteRegister &rArr; Codec_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Init
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVAL_AUDIO_VolumeCtl
</UL>

<P><STRONG><a name="[3cc]"></a>CompareCoordinates</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, graphicobject.o(i.CompareCoordinates))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CompareCoordinates
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Background_Handler
</UL>

<P><STRONG><a name="[3ce]"></a>CompareJoyCoordinates</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, graphicobject.o(i.CompareJoyCoordinates))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CompareJoyCoordinates
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Background_Handler
</UL>

<P><STRONG><a name="[272]"></a>Create_PageObj</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, graphicobject.o(i.Create_PageObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Create_PageObj
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_CreatePage
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_CreatePage
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_CreatePage
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_CreatePage
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
</UL>

<P><STRONG><a name="[351]"></a>DCD_EP_ClrStall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_EP_ClrStall &rArr; USB_OTG_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[353]"></a>DCD_EP_Open</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[355]"></a>DCD_EP_PrepareRx</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_PrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[4cd]"></a>DCD_EP_SetAddress</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_EP_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[358]"></a>DCD_EP_Stall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>

<P><STRONG><a name="[35a]"></a>DCD_EP_Tx</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>

<P><STRONG><a name="[2ff]"></a>DCMI_CaptureCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_CaptureCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_start_capture
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_Task
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_Background
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_webserver
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_ImageCaptureInit
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_CaptureNextImage
</UL>

<P><STRONG><a name="[319]"></a>DCMI_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IRQHandler
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_IRQHandler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_Task
</UL>

<P><STRONG><a name="[414]"></a>DCMI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_ImageCaptureInit
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_CaptureNextImage
</UL>

<P><STRONG><a name="[417]"></a>DCMI_Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_capture
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_webserver
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_ImageCaptureInit
</UL>

<P><STRONG><a name="[320]"></a>DCMI_GetFlagStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_dcmi.o(i.DCMI_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCMI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_Task
</UL>

<P><STRONG><a name="[457]"></a>DCMI_ITConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>

<P><STRONG><a name="[455]"></a>DCMI_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>

<P><STRONG><a name="[456]"></a>DCMI_JPEGCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_JPEGCmd))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>

<P><STRONG><a name="[65]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32_audio_out_if.o(i.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; DMA_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32xxx_it.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; Camera_IRQHandler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IRQHandler
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32xxx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; SD_ProcessDMAIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2d8]"></a>DMA_ClearFlag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataBuffer
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IRQHandler
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_IRQHandler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Stop
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_PauseResume
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Play
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
</UL>

<P><STRONG><a name="[3b4]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IRQHandler
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_ImageCaptureInit
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_CaptureNextImage
</UL>

<P><STRONG><a name="[2ce]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataBuffer
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_capture
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_Task
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_webserver
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_ImageCaptureInit
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_CaptureNextImage
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Stop
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_PauseResume
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Play
</UL>

<P><STRONG><a name="[2cf]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_DMA_Config
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Init
</UL>

<P><STRONG><a name="[47e]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_FlowControllerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[2d7]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Stop
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_PauseResume
</UL>

<P><STRONG><a name="[318]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataBuffer
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IRQHandler
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
</UL>

<P><STRONG><a name="[3b3]"></a>DMA_GetITStatus</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IRQHandler
</UL>

<P><STRONG><a name="[2d1]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Init
</UL>

<P><STRONG><a name="[2d0]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_DMA_Config
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_PauseResume
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Play
</UL>

<P><STRONG><a name="[53]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32xxx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>Dec_ReadDataCallback</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, app_audio.o(i.Dec_ReadDataCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = Dec_ReadDataCallback &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_audio.o(i.AudioPlayer_Open)
</UL>
<P><STRONG><a name="[2bc]"></a>Decoders_SelectDecoder</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32_audio_decoders.o(i.Decoders_SelectDecoder))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Open
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Close
</UL>

<P><STRONG><a name="[29c]"></a>DestroyPage</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, graphicobject.o(i.DestroyPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DestroyPage &rArr; DestroyPageControl &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_player
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_background
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SwitchPage
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_SwitchPage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct_camera
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SwitchPage
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_SwitchPage
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_SwitchPage
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_SwitchPage
</UL>

<P><STRONG><a name="[295]"></a>DestroyPageControl</STRONG> (Thumb, 1522 bytes, Stack size 24 bytes, graphicobject.o(i.DestroyPageControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DestroyPageControl &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPage
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowUtilitiesGroup
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMultimediaGroup
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowConnectivityGroup
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateIcon
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_MGR_RefreshScroll
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_exit_player
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawAudioPlayerBackgound
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioManager_Task
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateFileListDisplay
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_RefreshIcons
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCameraBackgound
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_MGR_KillScroll
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_OldList
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_CtxMenu
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_SubFolder
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Directory
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Selected_Item
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawConsoleBackground
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDistantControl
</UL>

<P><STRONG><a name="[325]"></a>DisplayImageLabel</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, mod_image.o(i.DisplayImageLabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DisplayImageLabel &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileOnly
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_previous_file
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_next_file
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageDirectBackgound
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_StartBrowser
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCameraBackgound
</UL>

<P><STRONG><a name="[381]"></a>ETHERNET_DHCPFailState</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, mod_ethernet.o(i.ETHERNET_DHCPFailState))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ETHERNET_DHCPFailState &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_task
</UL>

<P><STRONG><a name="[383]"></a>ETHERNET_UpdateCameraInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mod_ethernet.o(i.ETHERNET_UpdateCameraInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ETHERNET_UpdateCameraInit &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_ImageCaptureInit
</UL>

<P><STRONG><a name="[384]"></a>ETHERNET_UpdateConnState</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, mod_ethernet.o(i.ETHERNET_UpdateConnState))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ETHERNET_UpdateConnState &rArr; UpdateConnectionStatus &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConnectionStatus
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthLink_ITHandler
</UL>

<P><STRONG><a name="[386]"></a>ETHERNET_UpdateDHCPState</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, mod_ethernet.o(i.ETHERNET_UpdateDHCPState))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ETHERNET_UpdateDHCPState &rArr; ETHERNET_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEthernet
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_task
</UL>

<P><STRONG><a name="[388]"></a>ETHERNET_UpdateIcon</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mod_ethernet.o(i.ETHERNET_UpdateIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ETHERNET_UpdateIcon &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPageControl
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewIcon
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthLink_ITHandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEthernet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_task
</UL>

<P><STRONG><a name="[389]"></a>ETHERNET_UpdateInitDisplay</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, mod_ethernet.o(i.ETHERNET_UpdateInitDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ETHERNET_UpdateInitDisplay &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDToggle
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[38b]"></a>ETH_BSP_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, eth_bsp.o(i.ETH_BSP_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ETH_BSP_Config &rArr; ETH_MACDMA_Config &rArr; ETH_Init &rArr; ETHERNET_UpdateInitDisplay &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthLink_PHYITConfig
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthLink_EXTIConfig
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_NVIC_Config
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEthernet
</UL>

<P><STRONG><a name="[397]"></a>ETH_DMAClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_DMAClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[3a0]"></a>ETH_DMAITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_DMAITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[3a6]"></a>ETH_DMAReceptionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_DMAReceptionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[688]"></a>ETH_DMARxDescChainInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4x7_eth.o(i.ETH_DMARxDescChainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_MAC_init
</UL>

<P><STRONG><a name="[689]"></a>ETH_DMARxDescReceiveITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_DMARxDescReceiveITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_MAC_init
</UL>

<P><STRONG><a name="[3a5]"></a>ETH_DMATransmissionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_DMATransmissionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[687]"></a>ETH_DMATxDescChainInit</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4x7_eth.o(i.ETH_DMATxDescChainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_DMATxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_MAC_init
</UL>

<P><STRONG><a name="[68a]"></a>ETH_DMATxDescChecksumInsertionConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_DMATxDescChecksumInsertionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_MAC_init
</UL>

<P><STRONG><a name="[391]"></a>ETH_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4x7_eth.o(i.ETH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[3a3]"></a>ETH_FlushTransmitFIFO</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_FlushTransmitFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[396]"></a>ETH_GetDMAFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_GetDMAFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[39e]"></a>ETH_GetSoftwareResetStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_GetSoftwareResetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[68b]"></a>ETH_Get_Received_Frame_interrupt</STRONG> (Thumb, 268 bytes, Stack size 20 bytes, stm32f4x7_eth.o(i.ETH_Get_Received_Frame_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_Get_Received_Frame_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[93]"></a>ETH_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, eth_bsp.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ETH_IRQHandler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetDMAFlagStatus
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAClearITPendingBit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[398]"></a>ETH_Init</STRONG> (Thumb, 618 bytes, Stack size 48 bytes, stm32f4x7_eth.o(i.ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ETH_Init &rArr; ETHERNET_UpdateInitDisplay &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateInitDisplay
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[686]"></a>ETH_MACAddressConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4x7_eth.o(i.ETH_MACAddressConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_MACAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_MAC_init
</UL>

<P><STRONG><a name="[3a4]"></a>ETH_MACReceptionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_MACReceptionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[3a2]"></a>ETH_MACTransmissionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_MACTransmissionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[68c]"></a>ETH_Prepare_Transmit_Descriptors</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f4x7_eth.o(i.ETH_Prepare_Transmit_Descriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[39c]"></a>ETH_ReadPHYRegister</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, stm32f4x7_eth.o(i.ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthLink_PHYITConfig
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthLink_ITHandler
</UL>

<P><STRONG><a name="[39d]"></a>ETH_SoftwareReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_SoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[3a1]"></a>ETH_Start</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32f4x7_eth.o(i.ETH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ETH_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionCmd
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAReceptionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[37d]"></a>ETH_Stop</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f4x7_eth.o(i.ETH_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ETH_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionCmd
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAReceptionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_webserver
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_Cleanup
</UL>

<P><STRONG><a name="[39f]"></a>ETH_StructInit</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[39a]"></a>ETH_WritePHYRegister</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4x7_eth.o(i.ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_WritePHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthLink_PHYITConfig
</UL>

<P><STRONG><a name="[3a7]"></a>EVAL_AUDIO_Init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm324xg_audio_codec.o(i.EVAL_AUDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = EVAL_AUDIO_Init &rArr; Codec_Init &rArr; Codec_VolumeCtrl &rArr; Codec_WriteRegister &rArr; Codec_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[3a8]"></a>EVAL_AUDIO_Mute</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm324xg_audio_codec.o(i.EVAL_AUDIO_Mute))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = EVAL_AUDIO_Mute &rArr; Codec_Mute &rArr; Codec_WriteRegister &rArr; Codec_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Mute
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteCtl
</UL>

<P><STRONG><a name="[2b9]"></a>EVAL_AUDIO_PauseResume</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm324xg_audio_codec.o(i.EVAL_AUDIO_PauseResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = EVAL_AUDIO_PauseResume &rArr; Codec_PauseResume &rArr; Codec_Mute &rArr; Codec_WriteRegister &rArr; Codec_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_PauseResume
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_PauseResume
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioCmd
</UL>

<P><STRONG><a name="[2ba]"></a>EVAL_AUDIO_Stop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm324xg_audio_codec.o(i.EVAL_AUDIO_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = EVAL_AUDIO_Stop &rArr; Codec_Stop &rArr; IOE_WriteIOPin &rArr; I2C_WriteDeviceRegister &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Stop
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioCmd
</UL>

<P><STRONG><a name="[3a9]"></a>EVAL_AUDIO_VolumeCtl</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm324xg_audio_codec.o(i.EVAL_AUDIO_VolumeCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = EVAL_AUDIO_VolumeCtl &rArr; Codec_VolumeCtrl &rArr; Codec_WriteRegister &rArr; Codec_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_VolumeCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolumeCtl
</UL>

<P><STRONG><a name="[7e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eth_bsp.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = EXTI15_10_IRQHandler &rArr; EthLink_ITHandler &rArr; ETHERNET_UpdateConnState &rArr; UpdateConnectionStatus &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthLink_ITHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3ac]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[3aa]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[3b1]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthLink_EXTIConfig
</UL>

<P><STRONG><a name="[390]"></a>EthLink_EXTIConfig</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, eth_bsp.o(i.EthLink_EXTIConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EthLink_EXTIConfig &rArr; EthLink_EXTIITCmd &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthLink_EXTIITCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[3b2]"></a>EthLink_EXTIITCmd</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, eth_bsp.o(i.EthLink_EXTIITCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EthLink_EXTIITCmd &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthLink_EXTIConfig
</UL>

<P><STRONG><a name="[3ab]"></a>EthLink_ITHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, eth_bsp.o(i.EthLink_ITHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = EthLink_ITHandler &rArr; ETHERNET_UpdateConnState &rArr; UpdateConnectionStatus &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateIcon
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateConnState
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[38f]"></a>EthLink_PHYITConfig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, eth_bsp.o(i.EthLink_PHYITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EthLink_PHYITConfig &rArr; ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[36b]"></a>Ethernet_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, app_ethernet.o(i.Ethernet_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ethernet_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[370]"></a>FILE_MGR_KillScroll</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mod_filemgr.o(i.FILE_MGR_KillScroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FILE_MGR_KillScroll &rArr; DestroyPageControl &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Selected_Item
</UL>

<P><STRONG><a name="[322]"></a>FILE_MGR_RefreshScroll</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mod_filemgr.o(i.FILE_MGR_RefreshScroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FILE_MGR_RefreshScroll &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateScrollPosition
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_AddScroll
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_player
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_background
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_CustomDraw
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Selected_Item
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Previous
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Next
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Selected_Item
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cancel_ctx_menu
</UL>

<P><STRONG><a name="[292]"></a>FILMGR_DirectEx</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mod_filemgr.o(i.FILMGR_DirectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = FILMGR_DirectEx &rArr; FILEMGR_CreatePage &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_CreatePage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_OpenFile
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sel_folder
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sel_folder
</UL>

<P><STRONG><a name="[42c]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
</UL>

<P><STRONG><a name="[42b]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
</UL>

<P><STRONG><a name="[309]"></a>GL_AddScroll</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, gl_ext.o(i.GL_AddScroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewIcon
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_DrawRect
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateScrollPosition
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_RefreshControlNow
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_MGR_RefreshScroll
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_CreatePage
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_SubFolder
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Directory
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawConsoleBackground
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Refresh
</UL>

<P><STRONG><a name="[3c8]"></a>GL_BackLightSwitch</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcdhal.o(i.GL_BackLightSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GL_BackLightSwitch &rArr; LCD_DisplayOn
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LowPower
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Background_Handler
</UL>

<P><STRONG><a name="[2fa]"></a>GL_Background_Handler</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, graphicobject.o(i.GL_Background_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = GL_Background_Handler &rArr; CallPreEvents &rArr; GL_DrawButtonBMP &rArr; GL_SetDisplayWindow &rArr; LCD_SetDisplayWindow &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Delay
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_BackLightSwitch
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareJoyCoordinates
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareCoordinates
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjSize
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallPreEvents
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_Task
</UL>

<P><STRONG><a name="[3cf]"></a>GL_CenterCaption</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gl_ext.o(i.GL_CenterCaption))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GL_CenterCaption
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_State_Message
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetPageHeader
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetMenuItem
</UL>

<P><STRONG><a name="[3d0]"></a>GL_Clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcdhal.o(i.GL_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GL_Clear &rArr; LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Startup
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_previous_file
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_next_file
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleImageSize
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_upgrade
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
</UL>

<P><STRONG><a name="[30e]"></a>GL_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, graphicobject.o(i.GL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL_Delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_State_Message
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Startup
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Background_Handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_upgrade
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallPreEvents
</UL>

<P><STRONG><a name="[328]"></a>GL_DisplayAdjStringLine</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lcdhal.o(i.GL_DisplayAdjStringLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_State_Message
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Startup
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateGroupSelectionLabel
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBackgroundZone
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_previous_file
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_next_file
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageDirectBackgound
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_StartBrowser
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleImageSize
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCameraBackgound
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_upgrade
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwitchVisible
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlidebarVisible
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioButtonVisible
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLabelVisible
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistogramVisible
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComboBoxVisible
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCheckboxVisible
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetButtonVisible
</UL>

<P><STRONG><a name="[3d3]"></a>GL_DrawBMP</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lcdhal.o(i.GL_DrawBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GL_DrawBMP
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BmpBuffer32BitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawButtonBMP
</UL>

<P><STRONG><a name="[30d]"></a>GL_DrawButtonBMP</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, graphicobject.o(i.GL_DrawButtonBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GL_DrawButtonBMP &rArr; GL_SetDisplayWindow &rArr; LCD_SetDisplayWindow &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDisplayWindow
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBMP
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Startup
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_upgrade
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwitchVisible
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlidebarVisible
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioButtonVisible
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIconVisible
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComboBoxVisible
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCheckboxVisible
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetButtonVisible
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallPreEvents
</UL>

<P><STRONG><a name="[3d7]"></a>GL_DrawLine</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lcdhal.o(i.GL_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL_DrawLine &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_DrawRect
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistogramVisible
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawRectangle
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawFilledRectangle
</UL>

<P><STRONG><a name="[3b5]"></a>GL_GetLastEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, graphicobject.o(i.GL_GetLastEvent))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Directory
</UL>

<P><STRONG><a name="[2fc]"></a>GL_HandleSystemSettingsChange</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gl_mgr.o(i.GL_HandleSystemSettingsChange))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_Task
</UL>

<P><STRONG><a name="[2f9]"></a>GL_Handle_Inputs</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gl_mgr.o(i.GL_Handle_Inputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = GL_Handle_Inputs &rArr; GL_TSC_GetCoordinate &rArr; IOE_TS_GetState &rArr; IOE_TS_Read_Y &rArr; I2C_ReadDataBuffer &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_fClickHandler
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_TSC_GetCoordinate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_Task
</UL>

<P><STRONG><a name="[2f8]"></a>GL_Init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gl_mgr.o(i.GL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = GL_Init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Clear
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_Task
</UL>

<P><STRONG><a name="[3ad]"></a>GL_IsChecked</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, gl_ext.o(i.GL_IsChecked))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GL_IsChecked
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_settings
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDistantControl
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableBackgroundMode
</UL>

<P><STRONG><a name="[2eb]"></a>GL_JOY_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, joyhal.o(i.GL_JOY_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[3d2]"></a>GL_LCD_DisplayChar</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lcdhal.o(i.GL_LCD_DisplayChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_DrawCharTransparent
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
</UL>

<P><STRONG><a name="[3de]"></a>GL_LCD_DrawChar</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, lcdhal.o(i.GL_LCD_DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_DisplayChar
</UL>

<P><STRONG><a name="[3dd]"></a>GL_LCD_DrawCharTransparent</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lcdhal.o(i.GL_LCD_DrawCharTransparent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GL_LCD_DrawCharTransparent &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_DisplayChar
</UL>

<P><STRONG><a name="[2a1]"></a>GL_LCD_DrawRect</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcdhal.o(i.GL_LCD_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GL_LCD_DrawRect &rArr; GL_DrawLine &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_AddScroll
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_player
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawAudioPlayerBackgound
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateFileListDisplay
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_CtxMenu
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawConsoleBackground
</UL>

<P><STRONG><a name="[2a2]"></a>GL_LCD_FillRect</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lcdhal.o(i.GL_LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowUtilitiesGroup
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMultimediaGroup
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowConnectivityGroup
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBackgroundZone
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateScrollPosition
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_AddScroll
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_player
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawAudioPlayerBackgound
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateFileListDisplay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCameraBackgound
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearImageBackgound
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCameraBackgound
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_FileList
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_SubFolder
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Directory
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_CtxMenu
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawConsoleBackground
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearTextZone
</UL>

<P><STRONG><a name="[2e9]"></a>GL_LCD_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lcdhal.o(i.GL_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GL_LCD_Init &rArr; STM324xG_LCD_Init &rArr; LCD_FSMCConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM324xG_LCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[3e0]"></a>GL_LCD_ReadRAM</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lcdhal.o(i.GL_LCD_ReadRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GL_LCD_ReadRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixel
</UL>

<P><STRONG><a name="[2fb]"></a>GL_LowPower</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, graphicobject.o(i.GL_LowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GL_LowPower &rArr; GL_BackLightSwitch &rArr; LCD_DisplayOn
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_BackLightSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_Task
</UL>

<P><STRONG><a name="[3c7]"></a>GL_RefreshControlNow</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gl_ext.o(i.GL_RefreshControlNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GL_RefreshControlNow
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_AddScroll
</UL>

<P><STRONG><a name="[26f]"></a>GL_SetBackColor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcdhal.o(i.GL_SetBackColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GL_SetBackColor &rArr; LCD_SetBackColor
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_CreatePage
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_CreatePage
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_CreatePage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Refresh
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwitchVisible
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComboBoxVisible
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetButtonVisible
</UL>

<P><STRONG><a name="[27f]"></a>GL_SetChecked</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gl_ext.o(i.GL_SetChecked))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GL_SetChecked
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_CreatePage
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_RefreshSetting
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDistantControl
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableBackgroundMode
</UL>

<P><STRONG><a name="[3d5]"></a>GL_SetDisplayWindow</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lcdhal.o(i.GL_SetDisplayWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GL_SetDisplayWindow &rArr; LCD_SetDisplayWindow &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawButtonBMP
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawColorBMP
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
</UL>

<P><STRONG><a name="[376]"></a>GL_SetFont</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lcdhal.o(i.GL_SetFont))
<BR><BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateGroupSelectionLabel
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBackgroundZone
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_upgrade
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwitchVisible
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlidebarVisible
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioButtonVisible
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLabelVisible
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistogramVisible
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComboBoxVisible
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCheckboxVisible
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetButtonVisible
</UL>

<P><STRONG><a name="[275]"></a>GL_SetMenuItem</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, gl_ext.o(i.GL_SetMenuItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = GL_SetMenuItem &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewButton
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CenterCaption
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_CreatePage
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_CreatePage
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
</UL>

<P><STRONG><a name="[276]"></a>GL_SetPageHeader</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, gl_ext.o(i.GL_SetPageHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewButton
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CenterCaption
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_CreatePage
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_CreatePage
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_CreatePage
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_CreatePage
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
</UL>

<P><STRONG><a name="[270]"></a>GL_SetTextColor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcdhal.o(i.GL_SetTextColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GL_SetTextColor &rArr; LCD_SetTextColor
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateGroupSelectionLabel
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBackgroundZone
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_CreatePage
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_previous_file
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_next_file
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageDirectBackgound
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_StartBrowser
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleImageSize
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCameraBackgound
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_CreatePage
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_CreatePage
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_upgrade
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwitchVisible
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlidebarVisible
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioButtonVisible
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLabelVisible
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistogramVisible
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComboBoxVisible
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCheckboxVisible
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetButtonVisible
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawFilledRectangle
</UL>

<P><STRONG><a name="[29e]"></a>GL_ShowMainMenu</STRONG> (Thumb, 454 bytes, Stack size 88 bytes, gl_mgr.o(i.GL_ShowMainMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Clear
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_PageObj
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowUtilitiesGroup
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMultimediaGroup
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowConnectivityGroup
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewLabel
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewIcon
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SwitchPage
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_SwitchPage
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SwitchPage
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_SwitchPage
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_SwitchPage
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_SwitchPage
</UL>

<P><STRONG><a name="[2f6]"></a>GL_Startup</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, gl_mgr.o(i.GL_Startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GL_Startup &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawButtonBMP
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Delay
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_Task
</UL>

<P><STRONG><a name="[3e5]"></a>GL_State_Message</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, gl_mgr.o(i.GL_State_Message))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GL_State_Message &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Delay
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CenterCaption
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_LibInit
</UL>

<P><STRONG><a name="[3db]"></a>GL_TSC_GetCoordinate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tschal.o(i.GL_TSC_GetCoordinate))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = GL_TSC_GetCoordinate &rArr; IOE_TS_GetState &rArr; IOE_TS_Read_Y &rArr; I2C_ReadDataBuffer &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Handle_Inputs
</UL>

<P><STRONG><a name="[2ea]"></a>GL_TSC_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tschal.o(i.GL_TSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = GL_TSC_Init &rArr; IOE_Config &rArr; IOE_IOPinConfig &rArr; I2C_WriteDeviceRegister &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[2fd]"></a>GL_UpdateBackgroundProcessStatus</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, gl_mgr.o(i.GL_UpdateBackgroundProcessStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GL_UpdateBackgroundProcessStatus &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_Task
</UL>

<P><STRONG><a name="[30b]"></a>GL_UpdateScrollPosition</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, gl_ext.o(i.GL_UpdateScrollPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_AddScroll
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_MGR_RefreshScroll
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollUp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollDown
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_UpdateCursor
</UL>

<P><STRONG><a name="[33d]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_GPIO_Config
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDInit
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthLink_EXTIConfig
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_HW_Init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KUART_Init
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_HW_Init
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_GPIO_Init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_GPIO_Init
</UL>

<P><STRONG><a name="[33e]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_GPIO_Config
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_HW_Init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KUART_Init
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_HW_Init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_GPIO_Init
</UL>

<P><STRONG><a name="[472]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
</UL>

<P><STRONG><a name="[515]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
</UL>

<P><STRONG><a name="[516]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
</UL>

<P><STRONG><a name="[496]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_GPIO_Init
</UL>

<P><STRONG><a name="[6d1]"></a>GetComboOptionActive</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, graphicobject.o(i.GetComboOptionActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetComboOptionActive
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
</UL>

<P><STRONG><a name="[2a5]"></a>GetFileOnly</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, file_utils.o(i.GetFileOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetFileOnly
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateFileListDisplay
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Open
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayImageLabel
</UL>

<P><STRONG><a name="[f1]"></a>GetObjStatus</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, graphicobject.o(i.GetObjStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetObjStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicobject.o(i.Create_PageObj)
</UL>
<P><STRONG><a name="[36e]"></a>GetParentDir</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, file_utils.o(i.GetParentDir))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Selected_Item
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Directory
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Selected_Item
</UL>

<P><STRONG><a name="[6d0]"></a>GetRadioOptionChecked</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, graphicobject.o(i.GetRadioOptionChecked))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetRadioOptionChecked
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_effects
</UL>

<P><STRONG><a name="[286]"></a>Get_SlidebarValue</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, graphicobject.o(i.Get_SlidebarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_SlidebarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_VolumeCtrl
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_RefreshIcons
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_ProgressCtrl
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_LoudnessCtrl
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_EqualizerCtrlBand4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_EqualizerCtrlBand3
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_EqualizerCtrlBand2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_EqualizerCtrlBand1
</UL>

<P><STRONG><a name="[4eb]"></a>HCD_GetCurrentFrame</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetCurrentFrame))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[511]"></a>HCD_GetCurrentSpeed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_hcd.o(i.HCD_GetCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCD_GetCurrentSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[4ea]"></a>HCD_GetURB_State</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetURB_State))
<BR><BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[4f7]"></a>HCD_GetXferCnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetXferCnt))
<BR><BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
</UL>

<P><STRONG><a name="[3e9]"></a>HCD_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usb_hcd.o(i.HCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[43f]"></a>HCD_IsDeviceConnected</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_IsDeviceConnected))
<BR><BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_HandleModulesBackground
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write10
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read10
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_TestUnitReady
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RequestSense
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity10
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ModeSense6
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Init
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
</UL>

<P><STRONG><a name="[3ef]"></a>HCD_ResetPort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_hcd.o(i.HCD_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HCD_ResetPort &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[3f1]"></a>HCD_SubmitRequest</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_hcd.o(i.HCD_SubmitRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
</UL>

<P><STRONG><a name="[4e]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32xxx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45e]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_AcknowledgeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_ReadReg
</UL>

<P><STRONG><a name="[34c]"></a>I2C_CheckEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataBuffer
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_WriteReg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_ReadReg
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WriteRegister
</UL>

<P><STRONG><a name="[33a]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TimeoutUserCallback
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_TIMEOUT_UserCallback
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_HW_Init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_CtrlInterface_Init
</UL>

<P><STRONG><a name="[3f9]"></a>I2C_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataBuffer
</UL>

<P><STRONG><a name="[3f7]"></a>I2C_DMALastTransferCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_DMALastTransferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataBuffer
</UL>

<P><STRONG><a name="[339]"></a>I2C_DeInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(i.I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TimeoutUserCallback
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_TIMEOUT_UserCallback
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_HW_Init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_CtrlInterface_Init
</UL>

<P><STRONG><a name="[34b]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataBuffer
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_WriteReg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_ReadReg
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WriteRegister
</UL>

<P><STRONG><a name="[348]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TimeoutUserCallback
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataBuffer
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_TIMEOUT_UserCallback
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_TimeoutUserCallback
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_WriteReg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_ReadReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_TimeoutUserCallback
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WriteRegister
</UL>

<P><STRONG><a name="[34a]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f4xx_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataBuffer
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WriteRegister
</UL>

<P><STRONG><a name="[33b]"></a>I2C_Init</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, stm32f4xx_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TimeoutUserCallback
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_I2C_Config
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_TIMEOUT_UserCallback
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_HW_Init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_CtrlInterface_Init
</UL>

<P><STRONG><a name="[3f5]"></a>I2C_ReadDataBuffer</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, stm324xg_eval_ioe.o(i.I2C_ReadDataBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = I2C_ReadDataBuffer &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMALastTransferCmd
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMACmd
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TimeoutUserCallback
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_DMA_Config
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_Read_Z
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_Read_Y
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_Read_X
</UL>

<P><STRONG><a name="[3fa]"></a>I2C_ReadDeviceRegister</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, stm324xg_eval_ioe.o(i.I2C_ReadDeviceRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = I2C_ReadDeviceRegister &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMALastTransferCmd
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMACmd
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TimeoutUserCallback
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_DMA_Config
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_GetState
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_Config
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_ReadID
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IOPinConfig
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IOAFConfig
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_FnctCmd
</UL>

<P><STRONG><a name="[45f]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_ReadReg
</UL>

<P><STRONG><a name="[34d]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataBuffer
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_WriteReg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_ReadReg
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WriteRegister
</UL>

<P><STRONG><a name="[34e]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataBuffer
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_WriteReg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_ReadReg
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WriteRegister
</UL>

<P><STRONG><a name="[349]"></a>I2C_SoftwareResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_SoftwareResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TimeoutUserCallback
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_TIMEOUT_UserCallback
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_TimeoutUserCallback
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_TimeoutUserCallback
</UL>

<P><STRONG><a name="[3fb]"></a>I2C_WriteDeviceRegister</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, stm324xg_eval_ioe.o(i.I2C_WriteDeviceRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = I2C_WriteDeviceRegister &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMACmd
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TimeoutUserCallback
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_DMA_Config
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_WriteIOPin
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_GetState
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_Config
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Reset
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IOPinConfig
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IOAFConfig
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_FnctCmd
</UL>

<P><STRONG><a name="[2d9]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.I2S_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_AudioInterface_Init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_PauseResume
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_AudioInterface_DeInit
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Play
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionCtrl
</UL>

<P><STRONG><a name="[337]"></a>I2S_InitExt</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, stm324xg_audio_codec.o(i.I2S_InitExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2S_InitExt
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_AudioInterface_Init
</UL>

<P><STRONG><a name="[3ff]"></a>IMAGE_CameraView</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, mod_image.o(i.IMAGE_CameraView))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212<LI>Call Chain = IMAGE_CameraView &rArr; IMAGE_CreatePage &rArr; IMAGE_BuildList &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_RegisterClickHandler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_BuildCameraList
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_view
</UL>

<P><STRONG><a name="[404]"></a>IMAGE_DirectEx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mod_image.o(i.IMAGE_DirectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1204<LI>Call Chain = IMAGE_DirectEx &rArr; IMAGE_CreatePage &rArr; IMAGE_BuildList &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Selected_Item
</UL>

<P><STRONG><a name="[3e7]"></a>IOE_Config</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm324xg_eval_ioe.o(i.IOE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = IOE_Config &rArr; IOE_IOPinConfig &rArr; I2C_WriteDeviceRegister &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_Config
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Reset
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IsOperational
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IOPinConfig
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IOAFConfig
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_FnctCmd
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_I2C_Config
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_TSC_Init
</UL>

<P><STRONG><a name="[40a]"></a>IOE_FnctCmd</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, stm324xg_eval_ioe.o(i.IOE_FnctCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = IOE_FnctCmd &rArr; I2C_WriteDeviceRegister &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[40c]"></a>IOE_IOAFConfig</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, stm324xg_eval_ioe.o(i.IOE_IOAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = IOE_IOAFConfig &rArr; I2C_WriteDeviceRegister &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[40b]"></a>IOE_IOPinConfig</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, stm324xg_eval_ioe.o(i.IOE_IOPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = IOE_IOPinConfig &rArr; I2C_WriteDeviceRegister &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[408]"></a>IOE_IsOperational</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm324xg_eval_ioe.o(i.IOE_IsOperational))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = IOE_IsOperational &rArr; IOE_ReadID &rArr; I2C_ReadDeviceRegister &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TimeoutUserCallback
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[40e]"></a>IOE_ReadID</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm324xg_eval_ioe.o(i.IOE_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = IOE_ReadID &rArr; I2C_ReadDeviceRegister &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IsOperational
</UL>

<P><STRONG><a name="[409]"></a>IOE_Reset</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm324xg_eval_ioe.o(i.IOE_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = IOE_Reset &rArr; I2C_WriteDeviceRegister &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[40d]"></a>IOE_TS_Config</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, stm324xg_eval_ioe.o(i.IOE_TS_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = IOE_TS_Config &rArr; I2C_WriteDeviceRegister &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[3e6]"></a>IOE_TS_GetState</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm324xg_eval_ioe.o(i.IOE_TS_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IOE_TS_GetState &rArr; IOE_TS_Read_Y &rArr; I2C_ReadDataBuffer &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_Read_Z
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_Read_Y
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_Read_X
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_TSC_GetCoordinate
</UL>

<P><STRONG><a name="[3f8]"></a>IOE_TimeoutUserCallback</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm324xg_eval_ioe.o(i.IOE_TimeoutUserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftwareResetCmd
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_GPIO_Config
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IsOperational
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataBuffer
</UL>

<P><STRONG><a name="[346]"></a>IOE_WriteIOPin</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm324xg_eval_ioe.o(i.IOE_WriteIOPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = IOE_WriteIOPin &rArr; I2C_WriteDeviceRegister &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Stop
</UL>

<P><STRONG><a name="[415]"></a>IPCAM_ImageCaptureInit</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, app_ethernet.o(i.IPCAM_ImageCaptureInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IPCAM_ImageCaptureInit &rArr; eth_Camera_Config &rArr; OV2640_QVGAConfig &rArr; OV2640_Reset &rArr; OV2640_WriteReg &rArr; OV2640_TimeoutUserCallback &rArr; OV2640_HW_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Cmd
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ClearITPendingBit
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_ReadID
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_HW_Init
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_Camera_Config
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateCameraInit
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEthernet
</UL>

<P><STRONG><a name="[327]"></a>Image_Decode</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, app_image.o(i.Image_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 996<LI>Call Chain = Image_Decode &rArr; BMP_Decode &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_filename_ext
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Decode
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_previous_file
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_next_file
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageDirectBackgound
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_StartBrowser
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleImageSize
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCameraBackgound
</UL>

<P><STRONG><a name="[3f3]"></a>Image_Enlarge</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_image.o(i.Image_Enlarge))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleImageSize
</UL>

<P><STRONG><a name="[614]"></a>Image_IsSmall</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_image.o(i.Image_IsSmall))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_previous_file
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_next_file
</UL>

<P><STRONG><a name="[326]"></a>Image_SetDefaultSize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_image.o(i.Image_SetDefaultSize))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageDirectBackgound
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Startup
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleImageSize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawImageBackgound
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCameraBackgound
</UL>

<P><STRONG><a name="[41a]"></a>JPEG_Decode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, image_jpeg.o(i.JPEG_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = JPEG_Decode &rArr; jpeg_decompress &rArr; jpeg_start_decompress &rArr; jinit_master_decompress &rArr; master_selection &rArr; jinit_1pass_quantizer &rArr; create_colormap &rArr; select_ncolors
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_malloc
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_free
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_decompress
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_Decode
</UL>

<P><STRONG><a name="[420]"></a>KUART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, kuart.o(i.KUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = KUART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Image_To_File
</UL>

<P><STRONG><a name="[425]"></a>KUART_Output</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, kuart.o(i.KUART_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KUART_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Image_To_File
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvhistogramEqualizeImage
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvObjectDetection
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_detection_process
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_object_detection
</UL>

<P><STRONG><a name="[426]"></a>LCD_Change_Direction</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lcdhal.o(i.LCD_Change_Direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Change_Direction
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawColorBMP
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlidebarVisible
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLabelVisible
</UL>

<P><STRONG><a name="[3d1]"></a>LCD_Clear</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm324xg_eval_lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Clear
</UL>

<P><STRONG><a name="[427]"></a>LCD_CtrlLinesConfig</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, stm324xg_eval_lcd.o(i.LCD_CtrlLinesConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_CtrlLinesConfig &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM324xG_LCD_Init
</UL>

<P><STRONG><a name="[3c9]"></a>LCD_DisplayOff</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm324xg_eval_lcd.o(i.LCD_DisplayOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_DisplayOff
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_BackLightSwitch
</UL>

<P><STRONG><a name="[3ca]"></a>LCD_DisplayOn</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm324xg_eval_lcd.o(i.LCD_DisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_DisplayOn
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_BackLightSwitch
</UL>

<P><STRONG><a name="[428]"></a>LCD_DrawColorBMP</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, lcdhal.o(i.LCD_DrawColorBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LCD_DrawColorBMP &rArr; GL_SetDisplayWindow &rArr; LCD_SetDisplayWindow &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BmpBuffer32BitRead
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Change_Direction
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDisplayWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlidebarVisible
</UL>

<P><STRONG><a name="[375]"></a>LCD_DrawLine</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm324xg_eval_lcd.o(i.LCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBackgroundZone
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>

<P><STRONG><a name="[429]"></a>LCD_FSMCConfig</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, stm324xg_eval_lcd.o(i.LCD_FSMCConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_FSMCConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM324xG_LCD_Init
</UL>

<P><STRONG><a name="[42d]"></a>LCD_GetPixel</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lcdhal.o(i.LCD_GetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_GetPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_ReadRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlidebarCursorPreDraw
</UL>

<P><STRONG><a name="[42e]"></a>LCD_PrintChar</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lcdhal.o(i.LCD_PrintChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_PrintChar &rArr; LCD_WriteChar &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintStringLine
</UL>

<P><STRONG><a name="[430]"></a>LCD_PrintStringLine</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, lcdhal.o(i.LCD_PrintStringLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_PrintStringLine &rArr; LCD_PrintChar &rArr; LCD_WriteChar &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintChar
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlidebarVisible
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLabelVisible
</UL>

<P><STRONG><a name="[3d9]"></a>LCD_PutPixel</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lcdhal.o(i.LCD_PutPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_DrawCharTransparent
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_DrawChar
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlidebarCursorPreDraw
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawObliqueLine
</UL>

<P><STRONG><a name="[3e1]"></a>LCD_ReadRAM</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm324xg_eval_lcd.o(i.LCD_ReadRAM))
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_ReadRAM
</UL>

<P><STRONG><a name="[48e]"></a>LCD_ReadReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm324xg_eval_lcd.o(i.LCD_ReadReg))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM324xG_LCD_Init
</UL>

<P><STRONG><a name="[278]"></a>LCD_SetBackColor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm324xg_eval_lcd.o(i.LCD_SetBackColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetBackColor
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetBackColor
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateFileListDisplay
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
</UL>

<P><STRONG><a name="[2df]"></a>LCD_SetCursor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm324xg_eval_lcd.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Frame
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scale
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Decode
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawColorBMP
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixel
</UL>

<P><STRONG><a name="[2dd]"></a>LCD_SetDisplayWindow</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm324xg_eval_lcd.o(i.LCD_SetDisplayWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_SetDisplayWindow &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Frame
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scale
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Decode
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDisplayWindow
</UL>

<P><STRONG><a name="[48f]"></a>LCD_SetFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm324xg_eval_lcd.o(i.LCD_SetFont))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM324xG_LCD_Init
</UL>

<P><STRONG><a name="[277]"></a>LCD_SetTextColor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm324xg_eval_lcd.o(i.LCD_SetTextColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetTextColor
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowUtilitiesGroup
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMultimediaGroup
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowConnectivityGroup
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBackgroundZone
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateScrollPosition
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_AddScroll
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_player
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawAudioPlayerBackgound
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateFileListDisplay
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCameraBackgound
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearImageBackgound
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCameraBackgound
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_FileList
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_SubFolder
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Directory
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_CtxMenu
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawConsoleBackground
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearTextZone
</UL>

<P><STRONG><a name="[2e2]"></a>LCD_WindowModeDisable</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm324xg_eval_lcd.o(i.LCD_WindowModeDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_WindowModeDisable &rArr; LCD_SetDisplayWindow &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Frame
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_menu
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct_camera
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Media_changed
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Decode
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Decode
</UL>

<P><STRONG><a name="[42f]"></a>LCD_WriteChar</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, lcdhal.o(i.LCD_WriteChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_WriteChar &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintChar
</UL>

<P><STRONG><a name="[374]"></a>LCD_WriteRAM</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm324xg_eval_lcd.o(i.LCD_WriteRAM))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Frame
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Line
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Line
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawColorBMP
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBMP
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
</UL>

<P><STRONG><a name="[2e0]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm324xg_eval_lcd.o(i.LCD_WriteRAM_Prepare))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Frame
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scale
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Decode
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawColorBMP
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBMP
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
</UL>

<P><STRONG><a name="[2de]"></a>LCD_WriteReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm324xg_eval_lcd.o(i.LCD_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM324xG_LCD_Init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Frame
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scale
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Decode
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawColorBMP
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Change_Direction
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBMP
</UL>

<P><STRONG><a name="[12a]"></a>LwIP_DHCP_task</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, app_ethernet.o(i.LwIP_DHCP_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = LwIP_DHCP_task &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateIcon
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateDHCPState
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_DHCPFailState
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_ethernet.o(i.InitEthernet)
</UL>
<P><STRONG><a name="[41d]"></a>LwIP_Init</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, app_ethernet.o(i.LwIP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = LwIP_Init &rArr; tcpip_init &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_MAC_init
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateDHCPState
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEthernet
</UL>

<P><STRONG><a name="[43a]"></a>MESSAGES_CloseEx</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, messages.o(i.MESSAGES_CloseEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MESSAGES_CloseEx &rArr; return_from_direct &rArr; RefreshPage &rArr; ShowPage &rArr; GL_Clear &rArr; LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_HandleModulesClanup
</UL>

<P><STRONG><a name="[2f5]"></a>MOD_AddModule</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, mod_core.o(i.MOD_AddModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MOD_AddModule &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_Task
</UL>

<P><STRONG><a name="[27c]"></a>MOD_GetParam</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mod_core.o(i.MOD_GetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MOD_GetParam &rArr; RTC_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_LibInit
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_DirectEx
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_player
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Repeat
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Open
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_capture
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_start_capture
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Capture_Brightness_Inc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Capture_Brightness_Dec
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_CreatePage
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCameraBackgound
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEthernet
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_CreatePage
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
</UL>

<P><STRONG><a name="[2fe]"></a>MOD_HandleModulesBackground</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, mod_core.o(i.MOD_HandleModulesBackground))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MOD_HandleModulesBackground &rArr; USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_HandleModulesClanup
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDStorage_StateChanged
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_Task
</UL>

<P><STRONG><a name="[442]"></a>MOD_HandleModulesClanup</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mod_core.o(i.MOD_HandleModulesClanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MOD_HandleModulesClanup &rArr; MESSAGES_CloseEx &rArr; return_from_direct &rArr; RefreshPage &rArr; ShowPage &rArr; GL_Clear &rArr; LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESSAGES_CloseEx
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_HandleModulesBackground
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceDisconnected
</UL>

<P><STRONG><a name="[2f7]"></a>MOD_LibInit</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, mod_core.o(i.MOD_LibInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = MOD_LibInit &rArr; f_mount &rArr; ff_cre_syncobj &rArr; xQueueCreateMutex &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_State_Message
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_Task
</UL>

<P><STRONG><a name="[ab]"></a>MOD_NullFunc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mod_core.o(i.MOD_NullFunc))
<BR>[Address Reference Count : 9]<UL><LI> gl_mgr.o(i.GL_ShowMainMenu)
<LI> mod_camera.o(i.CAMERA_CreatePage)
<LI> mod_ethernet.o(i.ETHERNET_CreatePage)
<LI> mod_image.o(i.IMAGE_CreatePage)
<LI> mod_system.o(i.SYSTEM_INFO_CreatePage)
<LI> gl_ext.o(i.GL_SetPageHeader)
<LI> mod_audio.o(i.AUDIO_CreatePage)
<LI> mod_ethernet.o(i.ETHERNET_UpdateIcon)
<LI> mod_filemgr.o(i.FILEMGR_CreatePage)
</UL>
<P><STRONG><a name="[2f4]"></a>MOD_PreInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mod_core.o(i.MOD_PreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MOD_PreInit &rArr; BSP_Init &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_init
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_Task
</UL>

<P><STRONG><a name="[400]"></a>MOD_RegisterClickHandler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mod_core.o(i.MOD_RegisterClickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MOD_RegisterClickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CameraView
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageDirectBackgound
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
</UL>

<P><STRONG><a name="[288]"></a>MOD_SetParam</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mod_core.o(i.MOD_SetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MOD_SetParam &rArr; RTC_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_VolumeCtrl
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Repeat
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_LoudnessCtrl
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_EqualizerCtrlBand4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_EqualizerCtrlBand3
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_EqualizerCtrlBand2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_EqualizerCtrlBand1
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_capture
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_effects
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_distant_control
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_serve
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_settings
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
</UL>

<P><STRONG><a name="[329]"></a>MOD_UnRegisterClickHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mod_core.o(i.MOD_UnRegisterClickHandler))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct_camera
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_browser
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageDirectBackgound
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Media_changed
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCameraBackgound
</UL>

<P><STRONG><a name="[3dc]"></a>MOD_fClickHandler</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, mod_core.o(i.MOD_fClickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MOD_fClickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Handle_Inputs
</UL>

<P><STRONG><a name="[4f]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32xxx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32xxx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2d3]"></a>NVIC_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_LibInit
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthLink_EXTIITCmd
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_NVIC_Config
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_NVIC_Init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Init
</UL>

<P><STRONG><a name="[692]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27d]"></a>NewButton</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, graphicobject.o(i.NewButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NewButton &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetStringFieldValue
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Button
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetPageHeader
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetMenuItem
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_player
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_CreatePage
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_CreatePage
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_CreatePage
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_CtxMenu
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_CreatePage
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
</UL>

<P><STRONG><a name="[27e]"></a>NewCheckbox</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, graphicobject.o(i.NewCheckbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NewCheckbox &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetStringFieldValue
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Checkbox
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_CreatePage
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDistantControl
</UL>

<P><STRONG><a name="[2ab]"></a>NewComboBoxGrp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, graphicobject.o(i.NewComboBoxGrp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NewComboBoxGrp &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_ComboBoxGrp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_CreatePage
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_CreatePage
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
</UL>

<P><STRONG><a name="[273]"></a>NewIcon</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, graphicobject.o(i.NewIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NewIcon &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Icon
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_AddScroll
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSmallIconControlObj
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddIconControlObj
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateIcon
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_RefreshIcons
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_CreatePage
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_CreatePage
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_CreatePage
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
</UL>

<P><STRONG><a name="[27b]"></a>NewLabel</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, graphicobject.o(i.NewLabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NewLabel &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetStringFieldValue
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Label
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSmallIconControlObj
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddIconControlObj
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_CreatePage
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_CreatePage
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_CreatePage
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_CreatePage
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
</UL>

<P><STRONG><a name="[403]"></a>NewRadioButtonGrp</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, graphicobject.o(i.NewRadioButtonGrp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NewRadioButtonGrp &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_RadioButtonGrp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
</UL>

<P><STRONG><a name="[279]"></a>NewSlidebar</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, graphicobject.o(i.NewSlidebar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NewSlidebar &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetStringFieldValue
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Slidebar
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
</UL>

<P><STRONG><a name="[f3]"></a>NullFunc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, graphicobject.o(i.NullFunc))
<BR>[Address Reference Count : 1]<UL><LI> graphicobject.o(i.Create_PageObj)
</UL>
<P><STRONG><a name="[99]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32xxx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32xxx_it.o(i.OTG_HS_EP1_IN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OTG_HS_EP1_IN_IRQHandler &rArr; USBD_OTG_EP1IN_ISR_Handler &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_EP1IN_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32xxx_it.o(i.OTG_HS_EP1_OUT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OTG_HS_EP1_OUT_IRQHandler &rArr; USBD_OTG_EP1OUT_ISR_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_EP1OUT_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32xxx_it.o(i.OTG_HS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OTG_HS_IRQHandler &rArr; USBD_OTG_ISR_Handler &rArr; DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2b5]"></a>OV2640_BandWConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dcmi_ov2640.o(i.OV2640_BandWConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = OV2640_BandWConfig &rArr; OV2640_WriteReg &rArr; OV2640_TimeoutUserCallback &rArr; OV2640_HW_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apply_camera_native_effects
</UL>

<P><STRONG><a name="[31c]"></a>OV2640_BrightnessConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dcmi_ov2640.o(i.OV2640_BrightnessConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = OV2640_BrightnessConfig &rArr; OV2640_WriteReg &rArr; OV2640_TimeoutUserCallback &rArr; OV2640_HW_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_SetBrighnessValue
</UL>

<P><STRONG><a name="[2b4]"></a>OV2640_ColorEffectsConfig</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dcmi_ov2640.o(i.OV2640_ColorEffectsConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = OV2640_ColorEffectsConfig &rArr; OV2640_WriteReg &rArr; OV2640_TimeoutUserCallback &rArr; OV2640_HW_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apply_camera_native_effects
</UL>

<P><STRONG><a name="[454]"></a>OV2640_HW_Init</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, dcmi_ov2640.o(i.OV2640_HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OV2640_HW_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_TimeoutUserCallback
</UL>

<P><STRONG><a name="[314]"></a>OV2640_Init</STRONG> (Thumb, 460 bytes, Stack size 88 bytes, dcmi_ov2640.o(i.OV2640_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OV2640_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_JPEGCmd
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Init
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ITConfig
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_Config
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_Camera_Config
</UL>

<P><STRONG><a name="[315]"></a>OV2640_QQVGAConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmi_ov2640.o(i.OV2640_QQVGAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = OV2640_QQVGAConfig &rArr; OV2640_Reset &rArr; OV2640_WriteReg &rArr; OV2640_TimeoutUserCallback &rArr; OV2640_HW_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_Config
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_Camera_Config
</UL>

<P><STRONG><a name="[316]"></a>OV2640_QVGAConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dcmi_ov2640.o(i.OV2640_QVGAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = OV2640_QVGAConfig &rArr; OV2640_Reset &rArr; OV2640_WriteReg &rArr; OV2640_TimeoutUserCallback &rArr; OV2640_HW_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_Config
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_Camera_Config
</UL>

<P><STRONG><a name="[458]"></a>OV2640_Reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dcmi_ov2640.o(i.OV2640_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = OV2640_Reset &rArr; OV2640_WriteReg &rArr; OV2640_TimeoutUserCallback &rArr; OV2640_HW_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QVGAConfig
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QQVGAConfig
</UL>

<P><STRONG><a name="[453]"></a>OV2640_WriteReg</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, dcmi_ov2640.o(i.OV2640_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = OV2640_WriteReg &rArr; OV2640_TimeoutUserCallback &rArr; OV2640_HW_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_TimeoutUserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QVGAConfig
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QQVGAConfig
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_BrightnessConfig
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ColorEffectsConfig
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_BandWConfig
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Reset
</UL>

<P><STRONG><a name="[31b]"></a>OV9655_BrightnessConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmi_ov9655.o(i.OV9655_BrightnessConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OV9655_BrightnessConfig &rArr; OV9655_WriteReg &rArr; OV9655_TimeoutUserCallback &rArr; OV9655_HW_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_SetBrighnessValue
</UL>

<P><STRONG><a name="[30f]"></a>OV9655_HW_Init</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, dcmi_ov9655.o(i.OV9655_HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OV9655_HW_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_Config
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_ImageCaptureInit
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_TimeoutUserCallback
</UL>

<P><STRONG><a name="[311]"></a>OV9655_Init</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, dcmi_ov9655.o(i.OV9655_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OV9655_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_Config
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_Camera_Config
</UL>

<P><STRONG><a name="[312]"></a>OV9655_QQVGAConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dcmi_ov9655.o(i.OV9655_QQVGAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OV9655_QQVGAConfig &rArr; OV9655_Reset &rArr; OV9655_WriteReg &rArr; OV9655_TimeoutUserCallback &rArr; OV9655_HW_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_WriteReg
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_Config
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_Camera_Config
</UL>

<P><STRONG><a name="[313]"></a>OV9655_QVGAConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dcmi_ov9655.o(i.OV9655_QVGAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OV9655_QVGAConfig &rArr; OV9655_Reset &rArr; OV9655_WriteReg &rArr; OV9655_TimeoutUserCallback &rArr; OV9655_HW_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_WriteReg
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_Config
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_Camera_Config
</UL>

<P><STRONG><a name="[310]"></a>OV9655_ReadID</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dcmi_ov9655.o(i.OV9655_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OV9655_ReadID &rArr; OV9655_ReadReg &rArr; OV9655_TimeoutUserCallback &rArr; OV9655_HW_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_Config
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_ImageCaptureInit
</UL>

<P><STRONG><a name="[45c]"></a>OV9655_ReadReg</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, dcmi_ov9655.o(i.OV9655_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OV9655_ReadReg &rArr; OV9655_TimeoutUserCallback &rArr; OV9655_HW_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_TimeoutUserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_ReadID
</UL>

<P><STRONG><a name="[45b]"></a>OV9655_Reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dcmi_ov9655.o(i.OV9655_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OV9655_Reset &rArr; OV9655_WriteReg &rArr; OV9655_TimeoutUserCallback &rArr; OV9655_HW_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QVGAConfig
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QQVGAConfig
</UL>

<P><STRONG><a name="[45a]"></a>OV9655_WriteReg</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, dcmi_ov9655.o(i.OV9655_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OV9655_WriteReg &rArr; OV9655_TimeoutUserCallback &rArr; OV9655_HW_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_TimeoutUserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QVGAConfig
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QQVGAConfig
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_BrightnessConfig
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Reset
</UL>

<P><STRONG><a name="[465]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[460]"></a>Quicksort32UwIdx</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, objdetectorc.o(i.Quicksort32UwIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = Quicksort32UwIdx &rArr;  Quicksort32UwIdx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuicksortPartition32UwIdx
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quicksort32UwIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuicksortwIdx
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quicksort32UwIdx
</UL>

<P><STRONG><a name="[461]"></a>QuicksortPartition32UwIdx</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, objdetectorc.o(i.QuicksortPartition32UwIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QuicksortPartition32UwIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quicksort32UwIdx
</UL>

<P><STRONG><a name="[462]"></a>QuicksortwIdx</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, objdetectorc.o(i.QuicksortwIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = QuicksortwIdx &rArr; Quicksort32UwIdx &rArr;  Quicksort32UwIdx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quicksort32UwIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvPickFace
</UL>

<P><STRONG><a name="[2cd]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_GPIO_Config
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_DMA_Config
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDInit
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthLink_EXTIConfig
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_HW_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KUART_Init
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_HW_Init
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_GPIO_Init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_GPIO_Init
</UL>

<P><STRONG><a name="[392]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
</UL>

<P><STRONG><a name="[2ee]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>

<P><STRONG><a name="[42a]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB3PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
</UL>

<P><STRONG><a name="[336]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_GPIO_Config
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KUART_Init
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_HW_Init
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_TIM_Init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_AudioInterface_Init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_CtrlInterface_Init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_AudioInterface_DeInit
</UL>

<P><STRONG><a name="[3f4]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_GPIO_Config
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[393]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_GPIO_Config
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthLink_EXTIConfig
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_ADC_Init
</UL>

<P><STRONG><a name="[268]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[399]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_TIM_Init
</UL>

<P><STRONG><a name="[467]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[466]"></a>RCC_LSEConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[394]"></a>RCC_MCO1Config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_MCO1Config))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[469]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[468]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[4a2]"></a>RGB16toRGB24</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, app_camera.o(i.RGB16toRGB24))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RGB16toRGB24
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Jpg_To_File
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Bmp_To_File
</UL>

<P><STRONG><a name="[2ef]"></a>RNG_Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_rng.o(i.RNG_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[7f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_rtc.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; RTC_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[464]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[444]"></a>RTC_Configuration</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, app_rtc.o(i.RTC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RTC_Configuration &rArr; GL_State_Message &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_State_Message
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_LibInit
</UL>

<P><STRONG><a name="[3e3]"></a>RTC_GetDate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Task
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Jpg_To_File
</UL>

<P><STRONG><a name="[463]"></a>RTC_GetITStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(i.RTC_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[3e2]"></a>RTC_GetTime</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Task
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Jpg_To_File
</UL>

<P><STRONG><a name="[43e]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
</UL>

<P><STRONG><a name="[46a]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[448]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
</UL>

<P><STRONG><a name="[29b]"></a>RefreshLabel</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gl_ext.o(i.RefreshLabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Label
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPageControl
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateInitDisplay
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateBackgroundProcessStatus
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Task
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateConnState
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateTimeInformation
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateFileListDisplay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Stop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_start_capture
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_folder
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_Background
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_folder
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wUpdateConnectionStatus
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConnectionStatus
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEthernet
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateDHCPState
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateCameraInit
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_DHCPFailState
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Refresh
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayImageLabel
</UL>

<P><STRONG><a name="[282]"></a>RefreshPage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, graphicobject.o(i.RefreshPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RefreshPage &rArr; ShowPage &rArr; GL_Clear &rArr; LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPage
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILMGR_DirectEx
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_DirectEx
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_player
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_background
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_exit_player
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioManager_Task
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SwitchPage
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CameraView
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_SwitchPage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct_camera
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SwitchPage
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleImageSize
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Selected_Item
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_SwitchPage
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cancel_ctx_menu
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_SwitchPage
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_SwitchPage
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_DirectEx
</UL>

<P><STRONG><a name="[296]"></a>RefreshPageControl</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, graphicobject.o(i.RefreshPageControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RefreshPageControl
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowUtilitiesGroup
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMultimediaGroup
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowConnectivityGroup
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLabelColor
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateIcon
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_player
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateTimeInformation
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Stop
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_RefreshIcons
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_RefreshSetting
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_FileList
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_CtxMenu
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDistantControl
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableBackgroundMode
</UL>

<P><STRONG><a name="[32d]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[483]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[481]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[486]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[3c0]"></a>SDIO_DataConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[46e]"></a>SDIO_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[32f]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[32c]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[482]"></a>SDIO_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[47c]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[330]"></a>SDIO_GetResponse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[87]"></a>SDIO_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32xxx_it.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[484]"></a>SDIO_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[474]"></a>SDIO_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[3c1]"></a>SDIO_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[3bf]"></a>SDIO_SendCommand</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[480]"></a>SDIO_SetPowerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[471]"></a>SD_Detect</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_Detect
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[473]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[47a]"></a>SD_GetCardInfo</STRONG> (Thumb, 784 bytes, Stack size 20 bytes, stm324xg_eval_sdio_sd.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[475]"></a>SD_GetState</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>

<P><STRONG><a name="[470]"></a>SD_GetStatus</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_GetStatus &rArr; SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDStorage_StateChanged
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_msd_drive
</UL>

<P><STRONG><a name="[445]"></a>SD_Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_LibInit
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDStorage_StateChanged
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_msd_drive
</UL>

<P><STRONG><a name="[479]"></a>SD_InitializeCards</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[47d]"></a>SD_LowLevel_DMA_RxConfig</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, stm324xg_eval.o(i.SD_LowLevel_DMA_RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[47f]"></a>SD_LowLevel_DMA_TxConfig</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, stm324xg_eval.o(i.SD_LowLevel_DMA_TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_LowLevel_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[477]"></a>SD_LowLevel_Init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm324xg_eval.o(i.SD_LowLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SD_LowLevel_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[478]"></a>SD_PowerON</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, stm324xg_eval_sdio_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_PowerON &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[36c]"></a>SD_ProcessDMAIRQ</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_ProcessDMAIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_ProcessDMAIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[46f]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[485]"></a>SD_ReadBlock</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm324xg_eval_sdio_sd.o(i.SD_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_ReadBlock &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[487]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, stm324xg_eval_sdio_sd.o(i.SD_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[47b]"></a>SD_SelectDeselect</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[476]"></a>SD_SendStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[488]"></a>SD_StopTransfer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_StopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
</UL>

<P><STRONG><a name="[489]"></a>SD_WaitReadOperation</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_WaitReadOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_WaitReadOperation &rArr; SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[48a]"></a>SD_WaitWriteOperation</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_WaitWriteOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_WaitWriteOperation &rArr; SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[48b]"></a>SD_WriteBlock</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm324xg_eval_sdio_sd.o(i.SD_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_WriteBlock &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[48c]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, stm324xg_eval_sdio_sd.o(i.SD_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[2d2]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_AudioInterface_Init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Init
</UL>

<P><STRONG><a name="[335]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_AudioInterface_Init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_AudioInterface_DeInit
</UL>

<P><STRONG><a name="[2ec]"></a>SRAM_Init</STRONG> (Thumb, 608 bytes, Stack size 104 bytes, stm324xg_eval_fsmc_sram.o(i.SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SRAM_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[3df]"></a>STM324xG_LCD_Init</STRONG> (Thumb, 1056 bytes, Stack size 8 bytes, stm324xg_eval_lcd.o(i.STM324xG_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = STM324xG_LCD_Init &rArr; LCD_FSMCConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_Init
</UL>

<P><STRONG><a name="[4b4]"></a>STM32_AudioRec_DataProcessSingle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_audio.o(i.STM32_AudioRec_DataProcessSingle))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[41b]"></a>STM32_AudioRec_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm324xg_audio_recorder.o(i.STM32_AudioRec_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = STM32_AudioRec_Init &rArr; STM32_AudioRec_ADC_Init &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_TIM_Init
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_NVIC_Init
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_GPIO_Init
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[2b6]"></a>STM32_AudioRec_Start</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm324xg_audio_recorder.o(i.STM32_AudioRec_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = STM32_AudioRec_Start &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioCmd
</UL>

<P><STRONG><a name="[2b7]"></a>STM32_AudioRec_Stop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm324xg_audio_recorder.o(i.STM32_AudioRec_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32_AudioRec_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioCmd
</UL>

<P><STRONG><a name="[4b5]"></a>STM32_AudioRec_Update</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32_audio_in_if.o(i.STM32_AudioRec_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STM32_AudioRec_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[2e7]"></a>STM_EVAL_LEDInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm324xg_eval.o(i.STM_EVAL_LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = STM_EVAL_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[38a]"></a>STM_EVAL_LEDToggle</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm324xg_eval.o(i.STM_EVAL_LEDToggle))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateInitDisplay
</UL>

<P><STRONG><a name="[2ed]"></a>SYSCFG_CompensationCellCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(i.SYSCFG_CompensationCellCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[395]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(i.SYSCFG_ETH_MediaInterfaceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[3b0]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_GPIO_Config
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthLink_EXTIConfig
</UL>

<P><STRONG><a name="[4ad]"></a>SYSTEM_JumpToBootloader</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mod_system.o(i.SYSTEM_JumpToBootloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSTEM_JumpToBootloader
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4a0]"></a>SYSTEM_RefreshSetting</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, mod_system.o(i.SYSTEM_RefreshSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYSTEM_RefreshSetting &rArr; RefreshPageControl
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPageControl
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetChecked
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_serve
</UL>

<P><STRONG><a name="[4a7]"></a>Save_Image_To_File</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, app_camera.o(i.Save_Image_To_File))
<BR><BR>[Stack]<UL><LI>Max Depth = 14020<LI>Call Chain = Save_Image_To_File &rArr; Save_Bmp_To_File &rArr; fd_detect_face &rArr; object_detection_process &rArr; icvObjectDetection &rArr; icvPickFace &rArr; QuicksortwIdx &rArr; Quicksort32UwIdx &rArr;  Quicksort32UwIdx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KUART_Output
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KUART_Init
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Jpg_To_File
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Bmp_To_File
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_start_capture
</UL>

<P><STRONG><a name="[46c]"></a>Set_Label</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, graphicobject.o(i.Set_Label))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetStringFieldValue
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_exit_player
</UL>

<P><STRONG><a name="[2a6]"></a>Set_LabelColor</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, graphicobject.o(i.Set_LabelColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Set_LabelColor
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateFileListDisplay
</UL>

<P><STRONG><a name="[27a]"></a>Set_SlidebarValue</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, graphicobject.o(i.Set_SlidebarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Set_SlidebarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateTimeInformation
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Stop
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
</UL>

<P><STRONG><a name="[ef]"></a>ShowPage</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, graphicobject.o(i.ShowPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ShowPage &rArr; GL_Clear &rArr; LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicobject.o(i.Create_PageObj)
</UL>
<P><STRONG><a name="[55]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32xxx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_JumpToBootloader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>TIM2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32xxx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM2_IRQHandler &rArr; USB_OTG_BSP_TimerIRQ &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>TIM3_IRQHandler</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, stm324xg_audio_recorder.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM3_IRQHandler &rArr; STM32_AudioRec_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_DataProcessSingle
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2f3]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[2f2]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[2e5]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_Stop
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_Start
</UL>

<P><STRONG><a name="[49c]"></a>TIM_DeInit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stm32f4xx_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_TIM_Init
</UL>

<P><STRONG><a name="[518]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
</UL>

<P><STRONG><a name="[2f0]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_TIM_Init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_Stop
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_Start
</UL>

<P><STRONG><a name="[49e]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectOutputTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_TIM_Init
</UL>

<P><STRONG><a name="[49d]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetAutoreload))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_TIM_Init
</UL>

<P><STRONG><a name="[2f1]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[422]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KUART_Init
</UL>

<P><STRONG><a name="[424]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KUART_Output
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KUART_Init
</UL>

<P><STRONG><a name="[421]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KUART_Init
</UL>

<P><STRONG><a name="[423]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KUART_Output
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KUART_Init
</UL>

<P><STRONG><a name="[4d0]"></a>USBD_ClrCfg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ClrCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[4b9]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[4ba]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[4b8]"></a>USBD_CtlError</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlError &rArr; DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[4bb]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[4bc]"></a>USBD_CtlSendData</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[4b7]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[4c1]"></a>USBD_GetString</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetLen
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_SerialStrDescriptor
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ProductStrDescriptor
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ManufacturerStrDescriptor
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_InterfaceStrDescriptor
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[450]"></a>USBD_OTG_EP1IN_ISR_Handler</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, usb_dcd_int.o(i.USBD_OTG_EP1IN_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_OTG_EP1IN_ISR_Handler &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_EP1_IN_IRQHandler
</UL>

<P><STRONG><a name="[451]"></a>USBD_OTG_EP1OUT_ISR_Handler</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, usb_dcd_int.o(i.USBD_OTG_EP1OUT_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_OTG_EP1OUT_ISR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_EP1_OUT_IRQHandler
</UL>

<P><STRONG><a name="[452]"></a>USBD_OTG_ISR_Handler</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, usb_dcd_int.o(i.USBD_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_OTG_ISR_Handler &rArr; DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_SessionRequest_ISR
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_OTG_ISR
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoOUTIncomplete_ISR
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoINIncomplete_ISR
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUSBSuspend_ISR
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleSof_ISR
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleResume_ISR
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_IRQHandler
</UL>

<P><STRONG><a name="[4d2]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, usbd_req.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[4cf]"></a>USBD_SetCfg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[4d3]"></a>USBD_StdDevReq</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[4d5]"></a>USBD_StdEPReq</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[4d4]"></a>USBD_StdItfReq</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[25]"></a>USBD_USR_ConfigStrDescriptor</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>USBD_USR_DeviceDescriptor</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>USBD_USR_InterfaceStrDescriptor</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>USBD_USR_LangIDStrDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>USBD_USR_ManufacturerStrDescriptor</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>USBD_USR_ProductStrDescriptor</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>USBD_USR_SerialStrDescriptor</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_SerialStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[4d6]"></a>USBH_Alloc_Channel</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_hcs.o(i.USBH_Alloc_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_Alloc_Channel
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetFreeChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[4d8]"></a>USBH_BulkReceiveData</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_BulkReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[4d9]"></a>USBH_BulkSendData</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_BulkSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[4da]"></a>USBH_ClrFeature</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usbh_stdreq.o(i.USBH_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
</UL>

<P><STRONG><a name="[3a]"></a>USBH_Connected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_Connected))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[4dc]"></a>USBH_CtlReceiveData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_CtlReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_CtlReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[4db]"></a>USBH_CtlReq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_CtlReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SubmitSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GETMaxLUN
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOTReset
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>

<P><STRONG><a name="[4de]"></a>USBH_CtlSendData</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[4df]"></a>USBH_CtlSendSetup</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_CtlSendSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBH_CtlSendSetup &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[513]"></a>USBH_DeAllocate_AllChannel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_DeAllocate_AllChannel))
<BR><BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[4e0]"></a>USBH_DeInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[3b]"></a>USBH_Disconnected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_Disconnected))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[512]"></a>USBH_ErrorHandle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_ErrorHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_ErrorHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[4e1]"></a>USBH_Free_Channel</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_Free_Channel))
<BR><BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
</UL>

<P><STRONG><a name="[4e2]"></a>USBH_GetDescriptor</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, usbh_stdreq.o(i.USBH_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[50e]"></a>USBH_GetNextDesc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_GetNextDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[4e3]"></a>USBH_Get_CfgDesc</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, usbh_stdreq.o(i.USBH_Get_CfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_Get_CfgDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[4e5]"></a>USBH_Get_DevDesc</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, usbh_stdreq.o(i.USBH_Get_DevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_Get_DevDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[4e7]"></a>USBH_Get_StringDesc</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, usbh_stdreq.o(i.USBH_Get_StringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[4e9]"></a>USBH_HandleControl</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_HandleControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_HandleControl &rArr; USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[443]"></a>USBH_Init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBH_Init &rArr; HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_LibInit
</UL>

<P><STRONG><a name="[4f5]"></a>USBH_MSC_BOT_Abort</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_MSC_BOT_Abort &rArr; USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[4f6]"></a>USBH_MSC_DecodeCSW</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usbh_msc_bot.o(i.USBH_MSC_DecodeCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_MSC_DecodeCSW
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetXferCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[4fb]"></a>USBH_MSC_ErrorHandle</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, usbh_msc_core.o(i.USBH_MSC_ErrorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[4ff]"></a>USBH_MSC_HandleBOTXfer</STRONG> (Thumb, 812 bytes, Stack size 32 bytes, usbh_msc_bot.o(i.USBH_MSC_HandleBOTXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[4f9]"></a>USBH_MSC_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbh_msc_bot.o(i.USBH_MSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[4fd]"></a>USBH_MSC_ModeSense6</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_ModeSense6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_ModeSense6
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[502]"></a>USBH_MSC_Read10</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, usbh_msc_scsi.o(i.USBH_MSC_Read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_MSC_Read10
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[4fc]"></a>USBH_MSC_ReadCapacity10</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_ReadCapacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_ReadCapacity10
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[4fe]"></a>USBH_MSC_RequestSense</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_RequestSense
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[4fa]"></a>USBH_MSC_TestUnitReady</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_TestUnitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[503]"></a>USBH_MSC_Write10</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, usbh_msc_scsi.o(i.USBH_MSC_Write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_Write10
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[4ed]"></a>USBH_Modify_Channel</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbh_hcs.o(i.USBH_Modify_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_Modify_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[44f]"></a>USBH_OTG_ISR_Handler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USBH_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_sof_ISR
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_Disconnect_ISR
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[501]"></a>USBH_Open_Channel</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usbh_hcs.o(i.USBH_Open_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[440]"></a>USBH_Process</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeAllocate_AllChannel
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ErrorHandle
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_HandleModulesBackground
</UL>

<P><STRONG><a name="[39]"></a>USBH_SOF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_SOF))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[4ee]"></a>USBH_SetAddress</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_stdreq.o(i.USBH_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_SetAddress &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[4f0]"></a>USBH_SetCfg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_stdreq.o(i.USBH_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_SetCfg &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[c]"></a>USBH_USR_Configuration_DescAvailable</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, usbh_usr.o(i.USBH_USR_Configuration_DescAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBH_USR_Configuration_DescAvailable &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBH_USR_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBH_USR_DeviceAddressAssigned</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_DeviceAddressAssigned))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>USBH_USR_DeviceAttached</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_DeviceAttached))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBH_USR_DeviceAttached &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBH_USR_DeviceDisconnected</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_DeviceDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = USBH_USR_DeviceDisconnected &rArr; f_mount &rArr; ff_cre_syncobj &rArr; xQueueCreateMutex &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_HandleModulesClanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBH_USR_DeviceNotSupported</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_DeviceNotSupported))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBH_USR_DeviceNotSupported &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>USBH_USR_DeviceSpeedDetected</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_DeviceSpeedDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBH_USR_DeviceSpeedDetected &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>USBH_USR_Device_DescAvailable</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, usbh_usr.o(i.USBH_USR_Device_DescAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBH_USR_Device_DescAvailable &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBH_USR_EnumerationDone</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_EnumerationDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBH_USR_EnumerationDone &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBH_USR_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBH_USR_Init &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBH_USR_MSC_Application</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, usbh_usr.o(i.USBH_USR_MSC_Application))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = USBH_USR_MSC_Application &rArr; f_mount &rArr; ff_cre_syncobj &rArr; xQueueCreateMutex &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBH_USR_Manufacturer_String</STRONG> (Thumb, 26 bytes, Stack size 48 bytes, usbh_usr.o(i.USBH_USR_Manufacturer_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_USR_Manufacturer_String &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBH_USR_OverCurrentDetected</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_OverCurrentDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBH_USR_OverCurrentDetected &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBH_USR_Product_String</STRONG> (Thumb, 26 bytes, Stack size 48 bytes, usbh_usr.o(i.USBH_USR_Product_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_USR_Product_String &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBH_USR_ResetDevice</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_ResetDevice))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBH_USR_SerialNum_String</STRONG> (Thumb, 26 bytes, Stack size 48 bytes, usbh_usr.o(i.USBH_USR_SerialNum_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_USR_SerialNum_String &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBH_USR_UnrecoveredError</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_UnrecoveredError))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBH_USR_UnrecoveredError &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBH_USR_UserInput</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_UserInput))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[4f2]"></a>USB_OTG_BSP_ConfigVBUS</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_ConfigVBUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_BSP_ConfigVBUS &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[514]"></a>USB_OTG_BSP_DriveVBUS</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_DriveVBUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_BSP_DriveVBUS
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>

<P><STRONG><a name="[4f3]"></a>USB_OTG_BSP_EnableInterrupt</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_BSP_EnableInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[4f1]"></a>USB_OTG_BSP_Init</STRONG> (Thumb, 472 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_BSP_Init &rArr; USB_OTG_BSP_TimeInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[4b0]"></a>USB_OTG_BSP_TimerIRQ</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_TimerIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_BSP_TimerIRQ &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[4ef]"></a>USB_OTG_BSP_mDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[519]"></a>USB_OTG_BSP_uDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_uDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
</UL>

<P><STRONG><a name="[3eb]"></a>USB_OTG_CoreInit</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_OTG_CoreInit &rArr; USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[3ed]"></a>USB_OTG_CoreInitHost</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_CoreInitHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_OTG_CoreInitHost &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[3c4]"></a>USB_OTG_DisableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_DisableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free_USB_OTG_FS_Resources
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[3c6]"></a>USB_OTG_DriveVbus</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_DriveVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_DriveVbus &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free_USB_OTG_FS_Resources
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[35c]"></a>USB_OTG_EP0Activate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EP0Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[356]"></a>USB_OTG_EP0StartXfer</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>

<P><STRONG><a name="[361]"></a>USB_OTG_EP0_OutStart</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[354]"></a>USB_OTG_EPActivate</STRONG> (Thumb, 176 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EPActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[352]"></a>USB_OTG_EPClearStall</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[359]"></a>USB_OTG_EPSetStall</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>

<P><STRONG><a name="[357]"></a>USB_OTG_EPStartXfer</STRONG> (Thumb, 506 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>

<P><STRONG><a name="[3ee]"></a>USB_OTG_EnableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EnableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[51d]"></a>USB_OTG_EnableHostInt</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EnableHostInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_EnableHostInt &rArr; USB_OTG_EnableCommonInt
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[51c]"></a>USB_OTG_FlushRxFifo</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopHost
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[369]"></a>USB_OTG_FlushTxFifo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopHost
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[35d]"></a>USB_OTG_GetDeviceSpeed</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_GetDeviceSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_GetDeviceSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[521]"></a>USB_OTG_GetMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>

<P><STRONG><a name="[525]"></a>USB_OTG_HC_DoPing</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_HC_DoPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
</UL>

<P><STRONG><a name="[500]"></a>USB_OTG_HC_Halt</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
</UL>

<P><STRONG><a name="[504]"></a>USB_OTG_HC_Init</STRONG> (Thumb, 568 bytes, Stack size 28 bytes, usb_core.o(i.USB_OTG_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
</UL>

<P><STRONG><a name="[3f2]"></a>USB_OTG_HC_StartXfer</STRONG> (Thumb, 502 bytes, Stack size 60 bytes, usb_core.o(i.USB_OTG_HC_StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsEvenFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[51b]"></a>USB_OTG_InitFSLSPClkSel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_InitFSLSPClkSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[4c3]"></a>USB_OTG_IsDeviceMode</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, usb_core.o(i.USB_OTG_IsDeviceMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsDeviceMode
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[520]"></a>USB_OTG_IsEvenFrame</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_IsEvenFrame))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>

<P><STRONG><a name="[505]"></a>USB_OTG_IsHostMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usb_core.o(i.USB_OTG_IsHostMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsHostMode
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[4c4]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadCoreItr))
<BR><BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[35f]"></a>USB_OTG_ReadDevAllInEPItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllInEPItr))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[364]"></a>USB_OTG_ReadDevAllOutEp_itr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllOutEp_itr))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[365]"></a>USB_OTG_ReadDevOutEP_itr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevOutEP_itr))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[51e]"></a>USB_OTG_ReadHPRT0</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_ReadHPRT0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
</UL>

<P><STRONG><a name="[522]"></a>USB_OTG_ReadHostAllChannels_intr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadHostAllChannels_intr))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[367]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
</UL>

<P><STRONG><a name="[3f0]"></a>USB_OTG_ResetPort</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[3ea]"></a>USB_OTG_SelectCore</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_SelectCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[3ec]"></a>USB_OTG_SetCurrentMode</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_SetCurrentMode &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[3c5]"></a>USB_OTG_StopHost</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_StopHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USB_OTG_StopHost &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free_USB_OTG_FS_Resources
</UL>

<P><STRONG><a name="[36a]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
</UL>

<P><STRONG><a name="[51]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32xxx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>WavProcess_DecodeData</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wavprocess.o(i.WavProcess_DecodeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WavProcess_DecodeData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_decoders.o(i.Decoders_SelectDecoder)
</UL>
<P><STRONG><a name="[f5]"></a>WavProcess_DecoderInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wavprocess.o(i.WavProcess_DecoderInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = WavProcess_DecoderInit &rArr; WavProcess_ParseHeader &rArr; ReadUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavProcess_ParseHeader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_decoders.o(i.Decoders_SelectDecoder)
</UL>
<P><STRONG><a name="[fc]"></a>WavProcess_GetElapsedTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wavprocess.o(i.WavProcess_GetElapsedTime))
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_decoders.o(i.Decoders_SelectDecoder)
</UL>
<P><STRONG><a name="[fa]"></a>WavProcess_GetSamplingRate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wavprocess.o(i.WavProcess_GetSamplingRate))
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_decoders.o(i.Decoders_SelectDecoder)
</UL>
<P><STRONG><a name="[fb]"></a>WavProcess_GetStreamLenght</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wavprocess.o(i.WavProcess_GetStreamLenght))
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_decoders.o(i.Decoders_SelectDecoder)
</UL>
<P><STRONG><a name="[f6]"></a>WavProcess_StopMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wavprocess.o(i.WavProcess_StopMode))
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_decoders.o(i.Decoders_SelectDecoder)
</UL>
<P><STRONG><a name="[f8]"></a>WavProcess_StreamBackward</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wavprocess.o(i.WavProcess_StreamBackward))
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_decoders.o(i.Decoders_SelectDecoder)
</UL>
<P><STRONG><a name="[f7]"></a>WavProcess_StreamForward</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wavprocess.o(i.WavProcess_StreamForward))
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_decoders.o(i.Decoders_SelectDecoder)
</UL>
<P><STRONG><a name="[528]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[71f]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[29a]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_AddModule
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Task
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_SerialNum_String
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Product_String
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Manufacturer_String
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Device_DescAvailable
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateTimeInformation
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateFileListDisplay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Stop
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Jpg_To_File
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wUpdateConnectionStatus
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConnectionStatus
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEthernet
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_CreatePage
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_task
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DynWebPage
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistogramVisible
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_message
</UL>

<P><STRONG><a name="[720]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[721]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[52b]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
</UL>

<P><STRONG><a name="[52a]"></a>__hardfp_atan</STRONG> (Thumb, 636 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_detect_face
</UL>

<P><STRONG><a name="[52f]"></a>__hardfp_tan</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, tan.o(i.__hardfp_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_detect_face
</UL>

<P><STRONG><a name="[531]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 972 bytes, Stack size 168 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[52e]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
</UL>

<P><STRONG><a name="[532]"></a>__kernel_tan</STRONG> (Thumb, 772 bytes, Stack size 128 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[52c]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
</UL>

<P><STRONG><a name="[722]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[723]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[724]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[530]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[635]"></a>absdef</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, objdetectorc.o(i.absdef))
<BR><BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSimilarRect
</UL>

<P><STRONG><a name="[269]"></a>check_filename_ext</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, str_utils.o(i.check_filename_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = check_filename_ext &rArr; get_filename_ext
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_filename_ext
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_AddFileToPlaylist
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_BuildList
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_BuildCameraList
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_Decode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Selected_Item
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_CtxMenu
</UL>

<P><STRONG><a name="[5a1]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[632]"></a>cvIntegrateImage</STRONG> (Thumb, 138 bytes, Stack size 36 bytes, objdetectorc.o(i.cvIntegrateImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cvIntegrateImage
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvObjectDetection
</UL>

<P><STRONG><a name="[564]"></a>cvScaleDown</STRONG> (Thumb, 434 bytes, Stack size 80 bytes, objdetectorc.o(i.cvScaleDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = cvScaleDown &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvObjectDetection
</UL>

<P><STRONG><a name="[569]"></a>deinit_object_detection</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, objdetectorc.o(i.deinit_object_detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = deinit_object_detection &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_free
</UL>

<P><STRONG><a name="[56a]"></a>dhcp_arp_reply</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[574]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
</UL>

<P><STRONG><a name="[583]"></a>dhcp_fine_tmr</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
</UL>

<P><STRONG><a name="[592]"></a>dhcp_release</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[593]"></a>dhcp_renew</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>

<P><STRONG><a name="[431]"></a>dhcp_start</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_task
</UL>

<P><STRONG><a name="[432]"></a>dhcp_stop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dhcp_stop &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_task
</UL>

<P><STRONG><a name="[54e]"></a>disk_initialize</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, fatfs_drv.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[5a9]"></a>disk_ioctl</STRONG> (Thumb, 144 bytes, Stack size 120 bytes, fatfs_drv.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = disk_ioctl &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[54a]"></a>disk_read</STRONG> (Thumb, 276 bytes, Stack size 544 bytes, fatfs_drv.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = disk_read &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read10
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[54d]"></a>disk_status</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, fatfs_drv.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disk_status &rArr; SD_GetStatus &rArr; SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[5aa]"></a>disk_write</STRONG> (Thumb, 276 bytes, Stack size 544 bytes, fatfs_drv.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write10
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[1b9]"></a>do_bind</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, api_msg.o(i.do_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = do_bind &rArr; sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_bind)
</UL>
<P><STRONG><a name="[1ba]"></a>do_close</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, api_msg.o(i.do_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = do_close &rArr; do_close_internal &rArr; tcp_close &rArr; tcp_send_ctrl &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_close)
</UL>
<P><STRONG><a name="[1bb]"></a>do_delconn</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, api_msg.o(i.do_delconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = do_delconn &rArr; do_close_internal &rArr; tcp_close &rArr; tcp_send_ctrl &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_delete)
</UL>
<P><STRONG><a name="[1bc]"></a>do_listen</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, api_msg.o(i.do_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = do_listen &rArr; sys_mbox_new &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_listen_with_backlog)
</UL>
<P><STRONG><a name="[1bd]"></a>do_newconn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, api_msg.o(i.do_newconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = do_newconn &rArr; pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_new_with_proto_and_callback)
</UL>
<P><STRONG><a name="[1be]"></a>do_recv</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, api_msg.o(i.do_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_recv)
</UL>
<P><STRONG><a name="[1bf]"></a>do_write</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, api_msg.o(i.do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = do_write &rArr; do_writemore &rArr; tcp_write &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_write)
</UL>
<P><STRONG><a name="[416]"></a>eth_Camera_Config</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, ipcam_api.o(i.eth_Camera_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = eth_Camera_Config &rArr; OV2640_QVGAConfig &rArr; OV2640_Reset &rArr; OV2640_WriteReg &rArr; OV2640_TimeoutUserCallback &rArr; OV2640_HW_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QVGAConfig
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QQVGAConfig
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QVGAConfig
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QQVGAConfig
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_ImageCaptureInit
</UL>

<P><STRONG><a name="[5dc]"></a>etharp_arp_input</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, etharp.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = etharp_arp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[147]"></a>etharp_output</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[573]"></a>etharp_query</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[5e3]"></a>etharp_request</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[546]"></a>etharp_tmr</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[5e5]"></a>ethernet_input</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, etharp.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[12f]"></a>ethernetif_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ethernetif_init &rArr; low_level_init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ethernet.o(i.LwIP_Init)
</UL>
<P><STRONG><a name="[2bd]"></a>f_close</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = f_close &rArr; f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Close
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Jpg_To_File
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_previous_file
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_next_file
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageDirectBackgound
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_StartBrowser
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleImageSize
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCameraBackgound
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;term_destination
</UL>

<P><STRONG><a name="[2c9]"></a>f_lseek</STRONG> (Thumb, 514 bytes, Stack size 32 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_SetPosition
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Decode
</UL>

<P><STRONG><a name="[3c3]"></a>f_mount</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = f_mount &rArr; ff_cre_syncobj &rArr; xQueueCreateMutex &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_LibInit
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceDisconnected
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_msd_drive
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free_USB_OTG_FS_Resources
</UL>

<P><STRONG><a name="[2c6]"></a>f_open</STRONG> (Thumb, 468 bytes, Stack size 96 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 996<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enq_lock
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Open
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Jpg_To_File
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_previous_file
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_next_file
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageDirectBackgound
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_StartBrowser
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleImageSize
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCameraBackgound
</UL>

<P><STRONG><a name="[3b9]"></a>f_opendir</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_BuildList
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_BuildCameraList
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
</UL>

<P><STRONG><a name="[2c7]"></a>f_read</STRONG> (Thumb, 538 bytes, Stack size 64 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dec_ReadDataCallback
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Open
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Decode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_input_buffer
</UL>

<P><STRONG><a name="[3ba]"></a>f_readdir</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 876<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_BuildList
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_BuildCameraList
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
</UL>

<P><STRONG><a name="[5eb]"></a>f_sync</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[36d]"></a>f_unlink</STRONG> (Thumb, 230 bytes, Stack size 112 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 988<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Selected_Item
</UL>

<P><STRONG><a name="[5fb]"></a>f_write</STRONG> (Thumb, 606 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_file
</UL>

<P><STRONG><a name="[52d]"></a>fabs</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[4a5]"></a>fd_detect_face</STRONG> (Thumb, 682 bytes, Stack size 920 bytes, facedetection.o(i.fd_detect_face))
<BR><BR>[Stack]<UL><LI>Max Depth = 13356<LI>Call Chain = fd_detect_face &rArr; object_detection_process &rArr; icvObjectDetection &rArr; icvPickFace &rArr; QuicksortwIdx &rArr; Quicksort32UwIdx &rArr;  Quicksort32UwIdx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_detection_process
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Bmp_To_File
</UL>

<P><STRONG><a name="[4a6]"></a>fd_free</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, facedetection.o(i.fd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fd_free &rArr; deinit_object_detection &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_object_detection
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Bmp_To_File
</UL>

<P><STRONG><a name="[4a3]"></a>fd_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, facedetection.o(i.fd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fd_init &rArr; init_object_detection &rArr; KUART_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_object_detection
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Bmp_To_File
</UL>

<P><STRONG><a name="[4a4]"></a>fd_set_param</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, facedetection.o(i.fd_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fd_set_param &rArr; set_param &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_param
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Bmp_To_File
</UL>

<P><STRONG><a name="[55f]"></a>ff_convert</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ccsbcs.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[5f0]"></a>ff_cre_syncobj</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, syscall.o(i.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ff_cre_syncobj &rArr; xQueueCreateMutex &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[5ef]"></a>ff_del_syncobj</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, syscall.o(i.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ff_del_syncobj &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[5f1]"></a>ff_memalloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ff_memalloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[5f8]"></a>ff_memfree</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_memfree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[601]"></a>ff_rel_grant</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, syscall.o(i.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ff_rel_grant &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[602]"></a>ff_req_grant</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, syscall.o(i.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[551]"></a>ff_wtoupper</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ccsbcs.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[29d]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewLabel
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewIcon
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewButton
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewComboBoxGrp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewSlidebar
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewCheckbox
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_player
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_background
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SwitchPage
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_SwitchPage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct_camera
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SwitchPage
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Decode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_SwitchPage
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_SwitchPage
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_SwitchPage
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRadioOption
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvScaleDown
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_object_detection
</UL>

<P><STRONG><a name="[60a]"></a>fs_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fs.o(i.fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_close &rArr; fs_free
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_serve
</UL>

<P><STRONG><a name="[60c]"></a>fs_open</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fs.o(i.fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_open &rArr; fs_free
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_malloc
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_free
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_serve
</UL>

<P><STRONG><a name="[5a6]"></a>gen_numname</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[556]"></a>get_fat</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = get_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[5f5]"></a>get_fattime</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, fatfs_drv.o(i.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_fattime &rArr; RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[548]"></a>get_filename_ext</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, str_utils.o(i.get_filename_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_filename_ext
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_filename_ext
</UL>

<P><STRONG><a name="[433]"></a>htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, inet.o(i.htonl))
<BR><BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_task
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[5dd]"></a>htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inet.o(i.htons))
<BR><BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>

<P><STRONG><a name="[41e]"></a>http_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_ethernet.o(i.http_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = http_init &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEthernet
</UL>

<P><STRONG><a name="[622]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[624]"></a>icmp_input</STRONG> (Thumb, 414 bytes, Stack size 56 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = icmp_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[62b]"></a>icvGrouprectangular</STRONG> (Thumb, 1024 bytes, Stack size 120 bytes, objdetectorc.o(i.icvGrouprectangular))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = icvGrouprectangular &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMergePartition
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvObjectDetection
</UL>

<P><STRONG><a name="[62c]"></a>icvMergePartition</STRONG> (Thumb, 314 bytes, Stack size 72 bytes, objdetectorc.o(i.icvMergePartition))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = icvMergePartition &rArr; icvSimilarRect
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSimilarRect
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrouprectangular
</UL>

<P><STRONG><a name="[62e]"></a>icvObjectDetection</STRONG> (Thumb, 1312 bytes, Stack size 216 bytes, objdetectorc.o(i.icvObjectDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 12356<LI>Call Chain = icvObjectDetection &rArr; icvPickFace &rArr; QuicksortwIdx &rArr; Quicksort32UwIdx &rArr;  Quicksort32UwIdx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KUART_Output
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvhistogramEqualizeImage
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvPickFace
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrouprectangular
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvScaleDown
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvIntegrateImage
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRunFeature
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_detection_process
</UL>

<P><STRONG><a name="[634]"></a>icvPickFace</STRONG> (Thumb, 142 bytes, Stack size 12060 bytes, objdetectorc.o(i.icvPickFace))
<BR><BR>[Stack]<UL><LI>Max Depth = 12140<LI>Call Chain = icvPickFace &rArr; QuicksortwIdx &rArr; Quicksort32UwIdx &rArr;  Quicksort32UwIdx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuicksortwIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvObjectDetection
</UL>

<P><STRONG><a name="[62d]"></a>icvSimilarRect</STRONG> (Thumb, 226 bytes, Stack size 12 bytes, objdetectorc.o(i.icvSimilarRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = icvSimilarRect
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absdef
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMergePartition
</UL>

<P><STRONG><a name="[631]"></a>icvhistogramEqualizeImage</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, objdetectorc.o(i.icvhistogramEqualizeImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = icvhistogramEqualizeImage &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KUART_Output
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvObjectDetection
</UL>

<P><STRONG><a name="[629]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[626]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[5fe]"></a>init_object_detection</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, objdetectorc.o(i.init_object_detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_object_detection &rArr; KUART_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KUART_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_init
</UL>

<P><STRONG><a name="[5e0]"></a>ip_addr_isbroadcast</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip_addr.o(i.ip_addr_isbroadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[5e6]"></a>ip_input</STRONG> (Thumb, 504 bytes, Stack size 40 bytes, ip.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_is_up
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[62a]"></a>ip_output</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; pbuf_header
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[628]"></a>ip_output_if</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ip_output_if &rArr; pbuf_header
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[63f]"></a>ip_route</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_is_up
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>

<P><STRONG><a name="[5ea]"></a>jcopy_sample_rows</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, jutils.o(i.jcopy_sample_rows))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grayscale_convert
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullsize_downsample
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_process_context
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_bottom_edge
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_upsample
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2v2_upsample
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merged_2v_upsample
</UL>

<P><STRONG><a name="[63a]"></a>jdiv_round_up</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jutils.o(i.jdiv_round_up))
<BR><BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_calc_jpeg_dimensions
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;per_scan_setup
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_setup
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_calc_output_dimensions
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_core_output_dimensions
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;per_scan_setup
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_setup
</UL>

<P><STRONG><a name="[640]"></a>jinit_1pass_quantizer</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, jquant1.o(i.jinit_1pass_quantizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = jinit_1pass_quantizer &rArr; create_colormap &rArr; select_ncolors
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_colormap
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_colorindex
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_fs_workspace
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[642]"></a>jinit_2pass_quantizer</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, jquant2.o(i.jinit_2pass_quantizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jinit_2pass_quantizer &rArr; init_error_limit
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_error_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[695]"></a>jinit_arith_decoder</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, jdarith.o(i.jinit_arith_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jinit_arith_decoder
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[651]"></a>jinit_arith_encoder</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, jcarith.o(i.jinit_arith_encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jinit_arith_encoder
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[644]"></a>jinit_c_coef_controller</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, jccoefct.o(i.jinit_c_coef_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jinit_c_coef_controller
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jround_up
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[653]"></a>jinit_c_main_controller</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, jcmainct.o(i.jinit_c_main_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jinit_c_main_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[646]"></a>jinit_c_master_control</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, jcmaster.o(i.jinit_c_master_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 2672<LI>Call Chain = jinit_c_master_control &rArr; validate_script
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_script
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_script
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[649]"></a>jinit_c_prep_controller</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, jcprepct.o(i.jinit_c_prep_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = jinit_c_prep_controller &rArr; create_context_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_context_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[64e]"></a>jinit_color_converter</STRONG> (Thumb, 534 bytes, Stack size 16 bytes, jccolor.o(i.jinit_color_converter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jinit_color_converter
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[64a]"></a>jinit_color_deconverter</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, jdcolor.o(i.jinit_color_deconverter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jinit_color_deconverter &rArr; build_ycc_rgb_table
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_ycc_rgb_table
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_rgb_y_table
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[64d]"></a>jinit_compress_master</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, jcinit.o(i.jinit_compress_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 2680<LI>Call Chain = jinit_compress_master &rArr; jinit_c_master_control &rArr; validate_script
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_downsampler
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_prep_controller
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_master_control
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_main_controller
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_huff_encoder
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_forward_dct
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_color_converter
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_coef_controller
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_arith_encoder
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_marker_writer
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_start_compress
</UL>

<P><STRONG><a name="[655]"></a>jinit_d_coef_controller</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, jdcoefct.o(i.jinit_d_coef_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jinit_d_coef_controller
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jround_up
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[656]"></a>jinit_d_main_controller</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, jdmainct.o(i.jinit_d_main_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = jinit_d_main_controller &rArr; alloc_funny_pointers
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_funny_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[658]"></a>jinit_d_post_controller</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, jdpostct.o(i.jinit_d_post_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jinit_d_post_controller
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jround_up
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[64f]"></a>jinit_downsampler</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, jcsample.o(i.jinit_downsampler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jinit_downsampler
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[650]"></a>jinit_forward_dct</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, jcdctmgr.o(i.jinit_forward_dct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jinit_forward_dct
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[696]"></a>jinit_huff_decoder</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, jdhuff.o(i.jinit_huff_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jinit_huff_decoder
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[652]"></a>jinit_huff_encoder</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, jchuff.o(i.jinit_huff_encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jinit_huff_encoder
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[665]"></a>jinit_input_controller</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, jdinput.o(i.jinit_input_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jinit_input_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateDecompress
</UL>

<P><STRONG><a name="[659]"></a>jinit_inverse_dct</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, jddctmgr.o(i.jinit_inverse_dct))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jinit_inverse_dct
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[65a]"></a>jinit_marker_reader</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, jdmarker.o(i.jinit_marker_reader))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jinit_marker_reader
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_marker_reader
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateDecompress
</UL>

<P><STRONG><a name="[654]"></a>jinit_marker_writer</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, jcmarker.o(i.jinit_marker_writer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jinit_marker_writer
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[65b]"></a>jinit_master_decompress</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, jdmaster.o(i.jinit_master_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = jinit_master_decompress &rArr; master_selection &rArr; jinit_1pass_quantizer &rArr; create_colormap &rArr; select_ncolors
</UL>
<BR>[Calls]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_start_decompress
</UL>

<P><STRONG><a name="[65d]"></a>jinit_memory_mgr</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, jmemmgr.o(i.jinit_memory_mgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = jinit_memory_mgr &rArr; jpeg_get_small &rArr; p_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_term
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_init
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_small
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateDecompress
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateCompress
</UL>

<P><STRONG><a name="[660]"></a>jinit_merged_upsampler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, jdmerge.o(i.jinit_merged_upsampler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jinit_merged_upsampler &rArr; build_ycc_rgb_table
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_ycc_rgb_table
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[662]"></a>jinit_upsampler</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, jdsample.o(i.jinit_upsampler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jinit_upsampler
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jround_up
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[663]"></a>jpeg_CreateCompress</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, jcapimin.o(i.jpeg_CreateCompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = jpeg_CreateCompress &rArr; jinit_memory_mgr &rArr; jpeg_get_small &rArr; p_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_memory_mgr
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_compress
</UL>

<P><STRONG><a name="[664]"></a>jpeg_CreateDecompress</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, jdapimin.o(i.jpeg_CreateDecompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = jpeg_CreateDecompress &rArr; jinit_memory_mgr &rArr; jpeg_get_small &rArr; p_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_memory_mgr
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_marker_reader
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_input_controller
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_decompress
</UL>

<P><STRONG><a name="[67c]"></a>jpeg_abort</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, jcomapi.o(i.jpeg_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_read_header
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_finish_decompress
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_finish_compress
</UL>

<P><STRONG><a name="[666]"></a>jpeg_add_quant_table</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, jcparam.o(i.jpeg_add_quant_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = jpeg_add_quant_table &rArr; jpeg_alloc_quant_table
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_alloc_quant_table
</UL>
<BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_linear_quality
</UL>

<P><STRONG><a name="[53e]"></a>jpeg_alloc_huff_table</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, jcomapi.o(i.jpeg_alloc_huff_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_alloc_huff_table
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass_gather
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_huff_table
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dht
</UL>

<P><STRONG><a name="[611]"></a>jpeg_alloc_quant_table</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, jcomapi.o(i.jpeg_alloc_quant_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_alloc_quant_table
</UL>
<BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_add_quant_table
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dqt
</UL>

<P><STRONG><a name="[639]"></a>jpeg_calc_jpeg_dimensions</STRONG> (Thumb, 1066 bytes, Stack size 8 bytes, jcmaster.o(i.jpeg_calc_jpeg_dimensions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_calc_jpeg_dimensions
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdiv_round_up
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_setup
</UL>

<P><STRONG><a name="[667]"></a>jpeg_calc_output_dimensions</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, jdmaster.o(i.jpeg_calc_output_dimensions))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jpeg_calc_output_dimensions &rArr; jpeg_core_output_dimensions
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdiv_round_up
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_merged_upsample
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_core_output_dimensions
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[4a9]"></a>jpeg_compress</STRONG> (Thumb, 162 bytes, Stack size 152 bytes, libjpeg_utils.o(i.jpeg_compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 2848<LI>Call Chain = jpeg_compress &rArr; jpeg_start_compress &rArr; jinit_compress_master &rArr; jinit_c_master_control &rArr; validate_script
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_write_scanlines
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_stdio_dest
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_std_error
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_start_compress
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_quality
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_defaults
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_finish_compress
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy_compress
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateCompress
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Jpg_To_File
</UL>

<P><STRONG><a name="[672]"></a>jpeg_consume_input</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, jdapimin.o(i.jpeg_consume_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jpeg_consume_input &rArr; default_decompress_parms
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_decompress_parms
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_read_header
</UL>

<P><STRONG><a name="[668]"></a>jpeg_core_output_dimensions</STRONG> (Thumb, 1022 bytes, Stack size 16 bytes, jdinput.o(i.jpeg_core_output_dimensions))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_core_output_dimensions
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdiv_round_up
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_calc_output_dimensions
</UL>

<P><STRONG><a name="[41f]"></a>jpeg_decompress</STRONG> (Thumb, 186 bytes, Stack size 648 bytes, libjpeg_utils.o(i.jpeg_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = jpeg_decompress &rArr; jpeg_start_decompress &rArr; jinit_master_decompress &rArr; master_selection &rArr; jinit_1pass_quantizer &rArr; create_colormap &rArr; select_ncolors
</UL>
<BR>[Calls]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_stdio_src
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_std_error
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_start_decompress
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_read_scanlines
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_read_header
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_finish_decompress
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy_decompress
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateDecompress
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Decode
</UL>

<P><STRONG><a name="[67a]"></a>jpeg_default_colorspace</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, jcparam.o(i.jpeg_default_colorspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jpeg_default_colorspace &rArr; jpeg_set_colorspace
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_colorspace
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_defaults
</UL>

<P><STRONG><a name="[5db]"></a>jpeg_destroy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, jcomapi.o(i.jpeg_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy_decompress
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy_compress
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_exit
</UL>

<P><STRONG><a name="[671]"></a>jpeg_destroy_compress</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, jcapimin.o(i.jpeg_destroy_compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_destroy_compress &rArr; jpeg_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_compress
</UL>

<P><STRONG><a name="[676]"></a>jpeg_destroy_decompress</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, jdapimin.o(i.jpeg_destroy_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_destroy_decompress &rArr; jpeg_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_decompress
</UL>

<P><STRONG><a name="[207]"></a>jpeg_fdct_10x10</STRONG> (Thumb, 1044 bytes, Stack size 124 bytes, jfdctint.o(i.jpeg_fdct_10x10))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = jpeg_fdct_10x10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[211]"></a>jpeg_fdct_10x5</STRONG> (Thumb, 608 bytes, Stack size 72 bytes, jfdctint.o(i.jpeg_fdct_10x5))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = jpeg_fdct_10x5
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[208]"></a>jpeg_fdct_11x11</STRONG> (Thumb, 1408 bytes, Stack size 172 bytes, jfdctint.o(i.jpeg_fdct_11x11))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = jpeg_fdct_11x11
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[209]"></a>jpeg_fdct_12x12</STRONG> (Thumb, 1286 bytes, Stack size 196 bytes, jfdctint.o(i.jpeg_fdct_12x12))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = jpeg_fdct_12x12
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[210]"></a>jpeg_fdct_12x6</STRONG> (Thumb, 734 bytes, Stack size 80 bytes, jfdctint.o(i.jpeg_fdct_12x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = jpeg_fdct_12x6
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[20a]"></a>jpeg_fdct_13x13</STRONG> (Thumb, 1594 bytes, Stack size 240 bytes, jfdctint.o(i.jpeg_fdct_13x13))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = jpeg_fdct_13x13
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[20b]"></a>jpeg_fdct_14x14</STRONG> (Thumb, 1486 bytes, Stack size 268 bytes, jfdctint.o(i.jpeg_fdct_14x14))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = jpeg_fdct_14x14
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[20f]"></a>jpeg_fdct_14x7</STRONG> (Thumb, 932 bytes, Stack size 96 bytes, jfdctint.o(i.jpeg_fdct_14x7))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = jpeg_fdct_14x7
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[20c]"></a>jpeg_fdct_15x15</STRONG> (Thumb, 1710 bytes, Stack size 316 bytes, jfdctint.o(i.jpeg_fdct_15x15))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = jpeg_fdct_15x15
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[20d]"></a>jpeg_fdct_16x16</STRONG> (Thumb, 1924 bytes, Stack size 340 bytes, jfdctint.o(i.jpeg_fdct_16x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = jpeg_fdct_16x16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[20e]"></a>jpeg_fdct_16x8</STRONG> (Thumb, 1362 bytes, Stack size 84 bytes, jfdctint.o(i.jpeg_fdct_16x8))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = jpeg_fdct_16x8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[1ff]"></a>jpeg_fdct_1x1</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, jfdctint.o(i.jpeg_fdct_1x1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_fdct_1x1
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[21d]"></a>jpeg_fdct_1x2</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, jfdctint.o(i.jpeg_fdct_1x2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_fdct_1x2
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[215]"></a>jpeg_fdct_2x1</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, jfdctint.o(i.jpeg_fdct_2x1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jpeg_fdct_2x1
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[200]"></a>jpeg_fdct_2x2</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, jfdctint.o(i.jpeg_fdct_2x2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jpeg_fdct_2x2
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[21c]"></a>jpeg_fdct_2x4</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, jfdctint.o(i.jpeg_fdct_2x4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_fdct_2x4
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[201]"></a>jpeg_fdct_3x3</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, jfdctint.o(i.jpeg_fdct_3x3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_fdct_3x3
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[21b]"></a>jpeg_fdct_3x6</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, jfdctint.o(i.jpeg_fdct_3x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = jpeg_fdct_3x6
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[214]"></a>jpeg_fdct_4x2</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, jfdctint.o(i.jpeg_fdct_4x2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_fdct_4x2
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[202]"></a>jpeg_fdct_4x4</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, jfdctint.o(i.jpeg_fdct_4x4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_fdct_4x4
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[21a]"></a>jpeg_fdct_4x8</STRONG> (Thumb, 500 bytes, Stack size 64 bytes, jfdctint.o(i.jpeg_fdct_4x8))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = jpeg_fdct_4x8
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[219]"></a>jpeg_fdct_5x10</STRONG> (Thumb, 668 bytes, Stack size 136 bytes, jfdctint.o(i.jpeg_fdct_5x10))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = jpeg_fdct_5x10
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[203]"></a>jpeg_fdct_5x5</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, jfdctint.o(i.jpeg_fdct_5x5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_fdct_5x5
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[218]"></a>jpeg_fdct_6x12</STRONG> (Thumb, 772 bytes, Stack size 208 bytes, jfdctint.o(i.jpeg_fdct_6x12))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = jpeg_fdct_6x12
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[213]"></a>jpeg_fdct_6x3</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, jfdctint.o(i.jpeg_fdct_6x3))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = jpeg_fdct_6x3
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[204]"></a>jpeg_fdct_6x6</STRONG> (Thumb, 424 bytes, Stack size 56 bytes, jfdctint.o(i.jpeg_fdct_6x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = jpeg_fdct_6x6
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[217]"></a>jpeg_fdct_7x14</STRONG> (Thumb, 996 bytes, Stack size 296 bytes, jfdctint.o(i.jpeg_fdct_7x14))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = jpeg_fdct_7x14
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[205]"></a>jpeg_fdct_7x7</STRONG> (Thumb, 698 bytes, Stack size 72 bytes, jfdctint.o(i.jpeg_fdct_7x7))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = jpeg_fdct_7x7
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[216]"></a>jpeg_fdct_8x16</STRONG> (Thumb, 1402 bytes, Stack size 344 bytes, jfdctint.o(i.jpeg_fdct_8x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = jpeg_fdct_8x16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[212]"></a>jpeg_fdct_8x4</STRONG> (Thumb, 492 bytes, Stack size 64 bytes, jfdctint.o(i.jpeg_fdct_8x4))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = jpeg_fdct_8x4
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[206]"></a>jpeg_fdct_9x9</STRONG> (Thumb, 926 bytes, Stack size 92 bytes, jfdctint.o(i.jpeg_fdct_9x9))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = jpeg_fdct_9x9
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[220]"></a>jpeg_fdct_float</STRONG> (Thumb, 696 bytes, Stack size 44 bytes, jfdctflt.o(i.jpeg_fdct_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = jpeg_fdct_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[21f]"></a>jpeg_fdct_ifast</STRONG> (Thumb, 832 bytes, Stack size 88 bytes, jfdctfst.o(i.jpeg_fdct_ifast))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = jpeg_fdct_ifast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[21e]"></a>jpeg_fdct_islow</STRONG> (Thumb, 760 bytes, Stack size 48 bytes, jfdctint.o(i.jpeg_fdct_islow))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_fdct_islow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[670]"></a>jpeg_finish_compress</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, jcapimin.o(i.jpeg_finish_compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jpeg_finish_compress &rArr; jpeg_abort
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_compress
</UL>

<P><STRONG><a name="[679]"></a>jpeg_finish_decompress</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, jdapimin.o(i.jpeg_finish_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_finish_decompress &rArr; jpeg_abort
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_decompress
</UL>

<P><STRONG><a name="[608]"></a>jpeg_free_large</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, jmemnobs.o(i.jpeg_free_large))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jpeg_free_large &rArr; p_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_free
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pool
</UL>

<P><STRONG><a name="[609]"></a>jpeg_free_small</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, jmemnobs.o(i.jpeg_free_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jpeg_free_small &rArr; p_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_free
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_destruct
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pool
</UL>

<P><STRONG><a name="[540]"></a>jpeg_get_large</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, jmemnobs.o(i.jpeg_get_large))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jpeg_get_large &rArr; p_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_large
</UL>

<P><STRONG><a name="[541]"></a>jpeg_get_small</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, jmemnobs.o(i.jpeg_get_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jpeg_get_small &rArr; p_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_memory_mgr
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
</UL>

<P><STRONG><a name="[1d5]"></a>jpeg_idct_10x10</STRONG> (Thumb, 1094 bytes, Stack size 408 bytes, jidctint.o(i.jpeg_idct_10x10))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = jpeg_idct_10x10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1df]"></a>jpeg_idct_10x5</STRONG> (Thumb, 828 bytes, Stack size 244 bytes, jidctint.o(i.jpeg_idct_10x5))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = jpeg_idct_10x5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1d6]"></a>jpeg_idct_11x11</STRONG> (Thumb, 1454 bytes, Stack size 440 bytes, jidctint.o(i.jpeg_idct_11x11))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = jpeg_idct_11x11
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1d7]"></a>jpeg_idct_12x12</STRONG> (Thumb, 1310 bytes, Stack size 476 bytes, jidctint.o(i.jpeg_idct_12x12))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = jpeg_idct_12x12
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1de]"></a>jpeg_idct_12x6</STRONG> (Thumb, 994 bytes, Stack size 284 bytes, jidctint.o(i.jpeg_idct_12x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = jpeg_idct_12x6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1d8]"></a>jpeg_idct_13x13</STRONG> (Thumb, 1598 bytes, Stack size 512 bytes, jidctint.o(i.jpeg_idct_13x13))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = jpeg_idct_13x13
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1d9]"></a>jpeg_idct_14x14</STRONG> (Thumb, 1534 bytes, Stack size 548 bytes, jidctint.o(i.jpeg_idct_14x14))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = jpeg_idct_14x14
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1dd]"></a>jpeg_idct_14x7</STRONG> (Thumb, 1298 bytes, Stack size 324 bytes, jidctint.o(i.jpeg_idct_14x7))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = jpeg_idct_14x7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1da]"></a>jpeg_idct_15x15</STRONG> (Thumb, 1562 bytes, Stack size 584 bytes, jidctint.o(i.jpeg_idct_15x15))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = jpeg_idct_15x15
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1db]"></a>jpeg_idct_16x16</STRONG> (Thumb, 1932 bytes, Stack size 620 bytes, jidctint.o(i.jpeg_idct_16x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = jpeg_idct_16x16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1dc]"></a>jpeg_idct_16x8</STRONG> (Thumb, 1654 bytes, Stack size 368 bytes, jidctint.o(i.jpeg_idct_16x8))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jpeg_idct_16x8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1cd]"></a>jpeg_idct_1x1</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, jidctint.o(i.jpeg_idct_1x1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_idct_1x1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1eb]"></a>jpeg_idct_1x2</STRONG> (Thumb, 88 bytes, Stack size 28 bytes, jidctint.o(i.jpeg_idct_1x2))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = jpeg_idct_1x2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1e3]"></a>jpeg_idct_2x1</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, jidctint.o(i.jpeg_idct_2x1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jpeg_idct_2x1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1ce]"></a>jpeg_idct_2x2</STRONG> (Thumb, 182 bytes, Stack size 52 bytes, jidctint.o(i.jpeg_idct_2x2))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = jpeg_idct_2x2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1ea]"></a>jpeg_idct_2x4</STRONG> (Thumb, 264 bytes, Stack size 88 bytes, jidctint.o(i.jpeg_idct_2x4))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = jpeg_idct_2x4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1cf]"></a>jpeg_idct_3x3</STRONG> (Thumb, 262 bytes, Stack size 88 bytes, jidctint.o(i.jpeg_idct_3x3))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = jpeg_idct_3x3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1e9]"></a>jpeg_idct_3x6</STRONG> (Thumb, 434 bytes, Stack size 136 bytes, jidctint.o(i.jpeg_idct_3x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = jpeg_idct_3x6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1e2]"></a>jpeg_idct_4x2</STRONG> (Thumb, 278 bytes, Stack size 88 bytes, jidctint.o(i.jpeg_idct_4x2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = jpeg_idct_4x2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1d0]"></a>jpeg_idct_4x4</STRONG> (Thumb, 386 bytes, Stack size 120 bytes, jidctint.o(i.jpeg_idct_4x4))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = jpeg_idct_4x4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1e8]"></a>jpeg_idct_4x8</STRONG> (Thumb, 840 bytes, Stack size 204 bytes, jidctint.o(i.jpeg_idct_4x8))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = jpeg_idct_4x8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1e7]"></a>jpeg_idct_5x10</STRONG> (Thumb, 822 bytes, Stack size 288 bytes, jidctint.o(i.jpeg_idct_5x10))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = jpeg_idct_5x10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1d1]"></a>jpeg_idct_5x5</STRONG> (Thumb, 512 bytes, Stack size 160 bytes, jidctint.o(i.jpeg_idct_5x5))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = jpeg_idct_5x5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1e6]"></a>jpeg_idct_6x12</STRONG> (Thumb, 980 bytes, Stack size 380 bytes, jidctint.o(i.jpeg_idct_6x12))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = jpeg_idct_6x12
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1e1]"></a>jpeg_idct_6x3</STRONG> (Thumb, 450 bytes, Stack size 136 bytes, jidctint.o(i.jpeg_idct_6x3))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = jpeg_idct_6x3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1d2]"></a>jpeg_idct_6x6</STRONG> (Thumb, 592 bytes, Stack size 208 bytes, jidctint.o(i.jpeg_idct_6x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = jpeg_idct_6x6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1e5]"></a>jpeg_idct_7x14</STRONG> (Thumb, 1244 bytes, Stack size 492 bytes, jidctint.o(i.jpeg_idct_7x14))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = jpeg_idct_7x14
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1d3]"></a>jpeg_idct_7x7</STRONG> (Thumb, 826 bytes, Stack size 264 bytes, jidctint.o(i.jpeg_idct_7x7))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = jpeg_idct_7x7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1e4]"></a>jpeg_idct_8x16</STRONG> (Thumb, 1422 bytes, Stack size 620 bytes, jidctint.o(i.jpeg_idct_8x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = jpeg_idct_8x16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1e0]"></a>jpeg_idct_8x4</STRONG> (Thumb, 692 bytes, Stack size 200 bytes, jidctint.o(i.jpeg_idct_8x4))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = jpeg_idct_8x4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1d4]"></a>jpeg_idct_9x9</STRONG> (Thumb, 980 bytes, Stack size 368 bytes, jidctint.o(i.jpeg_idct_9x9))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jpeg_idct_9x9
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1ee]"></a>jpeg_idct_float</STRONG> (Thumb, 1124 bytes, Stack size 304 bytes, jidctflt.o(i.jpeg_idct_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = jpeg_idct_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1ed]"></a>jpeg_idct_ifast</STRONG> (Thumb, 1314 bytes, Stack size 356 bytes, jidctfst.o(i.jpeg_idct_ifast))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = jpeg_idct_ifast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1ec]"></a>jpeg_idct_islow</STRONG> (Thumb, 1218 bytes, Stack size 332 bytes, jidctint.o(i.jpeg_idct_islow))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = jpeg_idct_islow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[6ce]"></a>jpeg_mem_available</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, jmemnobs.o(i.jpeg_mem_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_mem_available
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realize_virt_arrays
</UL>

<P><STRONG><a name="[65e]"></a>jpeg_mem_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_memory_mgr
</UL>

<P><STRONG><a name="[65f]"></a>jpeg_mem_term</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_mem_term))
<BR><BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_memory_mgr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_destruct
</UL>

<P><STRONG><a name="[6cf]"></a>jpeg_open_backing_store</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, jmemnobs.o(i.jpeg_open_backing_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_open_backing_store
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realize_virt_arrays
</UL>

<P><STRONG><a name="[682]"></a>jpeg_quality_scaling</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, jcparam.o(i.jpeg_quality_scaling))
<BR><BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_quality
</UL>

<P><STRONG><a name="[675]"></a>jpeg_read_header</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, jdapimin.o(i.jpeg_read_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = jpeg_read_header &rArr; jpeg_consume_input &rArr; default_decompress_parms
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_abort
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_consume_input
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_decompress
</UL>

<P><STRONG><a name="[678]"></a>jpeg_read_scanlines</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, jdapistd.o(i.jpeg_read_scanlines))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_read_scanlines
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_decompress
</UL>

<P><STRONG><a name="[1b5]"></a>jpeg_resync_to_restart</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, jdmarker.o(i.jpeg_resync_to_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_resync_to_restart &rArr; next_marker
</UL>
<BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_marker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdatasrc.o(i.jpeg_stdio_src)
</UL>
<P><STRONG><a name="[67b]"></a>jpeg_set_colorspace</STRONG> (Thumb, 560 bytes, Stack size 24 bytes, jcparam.o(i.jpeg_set_colorspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_set_colorspace
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_default_colorspace
</UL>

<P><STRONG><a name="[66c]"></a>jpeg_set_defaults</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, jcparam.o(i.jpeg_set_defaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = jpeg_set_defaults &rArr; jpeg_set_quality &rArr; jpeg_set_linear_quality &rArr; jpeg_add_quant_table &rArr; jpeg_alloc_quant_table
</UL>
<BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_quality
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_default_colorspace
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_huff_tables
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_compress
</UL>

<P><STRONG><a name="[681]"></a>jpeg_set_linear_quality</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, jcparam.o(i.jpeg_set_linear_quality))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = jpeg_set_linear_quality &rArr; jpeg_add_quant_table &rArr; jpeg_alloc_quant_table
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_add_quant_table
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_quality
</UL>

<P><STRONG><a name="[66d]"></a>jpeg_set_quality</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, jcparam.o(i.jpeg_set_quality))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = jpeg_set_quality &rArr; jpeg_set_linear_quality &rArr; jpeg_add_quant_table &rArr; jpeg_alloc_quant_table
</UL>
<BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_linear_quality
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_quality_scaling
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_defaults
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_compress
</UL>

<P><STRONG><a name="[66e]"></a>jpeg_start_compress</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, jcapistd.o(i.jpeg_start_compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 2696<LI>Call Chain = jpeg_start_compress &rArr; jinit_compress_master &rArr; jinit_c_master_control &rArr; validate_script
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_suppress_tables
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_compress
</UL>

<P><STRONG><a name="[677]"></a>jpeg_start_decompress</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, jdapistd.o(i.jpeg_start_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = jpeg_start_decompress &rArr; jinit_master_decompress &rArr; master_selection &rArr; jinit_1pass_quantizer &rArr; create_colormap &rArr; select_ncolors
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_pass_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_decompress
</UL>

<P><STRONG><a name="[66a]"></a>jpeg_std_error</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, jerror.o(i.jpeg_std_error))
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_decompress
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_compress
</UL>

<P><STRONG><a name="[66b]"></a>jpeg_stdio_dest</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, jdatadst.o(i.jpeg_stdio_dest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_stdio_dest
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_compress
</UL>

<P><STRONG><a name="[674]"></a>jpeg_stdio_src</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, jdatasrc.o(i.jpeg_stdio_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_stdio_src
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_decompress
</UL>

<P><STRONG><a name="[683]"></a>jpeg_suppress_tables</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, jcapimin.o(i.jpeg_suppress_tables))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = jpeg_suppress_tables
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_start_compress
</UL>

<P><STRONG><a name="[66f]"></a>jpeg_write_scanlines</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, jcapistd.o(i.jpeg_write_scanlines))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_write_scanlines
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_compress
</UL>

<P><STRONG><a name="[645]"></a>jround_up</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, jutils.o(i.jround_up))
<BR><BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_coef_controller
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_coef_controller
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_upsampler
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_post_controller
</UL>

<P><STRONG><a name="[436]"></a>low_level_MAC_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ethernetif.o(i.low_level_MAC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = low_level_MAC_init &rArr; ETH_DMARxDescChainInit
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressConfig
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChecksumInsertionConfig
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChainInit
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescReceiveITConfig
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[68d]"></a>lwip_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lwip_init &rArr; mem_init &rArr; sys_sem_new &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sanity_check
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[a8]"></a>main</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[271]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewLabel
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewIcon
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewButton
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewComboBoxGrp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddComboOption
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewSlidebar
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewCheckbox
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_DirectEx
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_player
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_CreatePage
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Decode
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_CreatePage
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_CreatePage
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_CreatePage
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewRadioButtonGrp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRadioOption
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Slidebar
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvScaleDown
</UL>

<P><STRONG><a name="[586]"></a>mem_free</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
</UL>

<P><STRONG><a name="[690]"></a>mem_init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, mem.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mem_init &rArr; sys_sem_new &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[594]"></a>mem_malloc</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
</UL>

<P><STRONG><a name="[447]"></a>mem_pool_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mem_utils.o(i.mem_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_pool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_PreInit
</UL>

<P><STRONG><a name="[69e]"></a>mem_realloc</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, mem.o(i.mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mem_realloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[69f]"></a>memp_free</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, memp.o(i.memp_free))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[691]"></a>memp_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6a1]"></a>memp_malloc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, memp.o(i.memp_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[619]"></a>netbuf_data</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, netbuf.o(i.netbuf_data))
<BR><BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_serve
</UL>

<P><STRONG><a name="[61c]"></a>netbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_serve
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[621]"></a>netconn_accept</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, api_lib.o(i.netconn_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netconn_accept &rArr; sys_arch_mbox_fetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_thread
</UL>

<P><STRONG><a name="[537]"></a>netconn_alloc</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, api_msg.o(i.netconn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = netconn_alloc &rArr; sys_sem_new &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[61f]"></a>netconn_bind</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, api_lib.o(i.netconn_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = netconn_bind &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_thread
</UL>

<P><STRONG><a name="[61b]"></a>netconn_close</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, api_lib.o(i.netconn_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = netconn_close &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_serve
</UL>

<P><STRONG><a name="[61d]"></a>netconn_delete</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, api_lib.o(i.netconn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = netconn_delete &rArr; netconn_free &rArr;  netconn_delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_serve
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[53a]"></a>netconn_free</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, api_msg.o(i.netconn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = netconn_free &rArr;  netconn_delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[620]"></a>netconn_listen_with_backlog</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, api_lib.o(i.netconn_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = netconn_listen_with_backlog &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_thread
</UL>

<P><STRONG><a name="[61e]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, api_lib.o(i.netconn_new_with_proto_and_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_sem_new &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_thread
</UL>

<P><STRONG><a name="[618]"></a>netconn_recv</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, api_lib.o(i.netconn_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = netconn_recv &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_serve
</UL>

<P><STRONG><a name="[37b]"></a>netconn_write</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, api_lib.o(i.netconn_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = netconn_write &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_serve
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DynWebPage
</UL>

<P><STRONG><a name="[437]"></a>netif_add</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[63b]"></a>netif_is_up</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_is_up))
<BR><BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[37f]"></a>netif_remove</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, netif.o(i.netif_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = netif_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_webserver
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_Cleanup
</UL>

<P><STRONG><a name="[434]"></a>netif_set_addr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_task
</UL>

<P><STRONG><a name="[438]"></a>netif_set_default</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[58c]"></a>netif_set_down</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, netif.o(i.netif_set_down))
<BR><BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[570]"></a>netif_set_gw</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[56e]"></a>netif_set_ipaddr</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[56f]"></a>netif_set_netmask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[439]"></a>netif_set_up</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[56d]"></a>ntohl</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, inet.o(i.ntohl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[625]"></a>ntohs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, inet.o(i.ntohs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>

<P><STRONG><a name="[5fd]"></a>object_detection_process</STRONG> (Thumb, 158 bytes, Stack size 80 bytes, objdetectorc.o(i.object_detection_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 12436<LI>Call Chain = object_detection_process &rArr; icvObjectDetection &rArr; icvPickFace &rArr; QuicksortwIdx &rArr; Quicksort32UwIdx &rArr;  Quicksort32UwIdx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KUART_Output
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvObjectDetection
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_detect_face
</UL>

<P><STRONG><a name="[2c1]"></a>p_free</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mem_utils.o(i.p_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = p_free
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_DeInit
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Decode
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_small
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_large
</UL>

<P><STRONG><a name="[2c4]"></a>p_malloc</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, mem_utils.o(i.p_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = p_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Init
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Decode
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_small
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_large
</UL>

<P><STRONG><a name="[578]"></a>pbuf_alloc</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[6a7]"></a>pbuf_cat</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[6a6]"></a>pbuf_chain</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pbuf_chain &rArr; pbuf_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[6e5]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>

<P><STRONG><a name="[627]"></a>pbuf_copy</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pbuf_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
</UL>

<P><STRONG><a name="[59a]"></a>pbuf_copy_partial</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_copy_partial
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
</UL>

<P><STRONG><a name="[580]"></a>pbuf_free</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[5df]"></a>pbuf_header</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[57d]"></a>pbuf_realloc</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[6a8]"></a>pbuf_ref</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[557]"></a>put_fat</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[6b4]"></a>pvPortMalloc</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, heap_2.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[707]"></a>pxPortInitialiseStack</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port_cm4.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[5ab]"></a>raw_bind</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(i.raw_bind))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[63c]"></a>raw_input</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = raw_input &rArr; ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[6a9]"></a>raw_new</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, raw.o(i.raw_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = raw_new
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[6aa]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(i.raw_recv))
<BR><BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[5b6]"></a>raw_remove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, raw.o(i.raw_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = raw_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[5ff]"></a>set_param</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, objdetectorc.o(i.set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_param &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_set_param
</UL>

<P><STRONG><a name="[6a0]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sys_arch.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sys_arch_mbox_fetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
</UL>

<P><STRONG><a name="[6a4]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sys_arch.o(i.sys_arch_mbox_tryfetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[69b]"></a>sys_arch_sem_wait</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sys_arch.o(i.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>

<P><STRONG><a name="[6d5]"></a>sys_arch_timeouts</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sys_arch.o(i.sys_arch_timeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_arch_timeouts
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
</UL>

<P><STRONG><a name="[68f]"></a>sys_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sys_arch.o(i.sys_init))
<BR><BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6d6]"></a>sys_mbox_fetch</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, sys.o(i.sys_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sys_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_timeouts
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[5b8]"></a>sys_mbox_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mbox_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_mbox_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[5b9]"></a>sys_mbox_new</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sys_mbox_new &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[5da]"></a>sys_mbox_post</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>

<P><STRONG><a name="[539]"></a>sys_mbox_trypost</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, sys_arch.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sys_mbox_trypost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[6a2]"></a>sys_sem_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_sem_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[69d]"></a>sys_sem_new</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sys_arch.o(i.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sys_sem_new &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[5ad]"></a>sys_sem_signal</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>

<P><STRONG><a name="[616]"></a>sys_thread_new</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, sys_arch.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_init
</UL>

<P><STRONG><a name="[547]"></a>sys_timeout</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, sys.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sys_timeout &rArr; sys_arch_timeouts
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_timeouts
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[6d8]"></a>sys_untimeout</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sys.o(i.sys_untimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_untimeout &rArr; sys_arch_timeouts
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_timeouts
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[6a5]"></a>tcp_abandon</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[5b0]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[6dc]"></a>tcp_alloc</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[5af]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[5ac]"></a>tcp_bind</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; sys_arch_timeouts
</UL>
<BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[5b5]"></a>tcp_close</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tcp_close &rArr; tcp_send_ctrl &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[6e3]"></a>tcp_eff_send_mss</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[6e4]"></a>tcp_enqueue</STRONG> (Thumb, 1068 bytes, Stack size 80 bytes, tcp_out.o(i.tcp_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[5b4]"></a>tcp_err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_err))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[6e6]"></a>tcp_fasttmr</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_send_ctrl &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[63e]"></a>tcp_input</STRONG> (Thumb, 1150 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[6ea]"></a>tcp_keepalive</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tcp_keepalive &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[5b7]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; sys_arch_timeouts
</UL>
<BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[6ab]"></a>tcp_new</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tcp.o(i.tcp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[6df]"></a>tcp_next_iss</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[5be]"></a>tcp_output</STRONG> (Thumb, 474 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[6f0]"></a>tcp_pcb_purge</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>

<P><STRONG><a name="[6d9]"></a>tcp_pcb_remove</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[5b3]"></a>tcp_poll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[5b1]"></a>tcp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[235]"></a>tcp_recv_null</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_send_ctrl &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[5bb]"></a>tcp_recved</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[6f2]"></a>tcp_rexmit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tcp_rexmit &rArr; ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[6f3]"></a>tcp_rexmit_fast</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit &rArr; ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[6f5]"></a>tcp_rexmit_rto</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[6db]"></a>tcp_rst</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tcp_rst &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[6ee]"></a>tcp_seg_free</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[6da]"></a>tcp_segs_free</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[6e2]"></a>tcp_send_ctrl</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tcp_send_ctrl &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[6ec]"></a>tcp_send_empty_ack</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[5b2]"></a>tcp_sent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[6f6]"></a>tcp_slowtmr</STRONG> (Thumb, 772 bytes, Stack size 40 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[6e1]"></a>tcp_timer_needed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tcpip.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; sys_arch_timeouts
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[6f8]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_send_ctrl &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[6f4]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[5bd]"></a>tcp_write</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tcp_write &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>

<P><STRONG><a name="[6f7]"></a>tcp_zero_window_probe</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tcp_zero_window_probe &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[6a3]"></a>tcpip_apimsg</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, tcpip.o(i.tcpip_apimsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
</UL>

<P><STRONG><a name="[435]"></a>tcpip_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tcpip_init &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[12e]"></a>tcpip_input</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcpip_input &rArr; sys_mbox_trypost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ethernet.o(i.LwIP_Init)
</UL>
<P><STRONG><a name="[597]"></a>udp_bind</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[598]"></a>udp_connect</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = udp_connect &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[63d]"></a>udp_input</STRONG> (Thumb, 484 bytes, Stack size 56 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[596]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[599]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[595]"></a>udp_remove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[57e]"></a>udp_sendto_if</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[6d7]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, queue.o(i.uxQueueMessagesWaiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uxQueueMessagesWaiting &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[630]"></a>uxTaskGetStackHighWaterMark</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tasks.o(i.uxTaskGetStackHighWaterMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uxTaskGetStackHighWaterMark
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvObjectDetection
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRunFeature
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_detection_process
</UL>

<P><STRONG><a name="[6c7]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 70 bytes, Stack size 128 bytes, mod_core.o(i.vApplicationMallocFailedHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetFont
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Clear
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[6bf]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[6bd]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[6b2]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[6fc]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
</UL>

<P><STRONG><a name="[6b7]"></a>vListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.vListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[31d]"></a>vPortEnterCritical</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, port_cm4.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_TSC_Init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_Task
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[31f]"></a>vPortExitCritical</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, port_cm4.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_TSC_Init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_Task
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[6b5]"></a>vPortFree</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, heap_2.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[2cb]"></a>vPortYieldFromISR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, port_cm4.o(i.vPortYieldFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_IRQHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_XferCplt
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[2bf]"></a>vQueueDelete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_player
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_DeInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_capture
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_webserver
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_Cleanup
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[28b]"></a>vTaskDelay</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateInitDisplay
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Delay
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Task
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_Task
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_playlist
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Rewind
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_ProgressCtrl
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Forward
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QVGAConfig
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QQVGAConfig
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QVGAConfig
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QQVGAConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEthernet
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateDHCPState
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_task
</UL>

<P><STRONG><a name="[2c0]"></a>vTaskDelete</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskDelete &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_player
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_DeInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_capture
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_webserver
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_Cleanup
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_task
</UL>

<P><STRONG><a name="[6fd]"></a>vTaskIncrementTick</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, tasks.o(i.vTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[37a]"></a>vTaskList</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, tasks.o(i.vTaskList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskList &rArr; prvListTaskWithinSingleList &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DynWebPage
</UL>

<P><STRONG><a name="[6c6]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[6fe]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[6bb]"></a>vTaskPriorityDisinherit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[6ff]"></a>vTaskPriorityInherit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[37e]"></a>vTaskPrioritySet</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, tasks.o(i.vTaskPrioritySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPrioritySet &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_webserver
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEthernet
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_Cleanup
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_task
</UL>

<P><STRONG><a name="[3e4]"></a>vTaskResume</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(i.vTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskResume &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIsTaskSuspended
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEthernet
</UL>

<P><STRONG><a name="[705]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[693]"></a>vTaskStartScheduler</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[297]"></a>vTaskSuspend</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tasks.o(i.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskSuspend &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Startup
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_Startup
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Startup
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_webserver
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_Startup
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_Cleanup
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_Startup
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Startup
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_Startup
</UL>

<P><STRONG><a name="[43b]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESSAGES_CloseEx
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[23c]"></a>vTaskSwitchContext</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
</UL>

<P><STRONG><a name="[6f9]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_2.o(i.xPortGetFreeHeapSize))
<BR><BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
</UL>

<P><STRONG><a name="[700]"></a>xPortStartScheduler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, port_cm4.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_port_cm4_c_39a90d8d__prvEnableVFP
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_port_cm4_c_39a90d8d__prvStartFirstTask
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[4ae]"></a>xPortSysTickHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, port_cm4.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xPortSysTickHandler &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[600]"></a>xQueueCreateMutex</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = xQueueCreateMutex &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>

<P><STRONG><a name="[284]"></a>xQueueGenericCreate</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_DirectEx
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_player
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[2bb]"></a>xQueueGenericReceive</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioManager_Task
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Task
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_Task
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[704]"></a>xQueueGenericReset</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xQueueGenericReset
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[26b]"></a>xQueueGenericSend</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_playlist
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_playlist
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateAudioPlayerPage
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_VolumeCtrl
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Stop
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Startup
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Rewind
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Repeat
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_ProgressCtrl
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PlayFromPlayList
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Play
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Pause
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_MuteCtrl
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Forward
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Background
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_AddFileToPlaylist
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[2ca]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_IRQHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_XferCplt
</UL>

<P><STRONG><a name="[706]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[285]"></a>xTaskGenericCreate</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Init
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_DirectEx
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_player
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEthernet
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[62f]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_timeouts
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvObjectDetection
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRunFeature
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_detection_process
</UL>

<P><STRONG><a name="[6d4]"></a>xTaskGetTickCount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskGetTickCount &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[41c]"></a>xTaskIsTaskSuspended</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.xTaskIsTaskSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xTaskIsTaskSuspended
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEthernet
</UL>

<P><STRONG><a name="[6c5]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[43d]"></a>xTaskResumeAll</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESSAGES_CloseEx
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3f6]"></a>IOE_DMA_Config</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, stm324xg_eval_ioe.o(i.IOE_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IOE_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataBuffer
</UL>

<P><STRONG><a name="[406]"></a>IOE_GPIO_Config</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm324xg_eval_ioe.o(i.IOE_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IOE_GPIO_Config &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TimeoutUserCallback
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[407]"></a>IOE_I2C_Config</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, stm324xg_eval_ioe.o(i.IOE_I2C_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = IOE_I2C_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[410]"></a>IOE_TS_Read_X</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm324xg_eval_ioe.o(i.IOE_TS_Read_X))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = IOE_TS_Read_X &rArr; I2C_ReadDataBuffer &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_GetState
</UL>

<P><STRONG><a name="[411]"></a>IOE_TS_Read_Y</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm324xg_eval_ioe.o(i.IOE_TS_Read_Y))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = IOE_TS_Read_Y &rArr; I2C_ReadDataBuffer &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_GetState
</UL>

<P><STRONG><a name="[412]"></a>IOE_TS_Read_Z</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm324xg_eval_ioe.o(i.IOE_TS_Read_Z))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = IOE_TS_Read_Z &rArr; I2C_ReadDataBuffer &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_GetState
</UL>

<P><STRONG><a name="[40f]"></a>delay</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm324xg_eval_ioe.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_Config
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Reset
</UL>

<P><STRONG><a name="[48d]"></a>delay</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm324xg_eval_lcd.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM324xG_LCD_Init
</UL>

<P><STRONG><a name="[32b]"></a>CmdError</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.CmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[32e]"></a>CmdResp1Error</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[331]"></a>CmdResp2Error</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[332]"></a>CmdResp3Error</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp3Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[333]"></a>CmdResp6Error</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[334]"></a>CmdResp7Error</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp7Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[3be]"></a>FindSCR</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, stm324xg_eval_sdio_sd.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[46d]"></a>SDEnWideBus</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, stm324xg_eval_sdio_sd.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[39b]"></a>ETH_Delay</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f4x7_eth.o(i.ETH_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[46b]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>

<P><STRONG><a name="[4af]"></a>SetSysClock</STRONG> (Thumb, 218 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2aa]"></a>Check_BMP_file</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gl_ext.o(i.Check_BMP_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Check_BMP_file
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddIconControlObj
</UL>

<P><STRONG><a name="[118]"></a>DrawBackgroundZone</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, gl_mgr.o(i.DrawBackgroundZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DrawBackgroundZone &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetFont
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateGroupSelectionLabel
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mgr.o(i.GL_ShowMainMenu)
</UL>
<P><STRONG><a name="[115]"></a>GL_ShowConnectivityGroup</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, gl_mgr.o(i.GL_ShowConnectivityGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GL_ShowConnectivityGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateGroupSelectionLabel
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPageControl
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddIconControlObj
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mgr.o(i.GL_ShowMainMenu)
</UL>
<P><STRONG><a name="[116]"></a>GL_ShowMultimediaGroup</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, gl_mgr.o(i.GL_ShowMultimediaGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GL_ShowMultimediaGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateGroupSelectionLabel
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPageControl
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddIconControlObj
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mgr.o(i.GL_ShowMainMenu)
</UL>
<P><STRONG><a name="[117]"></a>GL_ShowUtilitiesGroup</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, gl_mgr.o(i.GL_ShowUtilitiesGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateGroupSelectionLabel
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPageControl
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddIconControlObj
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mgr.o(i.GL_ShowMainMenu)
</UL>
<P><STRONG><a name="[377]"></a>GL_UpdateGroupSelectionLabel</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, gl_mgr.o(i.GL_UpdateGroupSelectionLabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetFont
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowUtilitiesGroup
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMultimediaGroup
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowConnectivityGroup
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBackgroundZone
</UL>

<P><STRONG><a name="[114]"></a>Time_Task</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, gl_mgr.o(i.Time_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Time_Task &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mgr.o(i.GL_Init)
</UL>
<P><STRONG><a name="[43c]"></a>return_from_direct</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, messages.o(i.return_from_direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = return_from_direct &rArr; RefreshPage &rArr; ShowPage &rArr; GL_Clear &rArr; LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPage
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESSAGES_CloseEx
</UL>

<P><STRONG><a name="[441]"></a>SDStorage_StateChanged</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mod_core.o(i.SDStorage_StateChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SDStorage_StateChanged &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_HandleModulesBackground
</UL>

<P><STRONG><a name="[38c]"></a>ETH_GPIO_Config</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, eth_bsp.o(i.ETH_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ETH_GPIO_Config &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCO1Config
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_ETH_MediaInterfaceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[38e]"></a>ETH_MACDMA_Config</STRONG> (Thumb, 166 bytes, Stack size 192 bytes, eth_bsp.o(i.ETH_MACDMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ETH_MACDMA_Config &rArr; ETH_Init &rArr; ETHERNET_UpdateInitDisplay &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_StructInit
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SoftwareReset
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetSoftwareResetStatus
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[38d]"></a>ETH_NVIC_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, eth_bsp.o(i.ETH_NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[1b8]"></a>Background_Task</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, main.o(i.Background_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Background_Task &rArr; GL_Init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_PreInit
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_LibInit
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_HandleModulesBackground
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_AddModule
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateBackgroundProcessStatus
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Startup
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Handle_Inputs
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_HandleSystemSettingsChange
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LowPower
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Background_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2e3]"></a>BSP_Delay</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_bsp.o(i.BSP_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>

<P><STRONG><a name="[2e4]"></a>BSP_SetTime</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usb_bsp.o(i.BSP_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>

<P><STRONG><a name="[517]"></a>USB_OTG_BSP_TimeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_TimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_BSP_TimeInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[2c2]"></a>AudioPlayer_DeInitBuffer</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, app_audio.o(i.AudioPlayer_DeInitBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AudioPlayer_DeInitBuffer &rArr; AudioPlayer_PlayUpdate &rArr; Player_FRead &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_PlayUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Play
</UL>

<P><STRONG><a name="[2c8]"></a>Player_FRead</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, app_audio.o(i.Player_FRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Player_FRead &rArr; CONSOLE_AddMessage &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_AddMessage
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritLdCtrl_Apply
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritEQ_Apply
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_PlayUpdate
</UL>

<P><STRONG><a name="[c8]"></a>AUDIO_AddFileToPlaylist</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_AddFileToPlaylist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1188<LI>Call Chain = AUDIO_AddFileToPlaylist &rArr; AUDIO_Play &rArr; AudioPlayer_Play &rArr; AudioPlayer_Open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_filename_ext
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Play
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_GetState
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_DirectEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_OpenFile)
</UL>
<P><STRONG><a name="[16]"></a>AUDIO_Background</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_Background))
<BR><BR>[Stack]<UL><LI>Max Depth = 1196<LI>Call Chain = AUDIO_Background &rArr; AUDIO_Next &rArr; AUDIO_PlayFromPlayList &rArr; AudioPlayer_Play &rArr; AudioPlayer_Open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateTimeInformation
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Stop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Play
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Next
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(.data)
</UL>
<P><STRONG><a name="[26e]"></a>AUDIO_CreatePage</STRONG> (Thumb, 3938 bytes, Stack size 80 bytes, mod_audio.o(i.AUDIO_CreatePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = AUDIO_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetBackColor
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_PageObj
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewLabel
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewIcon
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewButton
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetPageHeader
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetMenuItem
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetChecked
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SlidebarValue
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewSlidebar
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewCheckbox
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_DirectEx
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SwitchPage
</UL>

<P><STRONG><a name="[c0]"></a>AUDIO_EqualizerCtrlBand1</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_EqualizerCtrlBand1))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = AUDIO_EqualizerCtrlBand1 &rArr; App_Audio_SetEq &rArr; SpiritEQ_FltSet &rArr; EQ_SPCORP_Symbol_002
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SlidebarValue
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Audio_SetEq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[c1]"></a>AUDIO_EqualizerCtrlBand2</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_EqualizerCtrlBand2))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = AUDIO_EqualizerCtrlBand2 &rArr; App_Audio_SetEq &rArr; SpiritEQ_FltSet &rArr; EQ_SPCORP_Symbol_002
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SlidebarValue
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Audio_SetEq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[c2]"></a>AUDIO_EqualizerCtrlBand3</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_EqualizerCtrlBand3))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = AUDIO_EqualizerCtrlBand3 &rArr; App_Audio_SetEq &rArr; SpiritEQ_FltSet &rArr; EQ_SPCORP_Symbol_002
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SlidebarValue
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Audio_SetEq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[c3]"></a>AUDIO_EqualizerCtrlBand4</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_EqualizerCtrlBand4))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = AUDIO_EqualizerCtrlBand4 &rArr; App_Audio_SetEq &rArr; SpiritEQ_FltSet &rArr; EQ_SPCORP_Symbol_002
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SlidebarValue
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Audio_SetEq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[b6]"></a>AUDIO_Forward</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mod_audio.o(i.AUDIO_Forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 1196<LI>Call Chain = AUDIO_Forward &rArr; AudioPlayer_Play &rArr; AudioPlayer_Open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_SetPosition
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Play
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Pause
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_GetTimeInfo
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_GetState
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_GetFileLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[c4]"></a>AUDIO_LoudnessCtrl</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_LoudnessCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AUDIO_LoudnessCtrl &rArr; MOD_SetParam &rArr; RTC_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SlidebarValue
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Audio_SetLoudnessGain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[17]"></a>AUDIO_Media_changed</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_Media_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = AUDIO_Media_changed &rArr; return_from_player &rArr; AudioPlayer_Close &rArr; f_close &rArr; f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_player
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_equalizer
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_SetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(.data)
</UL>
<P><STRONG><a name="[b5]"></a>AUDIO_MuteCtrl</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_MuteCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AUDIO_MuteCtrl &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_VolumeCtrl
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mod_audio.o(i.AUDIO_RefreshIcons)
<LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[b3]"></a>AUDIO_Next</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_Next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1188<LI>Call Chain = AUDIO_Next &rArr; AUDIO_PlayFromPlayList &rArr; AudioPlayer_Play &rArr; AudioPlayer_Open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Stop
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PlayFromPlayList
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Background
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[ba]"></a>AUDIO_OpenFile</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_OpenFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068<LI>Call Chain = AUDIO_OpenFile &rArr; FILMGR_DirectEx &rArr; FILEMGR_CreatePage &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILMGR_DirectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Play
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[c9]"></a>AUDIO_Pause</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_Pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AUDIO_Pause &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Pause
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_RefreshIcons)
</UL>
<P><STRONG><a name="[b2]"></a>AUDIO_Play</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 1180<LI>Call Chain = AUDIO_Play &rArr; AudioPlayer_Play &rArr; AudioPlayer_Open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SwitchPage
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_OpenFile
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_DirectEx
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Background
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_AddFileToPlaylist
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mod_audio.o(i.AUDIO_RefreshIcons)
<LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[291]"></a>AUDIO_PlayFromPlayList</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_PlayFromPlayList))
<BR><BR>[Stack]<UL><LI>Max Depth = 1180<LI>Call Chain = AUDIO_PlayFromPlayList &rArr; AudioPlayer_Play &rArr; AudioPlayer_Open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Previous
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Next
</UL>

<P><STRONG><a name="[b1]"></a>AUDIO_Previous</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_Previous))
<BR><BR>[Stack]<UL><LI>Max Depth = 1188<LI>Call Chain = AUDIO_Previous &rArr; AUDIO_PlayFromPlayList &rArr; AudioPlayer_Play &rArr; AudioPlayer_Open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Stop
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PlayFromPlayList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[bd]"></a>AUDIO_ProgressCtrl</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, mod_audio.o(i.AUDIO_ProgressCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1188<LI>Call Chain = AUDIO_ProgressCtrl &rArr; AudioPlayer_Play &rArr; AudioPlayer_Open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SlidebarValue
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_SetPosition
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Play
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Pause
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_GetState
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_GetFileLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[294]"></a>AUDIO_RefreshIcons</STRONG> (Thumb, 536 bytes, Stack size 16 bytes, mod_audio.o(i.AUDIO_RefreshIcons))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AUDIO_RefreshIcons &rArr; AUDIO_VolumeCtrl &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPageControl
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewIcon
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SlidebarValue
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_VolumeCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioManager_Task
</UL>

<P><STRONG><a name="[bc]"></a>AUDIO_Repeat</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_Repeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AUDIO_Repeat &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mod_audio.o(i.AUDIO_RefreshIcons)
<LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[b7]"></a>AUDIO_Rewind</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mod_audio.o(i.AUDIO_Rewind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1196<LI>Call Chain = AUDIO_Rewind &rArr; AudioPlayer_Play &rArr; AudioPlayer_Open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_SetPosition
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Play
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Pause
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_GetTimeInfo
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_GetState
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_GetFileLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[15]"></a>AUDIO_Startup</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_Startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = AUDIO_Startup &rArr; AUDIO_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SwitchPage
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(.data)
</UL>
<P><STRONG><a name="[b4]"></a>AUDIO_Stop</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, mod_audio.o(i.AUDIO_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = AUDIO_Stop &rArr; AudioPlayer_Close &rArr; f_close &rArr; f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPageControl
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SlidebarValue
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Stop
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Close
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_DirectEx
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Previous
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Next
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Background
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[293]"></a>AUDIO_SwitchPage</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, mod_audio.o(i.AUDIO_SwitchPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = AUDIO_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPage
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_CreatePage
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_menu
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_player
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_errorpage
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_equalizer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_settings
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_player
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_equalizer
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_background
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Startup
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Play
</UL>

<P><STRONG><a name="[29f]"></a>AUDIO_UpdateFileListDisplay</STRONG> (Thumb, 686 bytes, Stack size 16 bytes, mod_audio.o(i.AUDIO_UpdateFileListDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AUDIO_UpdateFileListDisplay &rArr; GL_LCD_DrawRect &rArr; GL_DrawLine &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileOnly
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_DrawRect
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LabelColor
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_GetFileInfo
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioManager_Task
</UL>

<P><STRONG><a name="[26d]"></a>AUDIO_UpdateTimeInformation</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, mod_audio.o(i.AUDIO_UpdateTimeInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AUDIO_UpdateTimeInformation &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPageControl
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SlidebarValue
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_GetTimeInfo
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Background
</UL>

<P><STRONG><a name="[be]"></a>AUDIO_VolumeCtrl</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, mod_audio.o(i.AUDIO_VolumeCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AUDIO_VolumeCtrl &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SlidebarValue
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_VolumeCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_RefreshIcons
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[c7]"></a>AudioManager_Task</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, mod_audio.o(i.AudioManager_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AudioManager_Task &rArr; AUDIO_RefreshIcons &rArr; AUDIO_VolumeCtrl &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_UpdateFileListDisplay
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_RefreshIcons
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mod_audio.o(i.AUDIO_DirectEx)
<LI> mod_audio.o(i.goto_player)
</UL>
<P><STRONG><a name="[af]"></a>DrawAudioPlayerBackgound</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, mod_audio.o(i.DrawAudioPlayerBackgound))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DrawAudioPlayerBackgound &rArr; GL_LCD_DrawRect &rArr; GL_DrawLine &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_DrawRect
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[b0]"></a>UpdateAudioPlayerPage</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mod_audio.o(i.UpdateAudioPlayerPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UpdateAudioPlayerPage &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[14b]"></a>cancel_exit_player</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, mod_audio.o(i.cancel_exit_player))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = cancel_exit_player &rArr; RefreshPage &rArr; ShowPage &rArr; GL_Clear &rArr; LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Label
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.exit_player)
</UL>
<P><STRONG><a name="[b8]"></a>exit_player</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, mod_audio.o(i.exit_player))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = exit_player &rArr; return_from_player &rArr; AudioPlayer_Close &rArr; f_close &rArr; f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPageControl
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewButton
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_DrawRect
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_player
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[14a]"></a>goto_background</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, mod_audio.o(i.goto_background))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = goto_background &rArr; AUDIO_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPage
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_MGR_RefreshScroll
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SwitchPage
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.exit_player)
</UL>
<P><STRONG><a name="[b9]"></a>goto_equalizer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mod_audio.o(i.goto_equalizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = goto_equalizer &rArr; AUDIO_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[ac]"></a>goto_player</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, mod_audio.o(i.goto_player))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = goto_player &rArr; AudioPlayer_Init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SwitchPage
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[bb]"></a>goto_playlist</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mod_audio.o(i.goto_playlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = goto_playlist &rArr; return_from_playlist &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_playlist
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[ad]"></a>goto_settings</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mod_audio.o(i.goto_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = goto_settings &rArr; AUDIO_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[bf]"></a>return_from_equalizer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mod_audio.o(i.return_from_equalizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = return_from_equalizer &rArr; AUDIO_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SwitchPage
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Media_changed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[c6]"></a>return_from_errorpage</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mod_audio.o(i.return_from_errorpage))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = return_from_errorpage &rArr; AUDIO_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[149]"></a>return_from_player</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, mod_audio.o(i.return_from_player))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = return_from_player &rArr; AudioPlayer_Close &rArr; f_close &rArr; f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPage
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_MGR_RefreshScroll
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SwitchPage
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Stop
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_DeInit
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayer_Close
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_player
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Media_changed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.exit_player)
</UL>
<P><STRONG><a name="[615]"></a>return_from_playlist</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mod_audio.o(i.return_from_playlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = return_from_playlist &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_playlist
</UL>

<P><STRONG><a name="[c5]"></a>return_from_settings</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, mod_audio.o(i.return_from_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = return_from_settings &rArr; AUDIO_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_IsChecked
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[ae]"></a>return_to_menu</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mod_audio.o(i.return_to_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = return_to_menu &rArr; AUDIO_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_audio.o(i.AUDIO_CreatePage)
</UL>
<P><STRONG><a name="[4a1]"></a>Save_Bmp_To_File</STRONG> (Thumb, 268 bytes, Stack size 648 bytes, app_camera.o(i.Save_Bmp_To_File))
<BR><BR>[Stack]<UL><LI>Max Depth = 14004<LI>Call Chain = Save_Bmp_To_File &rArr; fd_detect_face &rArr; object_detection_process &rArr; icvObjectDetection &rArr; icvPickFace &rArr; QuicksortwIdx &rArr; Quicksort32UwIdx &rArr;  Quicksort32UwIdx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_set_param
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_init
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_free
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_detect_face
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB16toRGB24
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Image_To_File
</UL>

<P><STRONG><a name="[4a8]"></a>Save_Jpg_To_File</STRONG> (Thumb, 210 bytes, Stack size 592 bytes, app_camera.o(i.Save_Jpg_To_File))
<BR><BR>[Stack]<UL><LI>Max Depth = 3440<LI>Call Chain = Save_Jpg_To_File &rArr; jpeg_compress &rArr; jpeg_start_compress &rArr; jinit_compress_master &rArr; jinit_c_master_control &rArr; validate_script
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_compress
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB16toRGB24
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Image_To_File
</UL>

<P><STRONG><a name="[19]"></a>CAMERA_Background</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mod_camera.o(i.CAMERA_Background))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CAMERA_Background &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_camera.o(.data)
</UL>
<P><STRONG><a name="[300]"></a>CAMERA_CreatePage</STRONG> (Thumb, 1458 bytes, Stack size 192 bytes, mod_camera.o(i.CAMERA_CreatePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = CAMERA_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetBackColor
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_PageObj
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewLabel
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewIcon
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewButton
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetPageHeader
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetMenuItem
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewComboBoxGrp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddComboOption
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_DefaultPath
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_GetDefaultDirectory
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_SwitchPage
</UL>

<P><STRONG><a name="[301]"></a>CAMERA_GetDefaultDirectory</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mod_camera.o(i.CAMERA_GetDefaultDirectory))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAMERA_GetDefaultDirectory &rArr; Check_DefaultPath &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_DefaultPath
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_view
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_CreatePage
</UL>

<P><STRONG><a name="[1a]"></a>CAMERA_Media_changed</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mod_camera.o(i.CAMERA_Media_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = CAMERA_Media_changed &rArr; CAMERA_SwitchPage &rArr; CAMERA_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_camera.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>CAMERA_Startup</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mod_camera.o(i.CAMERA_Startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = CAMERA_Startup &rArr; CAMERA_SwitchPage &rArr; CAMERA_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_SwitchPage
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_camera.o(.data)
</UL>
<P><STRONG><a name="[303]"></a>CAMERA_SwitchPage</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mod_camera.o(i.CAMERA_SwitchPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = CAMERA_SwitchPage &rArr; CAMERA_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPage
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_CreatePage
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_menu
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_capture
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_settings
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_capture
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_Startup
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_Media_changed
</UL>

<P><STRONG><a name="[129]"></a>Camera_Task</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, mod_camera.o(i.Camera_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Camera_Task &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_GetFlagStatus
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ClearFlag
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_camera.o(i.InitCamera)
</UL>
<P><STRONG><a name="[e6]"></a>Capture_Brightness_Dec</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mod_camera.o(i.Capture_Brightness_Dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Capture_Brightness_Dec &rArr; Camera_SetBrighnessValue &rArr; OV2640_BrightnessConfig &rArr; OV2640_WriteReg &rArr; OV2640_TimeoutUserCallback &rArr; OV2640_HW_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_SetBrighnessValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_camera.o(i.CAMERA_CreatePage)
</UL>
<P><STRONG><a name="[e5]"></a>Capture_Brightness_Inc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mod_camera.o(i.Capture_Brightness_Inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Capture_Brightness_Inc &rArr; Camera_SetBrighnessValue &rArr; OV2640_BrightnessConfig &rArr; OV2640_WriteReg &rArr; OV2640_TimeoutUserCallback &rArr; OV2640_HW_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_SetBrighnessValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_camera.o(i.CAMERA_CreatePage)
</UL>
<P><STRONG><a name="[302]"></a>Check_DefaultPath</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mod_camera.o(i.Check_DefaultPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Check_DefaultPath &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_GetDefaultDirectory
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_CreatePage
</UL>

<P><STRONG><a name="[e3]"></a>DrawCameraBackgound</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mod_camera.o(i.DrawCameraBackgound))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DrawCameraBackgound &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_camera.o(i.CAMERA_CreatePage)
</UL>
<P><STRONG><a name="[e4]"></a>InitCamera</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, mod_camera.o(i.InitCamera))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = InitCamera &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Cmd
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_SetBrighnessValue
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apply_camera_native_effects
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_camera.o(i.CAMERA_CreatePage)
</UL>
<P><STRONG><a name="[e8]"></a>Sel_folder</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mod_camera.o(i.Sel_folder))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068<LI>Call Chain = Sel_folder &rArr; FILMGR_DirectEx &rArr; FILEMGR_CreatePage &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILMGR_DirectEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_camera.o(i.CAMERA_CreatePage)
</UL>
<P><STRONG><a name="[31e]"></a>Show_Frame</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mod_camera.o(i.Show_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Show_Frame &rArr; LCD_WindowModeDisable &rArr; LCD_SetDisplayWindow &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camera_Task
</UL>

<P><STRONG><a name="[13b]"></a>Update_folder</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mod_camera.o(i.Update_folder))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Update_folder &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_camera.o(i.Sel_folder)
</UL>
<P><STRONG><a name="[dd]"></a>goto_capture</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mod_camera.o(i.goto_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = goto_capture &rArr; CAMERA_SwitchPage &rArr; CAMERA_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_camera.o(i.CAMERA_CreatePage)
</UL>
<P><STRONG><a name="[de]"></a>goto_settings</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mod_camera.o(i.goto_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = goto_settings &rArr; CAMERA_SwitchPage &rArr; CAMERA_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_camera.o(i.CAMERA_CreatePage)
</UL>
<P><STRONG><a name="[e1]"></a>goto_start_capture</STRONG> (Thumb, 124 bytes, Stack size 104 bytes, mod_camera.o(i.goto_start_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 14124<LI>Call Chain = goto_start_capture &rArr; Save_Image_To_File &rArr; Save_Bmp_To_File &rArr; fd_detect_face &rArr; object_detection_process &rArr; icvObjectDetection &rArr; icvPickFace &rArr; QuicksortwIdx &rArr; Quicksort32UwIdx &rArr;  Quicksort32UwIdx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Image_To_File
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_camera.o(i.CAMERA_CreatePage)
</UL>
<P><STRONG><a name="[df]"></a>goto_view</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mod_camera.o(i.goto_view))
<BR><BR>[Stack]<UL><LI>Max Depth = 1220<LI>Call Chain = goto_view &rArr; IMAGE_CameraView &rArr; IMAGE_CreatePage &rArr; IMAGE_BuildList &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CameraView
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_GetDefaultDirectory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_camera.o(i.CAMERA_CreatePage)
</UL>
<P><STRONG><a name="[e2]"></a>return_from_capture</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, mod_camera.o(i.return_from_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = return_from_capture &rArr; CAMERA_SwitchPage &rArr; CAMERA_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Cmd
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_camera.o(i.CAMERA_CreatePage)
</UL>
<P><STRONG><a name="[e7]"></a>return_from_settings</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, mod_camera.o(i.return_from_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = return_from_settings &rArr; CAMERA_SwitchPage &rArr; CAMERA_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComboOptionActive
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_camera.o(i.CAMERA_CreatePage)
</UL>
<P><STRONG><a name="[e0]"></a>return_to_menu</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mod_camera.o(i.return_to_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = return_to_menu &rArr; CAMERA_SwitchPage &rArr; CAMERA_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_camera.o(i.CAMERA_CreatePage)
</UL>
<P><STRONG><a name="[459]"></a>OV2640_TimeoutUserCallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dcmi_ov2640.o(i.OV2640_TimeoutUserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OV2640_TimeoutUserCallback &rArr; OV2640_HW_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftwareResetCmd
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_HW_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
</UL>

<P><STRONG><a name="[45d]"></a>OV9655_TimeoutUserCallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dcmi_ov9655.o(i.OV9655_TimeoutUserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OV9655_TimeoutUserCallback &rArr; OV9655_HW_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftwareResetCmd
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_HW_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_WriteReg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_ReadReg
</UL>

<P><STRONG><a name="[379]"></a>DynWebPage</STRONG> (Thumb, 200 bytes, Stack size 824 bytes, app_ethernet.o(i.DynWebPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = DynWebPage &rArr; netconn_write &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_serve
</UL>

<P><STRONG><a name="[413]"></a>IPCAM_CaptureNextImage</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_ethernet.o(i.IPCAM_CaptureNextImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IPCAM_CaptureNextImage
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ClearITPendingBit
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_serve
</UL>

<P><STRONG><a name="[418]"></a>IPCAM_PrepareImage</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_ethernet.o(i.IPCAM_PrepareImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IPCAM_PrepareImage &rArr; IPCAM_RGB16toRGB24
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_RGB16toRGB24
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_serve
</UL>

<P><STRONG><a name="[419]"></a>IPCAM_RGB16toRGB24</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, app_ethernet.o(i.IPCAM_RGB16toRGB24))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IPCAM_RGB16toRGB24
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_PrepareImage
</UL>

<P><STRONG><a name="[617]"></a>http_ipcam_serve</STRONG> (Thumb, 1006 bytes, Stack size 32 bytes, app_ethernet.o(i.http_ipcam_serve))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = http_ipcam_serve &rArr; DynWebPage &rArr; netconn_write &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_data
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_RefreshSetting
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_PrepareImage
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_CaptureNextImage
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DynWebPage
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_thread
</UL>

<P><STRONG><a name="[14d]"></a>http_ipcam_thread</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, app_ethernet.o(i.http_ipcam_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = http_ipcam_thread &rArr; http_ipcam_serve &rArr; DynWebPage &rArr; netconn_write &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ipcam_serve
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ethernet.o(i.http_init)
</UL>
<P><STRONG><a name="[60b]"></a>fs_free</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fs.o(i.fs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
</UL>

<P><STRONG><a name="[60d]"></a>fs_malloc</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fs.o(i.fs_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[37c]"></a>ETHERNET_Cleanup</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, mod_ethernet.o(i.ETHERNET_Cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ETHERNET_Cleanup &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_distantcontrol
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_bkgnd_from_errorpage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_distant_control
</UL>

<P><STRONG><a name="[380]"></a>ETHERNET_CreatePage</STRONG> (Thumb, 1874 bytes, Stack size 104 bytes, mod_ethernet.o(i.ETHERNET_CreatePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ETHERNET_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetBackColor
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_PageObj
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewLabel
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewIcon
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewButton
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetPageHeader
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetMenuItem
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetChecked
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewComboBoxGrp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddComboOption
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewCheckbox
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
</UL>

<P><STRONG><a name="[1b]"></a>ETHERNET_Startup</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mod_ethernet.o(i.ETHERNET_Startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ETHERNET_Startup &rArr; ETHERNET_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_ethernet.o(.data)
</UL>
<P><STRONG><a name="[382]"></a>ETHERNET_SwitchPage</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, mod_ethernet.o(i.ETHERNET_SwitchPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ETHERNET_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPage
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_CreatePage
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_menu
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_webserver
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_warning
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_distantcontrol
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_bkgnd_from_errorpage
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_webserver
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_distantcontrol
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_EthernetSettingss
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_distant_control
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEthernet
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_Startup
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateDHCPState
</UL>

<P><STRONG><a name="[103]"></a>InitEthernet</STRONG> (Thumb, 930 bytes, Stack size 104 bytes, mod_ethernet.o(i.InitEthernet))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = InitEthernet &rArr; LwIP_Init &rArr; tcpip_init &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateIcon
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIsTaskSuspended
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateDHCPState
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_init
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCAM_ImageCaptureInit
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_ethernet.o(i.ETHERNET_CreatePage)
</UL>
<P><STRONG><a name="[385]"></a>UpdateConnectionStatus</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, mod_ethernet.o(i.UpdateConnectionStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UpdateConnectionStatus &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_UpdateConnState
</UL>

<P><STRONG><a name="[107]"></a>disable_distant_control</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, mod_ethernet.o(i.disable_distant_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = disable_distant_control &rArr; ETHERNET_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_Cleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_ethernet.o(i.ETHERNET_CreatePage)
</UL>
<P><STRONG><a name="[100]"></a>goto_EthernetSettingss</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mod_ethernet.o(i.goto_EthernetSettingss))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = goto_EthernetSettingss &rArr; ETHERNET_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_ethernet.o(i.ETHERNET_CreatePage)
</UL>
<P><STRONG><a name="[ff]"></a>goto_distantcontrol</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mod_ethernet.o(i.goto_distantcontrol))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = goto_distantcontrol &rArr; ETHERNET_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_ethernet.o(i.ETHERNET_CreatePage)
</UL>
<P><STRONG><a name="[fe]"></a>goto_webserver</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mod_ethernet.o(i.goto_webserver))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = goto_webserver &rArr; ETHERNET_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_ethernet.o(i.ETHERNET_CreatePage)
</UL>
<P><STRONG><a name="[109]"></a>return_bkgnd_from_errorpage</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mod_ethernet.o(i.return_bkgnd_from_errorpage))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = return_bkgnd_from_errorpage &rArr; ETHERNET_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_Cleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_ethernet.o(i.ETHERNET_CreatePage)
</UL>
<P><STRONG><a name="[104]"></a>return_from_distantcontrol</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mod_ethernet.o(i.return_from_distantcontrol))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = return_from_distantcontrol &rArr; ETHERNET_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_Cleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_ethernet.o(i.ETHERNET_CreatePage)
</UL>
<P><STRONG><a name="[105]"></a>return_from_settings</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mod_ethernet.o(i.return_from_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = return_from_settings &rArr; ETHERNET_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_IsChecked
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComboOptionActive
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_ethernet.o(i.ETHERNET_CreatePage)
</UL>
<P><STRONG><a name="[106]"></a>return_from_warning</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mod_ethernet.o(i.return_from_warning))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = return_from_warning &rArr; ETHERNET_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_ethernet.o(i.ETHERNET_CreatePage)
</UL>
<P><STRONG><a name="[102]"></a>return_from_webserver</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, mod_ethernet.o(i.return_from_webserver))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = return_from_webserver &rArr; ETHERNET_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Cmd
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_ethernet.o(i.ETHERNET_CreatePage)
</UL>
<P><STRONG><a name="[101]"></a>return_to_menu</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mod_ethernet.o(i.return_to_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = return_to_menu &rArr; ETHERNET_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_ethernet.o(i.ETHERNET_CreatePage)
</UL>
<P><STRONG><a name="[108]"></a>wUpdateConnectionStatus</STRONG> (Thumb, 64 bytes, Stack size 72 bytes, mod_ethernet.o(i.wUpdateConnectionStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wUpdateConnectionStatus &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_ethernet.o(i.ETHERNET_CreatePage)
</UL>
<P><STRONG><a name="[2dc]"></a>ComputeImagePitch</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, image_bmp.o(i.ComputeImagePitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ComputeImagePitch
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Decode
</UL>

<P><STRONG><a name="[2e1]"></a>Display_Line</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, image_bmp.o(i.Display_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Display_Line
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Decode
</UL>

<P><STRONG><a name="[12b]"></a>Display_Line</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, image_jpeg.o(i.Display_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Display_Line
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_jpeg.o(i.JPEG_Decode)
</UL>
<P><STRONG><a name="[12c]"></a>Get_Scale</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, image_jpeg.o(i.Get_Scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Get_Scale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_jpeg.o(i.JPEG_Decode)
</UL>
<P><STRONG><a name="[12d]"></a>Set_Scale</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, image_jpeg.o(i.Set_Scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Set_Scale &rArr; LCD_SetDisplayWindow &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_jpeg.o(i.JPEG_Decode)
</UL>
<P><STRONG><a name="[323]"></a>Check_DefaultPath</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mod_image.o(i.Check_DefaultPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Check_DefaultPath &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_GetDefaultDirectory
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
</UL>

<P><STRONG><a name="[127]"></a>ClearCameraBackgound</STRONG> (Thumb, 278 bytes, Stack size 144 bytes, mod_image.o(i.ClearCameraBackgound))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140<LI>Call Chain = ClearCameraBackgound &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_UnRegisterClickHandler
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_SetDefaultSize
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_Decode
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayImageLabel
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(i.IMAGE_CreatePage)
</UL>
<P><STRONG><a name="[32a]"></a>ClearImageBackgound</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mod_image.o(i.ClearImageBackgound))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ClearImageBackgound &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_previous_file
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_next_file
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageDirectBackgound
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawImageBackgound
</UL>

<P><STRONG><a name="[121]"></a>DrawImageBackgound</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mod_image.o(i.DrawImageBackgound))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140<LI>Call Chain = DrawImageBackgound &rArr; IMAGE_StartBrowser &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_StartBrowser
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearImageBackgound
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_SetDefaultSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(i.IMAGE_CreatePage)
</UL>
<P><STRONG><a name="[119]"></a>HandleImageSize</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, mod_image.o(i.HandleImageSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004<LI>Call Chain = HandleImageSize &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Clear
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_SetDefaultSize
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_Enlarge
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_Decode
</UL>
<BR>[Address Reference Count : 3]<UL><LI> mod_image.o(i.IMAGE_CameraView)
<LI> mod_image.o(i.IMAGE_CreatePage)
<LI> mod_image.o(i.ImageDirectBackgound)
</UL>
<P><STRONG><a name="[3fc]"></a>IMAGE_BuildCameraList</STRONG> (Thumb, 194 bytes, Stack size 88 bytes, mod_image.o(i.IMAGE_BuildCameraList))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004<LI>Call Chain = IMAGE_BuildCameraList &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_filename_ext
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CameraView
</UL>

<P><STRONG><a name="[3fe]"></a>IMAGE_BuildList</STRONG> (Thumb, 184 bytes, Stack size 88 bytes, mod_image.o(i.IMAGE_BuildList))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004<LI>Call Chain = IMAGE_BuildList &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_filename_ext
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
</UL>

<P><STRONG><a name="[401]"></a>IMAGE_CreatePage</STRONG> (Thumb, 1958 bytes, Stack size 184 bytes, mod_image.o(i.IMAGE_CreatePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1188<LI>Call Chain = IMAGE_CreatePage &rArr; IMAGE_BuildList &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_UnRegisterClickHandler
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_RegisterClickHandler
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetBackColor
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_PageObj
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewLabel
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewIcon
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewButton
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetPageHeader
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetMenuItem
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetChecked
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewComboBoxGrp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddComboOption
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewCheckbox
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_GetDefaultDirectory
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_BuildList
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_DefaultPath
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewRadioButtonGrp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CameraView
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SwitchPage
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_DirectEx
</UL>

<P><STRONG><a name="[402]"></a>IMAGE_GetDefaultDirectory</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mod_image.o(i.IMAGE_GetDefaultDirectory))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IMAGE_GetDefaultDirectory &rArr; Check_DefaultPath &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_DefaultPath
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
</UL>

<P><STRONG><a name="[1e]"></a>IMAGE_Media_changed</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mod_image.o(i.IMAGE_Media_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212<LI>Call Chain = IMAGE_Media_changed &rArr; IMAGE_SwitchPage &rArr; IMAGE_CreatePage &rArr; IMAGE_BuildList &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_UnRegisterClickHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct_camera
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(.data)
</UL>
<P><STRONG><a name="[378]"></a>IMAGE_StartBrowser</STRONG> (Thumb, 206 bytes, Stack size 136 bytes, mod_image.o(i.IMAGE_StartBrowser))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132<LI>Call Chain = IMAGE_StartBrowser &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_Decode
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayImageLabel
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawImageBackgound
</UL>

<P><STRONG><a name="[1c]"></a>IMAGE_Startup</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mod_image.o(i.IMAGE_Startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212<LI>Call Chain = IMAGE_Startup &rArr; IMAGE_SwitchPage &rArr; IMAGE_CreatePage &rArr; IMAGE_BuildList &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SwitchPage
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_SetDefaultSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(.data)
</UL>
<P><STRONG><a name="[405]"></a>IMAGE_SwitchPage</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, mod_image.o(i.IMAGE_SwitchPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1204<LI>Call Chain = IMAGE_SwitchPage &rArr; IMAGE_CreatePage &rArr; IMAGE_BuildList &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPage
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreatePage
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_menu
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_effects
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_browser
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_settings
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_image_effects
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_browser
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Startup
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Media_changed
</UL>

<P><STRONG><a name="[125]"></a>ImageDirectBackgound</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, mod_image.o(i.ImageDirectBackgound))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012<LI>Call Chain = ImageDirectBackgound &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_UnRegisterClickHandler
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_RegisterClickHandler
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearImageBackgound
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_SetDefaultSize
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_Decode
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayImageLabel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(i.IMAGE_CreatePage)
</UL>
<P><STRONG><a name="[1d]"></a>Image_background</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mod_image.o(i.Image_background))
<BR><BR>[Stack]<UL><LI>Max Depth = 1148<LI>Call Chain = Image_background &rArr; goto_next_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_next_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(.data)
</UL>
<P><STRONG><a name="[123]"></a>Sel_folder</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mod_image.o(i.Sel_folder))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068<LI>Call Chain = Sel_folder &rArr; FILMGR_DirectEx &rArr; FILEMGR_CreatePage &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILMGR_DirectEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(i.IMAGE_CreatePage)
</UL>
<P><STRONG><a name="[13c]"></a>Update_folder</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mod_image.o(i.Update_folder))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Update_folder &rArr; RefreshLabel &rArr; Set_Label &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLabel
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(i.Sel_folder)
</UL>
<P><STRONG><a name="[11a]"></a>goto_browser</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mod_image.o(i.goto_browser))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212<LI>Call Chain = goto_browser &rArr; IMAGE_SwitchPage &rArr; IMAGE_CreatePage &rArr; IMAGE_BuildList &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(i.IMAGE_CreatePage)
</UL>
<P><STRONG><a name="[11b]"></a>goto_image_effects</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mod_image.o(i.goto_image_effects))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212<LI>Call Chain = goto_image_effects &rArr; IMAGE_SwitchPage &rArr; IMAGE_CreatePage &rArr; IMAGE_BuildList &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(i.IMAGE_CreatePage)
</UL>
<P><STRONG><a name="[11f]"></a>goto_next_file</STRONG> (Thumb, 244 bytes, Stack size 144 bytes, mod_image.o(i.goto_next_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140<LI>Call Chain = goto_next_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Clear
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearImageBackgound
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_IsSmall
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_Decode
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayImageLabel
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_background
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(i.IMAGE_CreatePage)
</UL>
<P><STRONG><a name="[120]"></a>goto_previous_file</STRONG> (Thumb, 244 bytes, Stack size 144 bytes, mod_image.o(i.goto_previous_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140<LI>Call Chain = goto_previous_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Clear
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearImageBackgound
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_IsSmall
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_Decode
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayImageLabel
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(i.IMAGE_CreatePage)
</UL>
<P><STRONG><a name="[11c]"></a>goto_settings</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mod_image.o(i.goto_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212<LI>Call Chain = goto_settings &rArr; IMAGE_SwitchPage &rArr; IMAGE_CreatePage &rArr; IMAGE_BuildList &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(i.IMAGE_CreatePage)
</UL>
<P><STRONG><a name="[11e]"></a>return_from_browser</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mod_image.o(i.return_from_browser))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212<LI>Call Chain = return_from_browser &rArr; IMAGE_SwitchPage &rArr; IMAGE_CreatePage &rArr; IMAGE_BuildList &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_UnRegisterClickHandler
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(i.IMAGE_CreatePage)
</UL>
<P><STRONG><a name="[124]"></a>return_from_direct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mod_image.o(i.return_from_direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = return_from_direct &rArr; FILE_MGR_RefreshScroll &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_UnRegisterClickHandler
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPage
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_MGR_RefreshScroll
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Media_changed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(i.IMAGE_CreatePage)
</UL>
<P><STRONG><a name="[126]"></a>return_from_direct_camera</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mod_image.o(i.return_from_direct_camera))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = return_from_direct_camera &rArr; RefreshPage &rArr; ShowPage &rArr; GL_Clear &rArr; LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_UnRegisterClickHandler
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPage
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Media_changed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(i.IMAGE_CreatePage)
</UL>
<P><STRONG><a name="[128]"></a>return_from_effects</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mod_image.o(i.return_from_effects))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212<LI>Call Chain = return_from_effects &rArr; IMAGE_SwitchPage &rArr; IMAGE_CreatePage &rArr; IMAGE_BuildList &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SwitchPage
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadioOptionChecked
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(i.IMAGE_CreatePage)
</UL>
<P><STRONG><a name="[122]"></a>return_from_settings</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mod_image.o(i.return_from_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212<LI>Call Chain = return_from_settings &rArr; IMAGE_SwitchPage &rArr; IMAGE_CreatePage &rArr; IMAGE_BuildList &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_IsChecked
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComboOptionActive
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(i.IMAGE_CreatePage)
</UL>
<P><STRONG><a name="[11d]"></a>return_to_menu</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mod_image.o(i.return_to_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212<LI>Call Chain = return_to_menu &rArr; IMAGE_SwitchPage &rArr; IMAGE_CreatePage &rArr; IMAGE_BuildList &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_image.o(i.IMAGE_CreatePage)
</UL>
<P><STRONG><a name="[10a]"></a>EnableBackgroundMode</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mod_system.o(i.EnableBackgroundMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = EnableBackgroundMode &rArr; SYSTEM_INFO_SwitchPage &rArr; SYSTEM_INFO_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPageControl
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetChecked
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_IsChecked
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_settings
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_SwitchPage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mod_system.o(i.SYSTEM_INFO_CreatePage)
<LI> mod_system.o(i.EnableDistantControl)
</UL>
<P><STRONG><a name="[136]"></a>EnableDistantControl</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, mod_system.o(i.EnableDistantControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = EnableDistantControl &rArr; SYSTEM_INFO_SwitchPage &rArr; SYSTEM_INFO_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPageControl
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetChecked
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_IsChecked
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewCheckbox
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_settings
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_system.o(i.SYSTEM_INFO_CreatePage)
</UL>
<P><STRONG><a name="[3c2]"></a>Free_USB_OTG_FS_Resources</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mod_system.o(i.Free_USB_OTG_FS_Resources))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Free_USB_OTG_FS_Resources &rArr; f_mount &rArr; ff_cre_syncobj &rArr; xQueueCreateMutex &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopHost
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_upgrade
</UL>

<P><STRONG><a name="[49f]"></a>SYSTEM_INFO_CreatePage</STRONG> (Thumb, 2082 bytes, Stack size 160 bytes, mod_system.o(i.SYSTEM_INFO_CreatePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = SYSTEM_INFO_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_GetParam
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetBackColor
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_PageObj
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewLabel
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewIcon
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewButton
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetPageHeader
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetMenuItem
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetChecked
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_IsChecked
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewComboBoxGrp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddComboOption
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewCheckbox
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_SwitchPage
</UL>

<P><STRONG><a name="[1f]"></a>SYSTEM_INFO_Startup</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mod_system.o(i.SYSTEM_INFO_Startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = SYSTEM_INFO_Startup &rArr; SYSTEM_INFO_SwitchPage &rArr; SYSTEM_INFO_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_system.o(.data)
</UL>
<P><STRONG><a name="[3af]"></a>SYSTEM_INFO_SwitchPage</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, mod_system.o(i.SYSTEM_INFO_SwitchPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = SYSTEM_INFO_SwitchPage &rArr; SYSTEM_INFO_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPage
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_CreatePage
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_menu
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_upgrade
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_system_info
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_dcontrol_from_errorpage
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_bkgnd_from_errorpage
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_upgrade
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_system_info
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_Settings
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_Startup
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDistantControl
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableBackgroundMode
</UL>

<P><STRONG><a name="[132]"></a>goto_Settings</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mod_system.o(i.goto_Settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = goto_Settings &rArr; SYSTEM_INFO_SwitchPage &rArr; SYSTEM_INFO_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_system.o(i.SYSTEM_INFO_CreatePage)
</UL>
<P><STRONG><a name="[130]"></a>goto_system_info</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mod_system.o(i.goto_system_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = goto_system_info &rArr; SYSTEM_INFO_SwitchPage &rArr; SYSTEM_INFO_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_system.o(i.SYSTEM_INFO_CreatePage)
</UL>
<P><STRONG><a name="[131]"></a>goto_upgrade</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mod_system.o(i.goto_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = goto_upgrade &rArr; SYSTEM_INFO_SwitchPage &rArr; SYSTEM_INFO_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_system.o(i.SYSTEM_INFO_CreatePage)
</UL>
<P><STRONG><a name="[139]"></a>return_bkgnd_from_errorpage</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mod_system.o(i.return_bkgnd_from_errorpage))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = return_bkgnd_from_errorpage &rArr; SYSTEM_INFO_SwitchPage &rArr; SYSTEM_INFO_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_system.o(i.SYSTEM_INFO_CreatePage)
</UL>
<P><STRONG><a name="[13a]"></a>return_dcontrol_from_errorpage</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mod_system.o(i.return_dcontrol_from_errorpage))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = return_dcontrol_from_errorpage &rArr; SYSTEM_INFO_SwitchPage &rArr; SYSTEM_INFO_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_system.o(i.SYSTEM_INFO_CreatePage)
</UL>
<P><STRONG><a name="[135]"></a>return_from_settings</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mod_system.o(i.return_from_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = return_from_settings &rArr; SYSTEM_INFO_SwitchPage &rArr; SYSTEM_INFO_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_settings
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_system.o(i.SYSTEM_INFO_CreatePage)
</UL>
<P><STRONG><a name="[134]"></a>return_from_system_info</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mod_system.o(i.return_from_system_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = return_from_system_info &rArr; SYSTEM_INFO_SwitchPage &rArr; SYSTEM_INFO_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_system.o(i.SYSTEM_INFO_CreatePage)
</UL>
<P><STRONG><a name="[137]"></a>return_from_upgrade</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mod_system.o(i.return_from_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = return_from_upgrade &rArr; SYSTEM_INFO_SwitchPage &rArr; SYSTEM_INFO_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_system.o(i.SYSTEM_INFO_CreatePage)
</UL>
<P><STRONG><a name="[133]"></a>return_to_menu</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mod_system.o(i.return_to_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = return_to_menu &rArr; SYSTEM_INFO_SwitchPage &rArr; SYSTEM_INFO_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_INFO_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_system.o(i.SYSTEM_INFO_CreatePage)
</UL>
<P><STRONG><a name="[3ae]"></a>save_settings</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, mod_system.o(i.save_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = save_settings &rArr; MOD_SetParam &rArr; RTC_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOD_SetParam
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_IsChecked
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_settings
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDistantControl
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableBackgroundMode
</UL>

<P><STRONG><a name="[138]"></a>start_upgrade</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, mod_system.o(i.start_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = start_upgrade &rArr; Free_USB_OTG_FS_Resources &rArr; f_mount &rArr; ff_cre_syncobj &rArr; xQueueCreateMutex &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetFont
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawButtonBMP
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Delay
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Clear
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free_USB_OTG_FS_Resources
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_system.o(i.SYSTEM_INFO_CreatePage)
</UL>
<P><STRONG><a name="[307]"></a>CONSOLE_CreatePage</STRONG> (Thumb, 636 bytes, Stack size 24 bytes, mod_console.o(i.CONSOLE_CreatePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CONSOLE_CreatePage &rArr; GL_SetPageHeader &rArr; AddPageControlObj &rArr;  AddPageControlObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_PageObj
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewLabel
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewButton
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetPageHeader
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_SwitchPage
</UL>

<P><STRONG><a name="[27]"></a>CONSOLE_Startup</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mod_console.o(i.CONSOLE_Startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CONSOLE_Startup &rArr; CONSOLE_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_console.o(.data)
</UL>
<P><STRONG><a name="[30a]"></a>CONSOLE_SwitchPage</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mod_console.o(i.CONSOLE_SwitchPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CONSOLE_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPage
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_CreatePage
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_menu
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Startup
</UL>

<P><STRONG><a name="[308]"></a>ClearTextZone</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mod_console.o(i.ClearTextZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ClearTextZone &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Refresh
</UL>

<P><STRONG><a name="[ea]"></a>DrawConsoleBackground</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, mod_console.o(i.DrawConsoleBackground))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DrawConsoleBackground &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_DrawRect
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_AddScroll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_console.o(i.CONSOLE_CreatePage)
</UL>
<P><STRONG><a name="[ec]"></a>ScrollDown</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mod_console.o(i.ScrollDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ScrollDown &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateScrollPosition
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Refresh
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mod_console.o(i.DrawConsoleBackground)
<LI> mod_console.o(i.CONSOLE_Refresh)
</UL>
<P><STRONG><a name="[ed]"></a>ScrollUp</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, mod_console.o(i.ScrollUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ScrollUp &rArr; CONSOLE_Refresh &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_UpdateScrollPosition
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Refresh
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mod_console.o(i.DrawConsoleBackground)
<LI> mod_console.o(i.CONSOLE_Refresh)
</UL>
<P><STRONG><a name="[e9]"></a>return_to_menu</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mod_console.o(i.return_to_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = return_to_menu &rArr; CONSOLE_SwitchPage &rArr; GL_ShowMainMenu &rArr; GL_ShowUtilitiesGroup &rArr; GL_UpdateGroupSelectionLabel &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_SwitchPage
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_ScrollReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_console.o(i.CONSOLE_CreatePage)
</UL>
<P><STRONG><a name="[2af]"></a>Add_CtxMenu</STRONG> (Thumb, 746 bytes, Stack size 16 bytes, mod_filemgr.o(i.Add_CtxMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Add_CtxMenu &rArr; GL_LCD_DrawRect &rArr; GL_DrawLine &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_filename_ext
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPageControl
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewButton
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_DrawRect
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLabelColor
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Directory
</UL>

<P><STRONG><a name="[d6]"></a>Cancel_ctx_menu</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mod_filemgr.o(i.Cancel_ctx_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Cancel_ctx_menu &rArr; FILE_MGR_RefreshScroll &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_MGR_RefreshScroll
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_CtxMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_filemgr.o(i.Add_CtxMenu)
</UL>
<P><STRONG><a name="[d5]"></a>Delete_Selected_Item</STRONG> (Thumb, 164 bytes, Stack size 136 bytes, mod_filemgr.o(i.Delete_Selected_Item))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140<LI>Call Chain = Delete_Selected_Item &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParentDir
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_MGR_RefreshScroll
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_MGR_KillScroll
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_OldList
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_FileList
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Files
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mod_filemgr.o(i.Display_Files)
<LI> mod_filemgr.o(i.Add_CtxMenu)
</UL>
<P><STRONG><a name="[372]"></a>Display_Files</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, mod_filemgr.o(i.Display_Files))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Display_Files &rArr; AddSmallIconControlObj &rArr; NewLabel &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSmallIconControlObj
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_CreatePage
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_SubFolder
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Directory
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Previous
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Next
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Selected_Item
</UL>

<P><STRONG><a name="[10b]"></a>Display_Next</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mod_filemgr.o(i.Display_Next))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Display_Next &rArr; Display_Files &rArr; AddSmallIconControlObj &rArr; NewLabel &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_MGR_RefreshScroll
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_OldList
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_CtxMenu
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_FileList
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Files
</UL>
<BR>[Address Reference Count : 4]<UL><LI> mod_filemgr.o(i.Explore_Directory)
<LI> mod_filemgr.o(i.Explore_SubFolder)
<LI> mod_filemgr.o(i.FILEMGR_CreatePage)
<LI> mod_filemgr.o(i.FILE_MGR_RefreshScroll)
</UL>
<P><STRONG><a name="[10c]"></a>Display_Previous</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mod_filemgr.o(i.Display_Previous))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Display_Previous &rArr; Display_Files &rArr; AddSmallIconControlObj &rArr; NewLabel &rArr; GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_MGR_RefreshScroll
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_OldList
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_CtxMenu
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_FileList
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Files
</UL>
<BR>[Address Reference Count : 4]<UL><LI> mod_filemgr.o(i.Explore_Directory)
<LI> mod_filemgr.o(i.Explore_SubFolder)
<LI> mod_filemgr.o(i.FILEMGR_CreatePage)
<LI> mod_filemgr.o(i.FILE_MGR_RefreshScroll)
</UL>
<P><STRONG><a name="[fd]"></a>Explore_Directory</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, mod_filemgr.o(i.Explore_Directory))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076<LI>Call Chain = Explore_Directory &rArr; return_from_usb_drive &rArr; FILEMGR_SwitchPage &rArr; FILEMGR_CreatePage &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParentDir
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_AddScroll
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_GetLastEvent
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_usb_drive
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_msd_drive
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_OldList
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_FileList
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_SubFolder
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Files
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_CtxMenu
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_filemgr.o(i.Display_Files)
</UL>
<P><STRONG><a name="[36f]"></a>Explore_Disk</STRONG> (Thumb, 342 bytes, Stack size 88 bytes, mod_filemgr.o(i.Explore_Disk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004<LI>Call Chain = Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_filename_ext
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sort_Files
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_CreatePage
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_SubFolder
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Directory
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Selected_Item
</UL>

<P><STRONG><a name="[d8]"></a>Explore_SubFolder</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, mod_filemgr.o(i.Explore_SubFolder))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020<LI>Call Chain = Explore_SubFolder &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_AddScroll
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_OldList
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_CtxMenu
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_FileList
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Files
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Directory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_filemgr.o(i.Add_CtxMenu)
</UL>
<P><STRONG><a name="[3bc]"></a>FILEMGR_CreatePage</STRONG> (Thumb, 720 bytes, Stack size 32 bytes, mod_filemgr.o(i.FILEMGR_CreatePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036<LI>Call Chain = FILEMGR_CreatePage &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetBackColor
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_PageObj
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewLabel
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewIcon
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewButton
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPageControlObj
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetPageHeader
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_AddScroll
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddIconControlObj
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Files
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILMGR_DirectEx
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_SwitchPage
</UL>

<P><STRONG><a name="[28]"></a>FILEMGR_Startup</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mod_filemgr.o(i.FILEMGR_Startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = FILEMGR_Startup &rArr; FILEMGR_SwitchPage &rArr; FILEMGR_CreatePage &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_filemgr.o(.data)
</UL>
<P><STRONG><a name="[3bd]"></a>FILEMGR_SwitchPage</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, mod_filemgr.o(i.FILEMGR_SwitchPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052<LI>Call Chain = FILEMGR_SwitchPage &rArr; FILEMGR_CreatePage &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPage
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowMainMenu
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_CreatePage
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_whole_drive
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_menu
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_usb_drive
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_msd_drive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_usb_drive
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_msd_drive
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_to_drives
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_MGR_Media_changed
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_Startup
</UL>

<P><STRONG><a name="[29]"></a>FILE_MGR_Media_changed</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mod_filemgr.o(i.FILE_MGR_Media_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = FILE_MGR_Media_changed &rArr; FILEMGR_SwitchPage &rArr; FILEMGR_CreatePage &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_filemgr.o(.data)
</UL>
<P><STRONG><a name="[d4]"></a>Open_Selected_Item</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, mod_filemgr.o(i.Open_Selected_Item))
<BR><BR>[Stack]<UL><LI>Max Depth = 1252<LI>Call Chain = Open_Selected_Item &rArr; AUDIO_DirectEx &rArr; AUDIO_AddFileToPlaylist &rArr; AUDIO_Play &rArr; AudioPlayer_Play &rArr; AudioPlayer_Open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_filename_ext
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParentDir
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_MGR_RefreshScroll
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_DirectEx
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_CtxMenu
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_DirectEx
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_filemgr.o(i.Add_CtxMenu)
</UL>
<P><STRONG><a name="[112]"></a>Refresh_CustomDraw</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mod_filemgr.o(i.Refresh_CustomDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Refresh_CustomDraw &rArr; FILE_MGR_RefreshScroll &rArr; GL_AddScroll &rArr; GL_UpdateScrollPosition &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_MGR_RefreshScroll
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_CtxMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_filemgr.o(i.FILEMGR_CreatePage)
</UL>
<P><STRONG><a name="[373]"></a>Refresh_FileList</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, mod_filemgr.o(i.Refresh_FileList))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Refresh_FileList &rArr; GL_LCD_FillRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPageControl
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_SubFolder
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Directory
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Previous
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Next
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Selected_Item
</UL>

<P><STRONG><a name="[321]"></a>Remove_CtxMenu</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mod_filemgr.o(i.Remove_CtxMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Remove_CtxMenu &rArr; ChangeLabelColor &rArr; RefreshPageControl
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLabelColor
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_to_drives
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_CustomDraw
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Selected_Item
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_SubFolder
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Previous
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cancel_ctx_menu
</UL>

<P><STRONG><a name="[371]"></a>Remove_OldList</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, mod_filemgr.o(i.Remove_OldList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Remove_OldList &rArr; DestroyPageControl &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPageControl
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_SubFolder
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Directory
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Previous
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Next
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Selected_Item
</UL>

<P><STRONG><a name="[d7]"></a>Return_Selected_Item</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mod_filemgr.o(i.Return_Selected_Item))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Return_Selected_Item &rArr; return_from_direct &rArr; RefreshPage &rArr; ShowPage &rArr; GL_Clear &rArr; LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mod_filemgr.o(i.Display_Files)
<LI> mod_filemgr.o(i.Add_CtxMenu)
</UL>
<P><STRONG><a name="[3bb]"></a>Sort_Files</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, mod_filemgr.o(i.Sort_Files))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sort_Files &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
</UL>

<P><STRONG><a name="[111]"></a>back_to_drives</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mod_filemgr.o(i.back_to_drives))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = back_to_drives &rArr; FILEMGR_SwitchPage &rArr; FILEMGR_CreatePage &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_CtxMenu
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_filemgr.o(i.FILEMGR_CreatePage)
</UL>
<P><STRONG><a name="[10e]"></a>goto_msd_drive</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mod_filemgr.o(i.goto_msd_drive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = goto_msd_drive &rArr; FILEMGR_SwitchPage &rArr; FILEMGR_CreatePage &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_filemgr.o(i.FILEMGR_CreatePage)
</UL>
<P><STRONG><a name="[10f]"></a>goto_usb_drive</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mod_filemgr.o(i.goto_usb_drive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = goto_usb_drive &rArr; FILEMGR_SwitchPage &rArr; FILEMGR_CreatePage &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_filemgr.o(i.FILEMGR_CreatePage)
</UL>
<P><STRONG><a name="[10d]"></a>return_from_direct</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, mod_filemgr.o(i.return_from_direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = return_from_direct &rArr; RefreshPage &rArr; ShowPage &rArr; GL_Clear &rArr; LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyPage
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPage
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_menu
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Selected_Item
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_MGR_Media_changed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_filemgr.o(i.FILEMGR_CreatePage)
</UL>
<P><STRONG><a name="[3b8]"></a>return_from_msd_drive</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mod_filemgr.o(i.return_from_msd_drive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = return_from_msd_drive &rArr; FILEMGR_SwitchPage &rArr; FILEMGR_CreatePage &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_SwitchPage
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Directory
</UL>

<P><STRONG><a name="[3b7]"></a>return_from_usb_drive</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mod_filemgr.o(i.return_from_usb_drive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = return_from_usb_drive &rArr; FILEMGR_SwitchPage &rArr; FILEMGR_CreatePage &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_SwitchPage
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Directory
</UL>

<P><STRONG><a name="[110]"></a>return_to_menu</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mod_filemgr.o(i.return_to_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = return_to_menu &rArr; FILEMGR_SwitchPage &rArr; FILEMGR_CreatePage &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_from_direct
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_filemgr.o(i.FILEMGR_CreatePage)
</UL>
<P><STRONG><a name="[113]"></a>return_to_whole_drive</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mod_filemgr.o(i.return_to_whole_drive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = return_to_whole_drive &rArr; FILEMGR_SwitchPage &rArr; FILEMGR_CreatePage &rArr; Explore_Disk &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILEMGR_SwitchPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_filemgr.o(i.FILEMGR_CreatePage)
</UL>
<P><STRONG><a name="[3cd]"></a>CallEvent</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, graphicobject.o(i.CallEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CallEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Background_Handler
</UL>

<P><STRONG><a name="[30c]"></a>CallPreEvents</STRONG> (Thumb, 886 bytes, Stack size 56 bytes, graphicobject.o(i.CallPreEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = CallPreEvents &rArr; GL_DrawButtonBMP &rArr; GL_SetDisplayWindow &rArr; LCD_SetDisplayWindow &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawButtonBMP
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Background_Handler
</UL>

<P><STRONG><a name="[449]"></a>Create_Button</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, graphicobject.o(i.Create_Button))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewButton
</UL>

<P><STRONG><a name="[44a]"></a>Create_Checkbox</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, graphicobject.o(i.Create_Checkbox))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewCheckbox
</UL>

<P><STRONG><a name="[44b]"></a>Create_ComboBoxGrp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, graphicobject.o(i.Create_ComboBoxGrp))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewComboBoxGrp
</UL>

<P><STRONG><a name="[2a8]"></a>Create_ComboBoxOption</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, graphicobject.o(i.Create_ComboBoxOption))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddComboOption
</UL>

<P><STRONG><a name="[44c]"></a>Create_Icon</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, graphicobject.o(i.Create_Icon))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewIcon
</UL>

<P><STRONG><a name="[44d]"></a>Create_Label</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, graphicobject.o(i.Create_Label))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewLabel
</UL>

<P><STRONG><a name="[44e]"></a>Create_RadioButtonGrp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, graphicobject.o(i.Create_RadioButtonGrp))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewRadioButtonGrp
</UL>

<P><STRONG><a name="[2ac]"></a>Create_RadioButtonOption</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, graphicobject.o(i.Create_RadioButtonOption))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRadioOption
</UL>

<P><STRONG><a name="[350]"></a>Create_Slidebar</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, graphicobject.o(i.Create_Slidebar))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Create_Slidebar &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewSlidebar
</UL>

<P><STRONG><a name="[3d6]"></a>GL_DrawFilledRectangle</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, graphicobject.o(i.GL_DrawFilledRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GL_DrawFilledRectangle &rArr; GL_DrawLine &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistogramVisible
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComboBoxVisible
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawObliqueLine
</UL>

<P><STRONG><a name="[3d8]"></a>GL_DrawObliqueLine</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, graphicobject.o(i.GL_DrawObliqueLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GL_DrawObliqueLine &rArr; GL_DrawFilledRectangle &rArr; GL_DrawLine &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawFilledRectangle
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGraphChartVisible
</UL>

<P><STRONG><a name="[3da]"></a>GL_DrawRectangle</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, graphicobject.o(i.GL_DrawRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GL_DrawRectangle &rArr; GL_DrawLine &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlidebarVisible
</UL>

<P><STRONG><a name="[2a7]"></a>GL_SetStringFieldValue</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, graphicobject.o(i.GL_SetStringFieldValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GL_SetStringFieldValue &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Label
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewLabel
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewButton
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddComboOption
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewSlidebar
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewCheckbox
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRadioOption
</UL>

<P><STRONG><a name="[f2]"></a>GetObjCoordinates</STRONG> (Thumb, 462 bytes, Stack size 24 bytes, graphicobject.o(i.GetObjCoordinates))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetObjCoordinates
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicobject.o(i.Create_PageObj)
</UL>
<P><STRONG><a name="[3cb]"></a>GetObjSize</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, graphicobject.o(i.GetObjSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetObjSize
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Background_Handler
</UL>

<P><STRONG><a name="[cc]"></a>SetButtonVisible</STRONG> (Thumb, 512 bytes, Stack size 56 bytes, graphicobject.o(i.SetButtonVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SetButtonVisible &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetBackColor
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetFont
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawButtonBMP
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicobject.o(i.AddPageControlObj)
</UL>
<P><STRONG><a name="[cf]"></a>SetCheckboxVisible</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, graphicobject.o(i.SetCheckboxVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SetCheckboxVisible &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetFont
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawButtonBMP
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicobject.o(i.AddPageControlObj)
</UL>
<P><STRONG><a name="[cb]"></a>SetComboBoxVisible</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, graphicobject.o(i.SetComboBoxVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SetComboBoxVisible &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetBackColor
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetFont
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawButtonBMP
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawFilledRectangle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicobject.o(i.AddPageControlObj)
</UL>
<P><STRONG><a name="[d3]"></a>SetGraphChartVisible</STRONG> (Thumb, 5072 bytes, Stack size 184 bytes, graphicobject.o(i.SetGraphChartVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SetGraphChartVisible &rArr; GL_DrawObliqueLine &rArr; GL_DrawFilledRectangle &rArr; GL_DrawLine &rArr; LCD_DrawLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetFont
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_Clear
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDisplayWindow
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawObliqueLine
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicobject.o(i.AddPageControlObj)
</UL>
<P><STRONG><a name="[d2]"></a>SetHistogramVisible</STRONG> (Thumb, 1674 bytes, Stack size 136 bytes, graphicobject.o(i.SetHistogramVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SetHistogramVisible &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetFont
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawFilledRectangle
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicobject.o(i.AddPageControlObj)
</UL>
<P><STRONG><a name="[d0]"></a>SetIconVisible</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, graphicobject.o(i.SetIconVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SetIconVisible &rArr; GL_DrawButtonBMP &rArr; GL_SetDisplayWindow &rArr; LCD_SetDisplayWindow &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawButtonBMP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicobject.o(i.AddPageControlObj)
</UL>
<P><STRONG><a name="[ca]"></a>SetLabelVisible</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, graphicobject.o(i.SetLabelVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SetLabelVisible &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetFont
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintStringLine
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Change_Direction
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicobject.o(i.AddPageControlObj)
</UL>
<P><STRONG><a name="[f0]"></a>SetPage</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, graphicobject.o(i.SetPage))
<BR>[Address Reference Count : 1]<UL><LI> graphicobject.o(i.Create_PageObj)
</UL>
<P><STRONG><a name="[ce]"></a>SetRadioButtonVisible</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, graphicobject.o(i.SetRadioButtonVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SetRadioButtonVisible &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetFont
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawButtonBMP
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicobject.o(i.AddPageControlObj)
</UL>
<P><STRONG><a name="[d1]"></a>SetSlidebarVisible</STRONG> (Thumb, 1016 bytes, Stack size 64 bytes, graphicobject.o(i.SetSlidebarVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SetSlidebarVisible &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetFont
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawButtonBMP
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintStringLine
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawColorBMP
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Change_Direction
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlidebarCursorPreDraw
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawRectangle
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicobject.o(i.AddPageControlObj)
</UL>
<P><STRONG><a name="[cd]"></a>SetSwitchVisible</STRONG> (Thumb, 480 bytes, Stack size 56 bytes, graphicobject.o(i.SetSwitchVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SetSwitchVisible &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetBackColor
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetTextColor
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetFont
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawButtonBMP
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DisplayAdjStringLine
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicobject.o(i.AddPageControlObj)
</UL>
<P><STRONG><a name="[4ac]"></a>SlidebarCursorPreDraw</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, graphicobject.o(i.SlidebarCursorPreDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SlidebarCursorPreDraw &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlidebarVisible
</UL>

<P><STRONG><a name="[3d4]"></a>BmpBuffer32BitRead</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lcdhal.o(i.BmpBuffer32BitRead))
<BR><BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawColorBMP
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBMP
</UL>

<P><STRONG><a name="[2b]"></a>USBD_DataInStage</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_DataInStage &rArr; USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>USBD_DataOutStage</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_DataOutStage &rArr; USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>USBD_DevConnected</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_DevConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_DevConnected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>USBD_DevDisconnected</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_DevDisconnected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>USBD_IsoINIncomplete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoINIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>USBD_IsoOUTIncomplete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoOUTIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>USBD_Reset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_Reset &rArr; DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>USBD_Resume</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[4bd]"></a>USBD_RunTestMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[2d]"></a>USBD_SOF</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SOF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>USBD_SetupStage</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>USBD_Suspend</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[4b6]"></a>USBD_ClrFeature</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[4be]"></a>USBD_GetConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[4bf]"></a>USBD_GetDescriptor</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[4c2]"></a>USBD_GetLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_req.o(i.USBD_GetLen))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>

<P><STRONG><a name="[4c0]"></a>USBD_GetStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[4cc]"></a>USBD_SetAddress</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_SetAddress
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[4ce]"></a>USBD_SetConfig</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetCfg
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrCfg
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[4d1]"></a>USBD_SetFeature</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[51a]"></a>USB_OTG_CoreReset</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[51f]"></a>USB_OTG_EnableCommonInt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EnableCommonInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
</UL>

<P><STRONG><a name="[35b]"></a>DCD_HandleEnumDone_ISR</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleEnumDone_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_HandleEnumDone_ISR &rArr; USB_OTG_EP0Activate
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetDeviceSpeed
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[35e]"></a>DCD_HandleInEP_ISR</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleInEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_ReadDevInEP
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllInEPItr
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[363]"></a>DCD_HandleOutEP_ISR</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleOutEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCD_HandleOutEP_ISR &rArr; USB_OTG_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevOutEP_itr
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllOutEp_itr
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[4c5]"></a>DCD_HandleResume_ISR</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleResume_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleResume_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[366]"></a>DCD_HandleRxStatusQueueLevel_ISR</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleRxStatusQueueLevel_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_HandleRxStatusQueueLevel_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[4c7]"></a>DCD_HandleSof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleSof_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_HandleSof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[4c6]"></a>DCD_HandleUSBSuspend_ISR</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleUSBSuspend_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleUSBSuspend_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[368]"></a>DCD_HandleUsbReset_ISR</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, usb_dcd_int.o(i.DCD_HandleUsbReset_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[4c8]"></a>DCD_IsoINIncomplete_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_IsoINIncomplete_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_IsoINIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[4c9]"></a>DCD_IsoOUTIncomplete_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_IsoOUTIncomplete_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_IsoOUTIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[4cb]"></a>DCD_OTG_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_OTG_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_OTG_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[360]"></a>DCD_ReadDevInEP</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usb_dcd_int.o(i.DCD_ReadDevInEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DCD_ReadDevInEP
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[4ca]"></a>DCD_SessionRequest_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_SessionRequest_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_SessionRequest_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[362]"></a>DCD_WriteEmptyTxFifo</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, usb_dcd_int.o(i.DCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_EP1IN_ISR_Handler
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[50c]"></a>USB_OTG_USBH_handle_Disconnect_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_Disconnect_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_Disconnect_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[50d]"></a>USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[50a]"></a>USB_OTG_USBH_handle_hc_ISR</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHostAllChannels_intr
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[523]"></a>USB_OTG_USBH_handle_hc_n_In_ISR</STRONG> (Thumb, 1064 bytes, Stack size 40 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_In_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[524]"></a>USB_OTG_USBH_handle_hc_n_Out_ISR</STRONG> (Thumb, 976 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_Out_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_USBH_handle_hc_n_Out_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[508]"></a>USB_OTG_USBH_handle_nptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_nptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_USBH_handle_nptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[50b]"></a>USB_OTG_USBH_handle_port_ISR</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_port_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[509]"></a>USB_OTG_USBH_handle_ptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_ptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_USBH_handle_ptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[507]"></a>USB_OTG_USBH_handle_rx_qlvl_ISR</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_rx_qlvl_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_OTG_USBH_handle_rx_qlvl_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[506]"></a>USB_OTG_USBH_handle_sof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_sof_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_sof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[4f4]"></a>USBH_MSC_BOTReset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbh_msc_core.o(i.USBH_MSC_BOTReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_BOTReset &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[37]"></a>USBH_MSC_ClassRequest</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_msc_core.o(i.USBH_MSC_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_ClassRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[4f8]"></a>USBH_MSC_GETMaxLUN</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_msc_core.o(i.USBH_MSC_GETMaxLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_GETMaxLUN &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[38]"></a>USBH_MSC_Handle</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, usbh_msc_core.o(i.USBH_MSC_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USBH_MSC_Handle &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_TestUnitReady
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RequestSense
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity10
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ModeSense6
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ErrorHandle
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GETMaxLUN
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOTReset
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>USBH_MSC_InterfaceDeInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbh_msc_core.o(i.USBH_MSC_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_InterfaceDeInit &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>USBH_MSC_InterfaceInit</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, usbh_msc_core.o(i.USBH_MSC_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBH_MSC_InterfaceInit &rArr; USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[4ec]"></a>USBH_HandleEnum</STRONG> (Thumb, 476 bytes, Stack size 88 bytes, usbh_core.o(i.USBH_HandleEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[4d7]"></a>USBH_GetFreeChannel</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_GetFreeChannel))
<BR><BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>

<P><STRONG><a name="[4dd]"></a>USBH_SubmitSetupRequest</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_ioreq.o(i.USBH_SubmitSetupRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_SubmitSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[4e4]"></a>USBH_ParseCfgDesc</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, usbh_stdreq.o(i.USBH_ParseCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_ParseCfgDesc &rArr; USBH_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetNextDesc
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseInterfaceDesc
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseEPDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[4e6]"></a>USBH_ParseDevDesc</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_ParseDevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
</UL>

<P><STRONG><a name="[510]"></a>USBH_ParseEPDesc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_stdreq.o(i.USBH_ParseEPDesc))
<BR><BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[50f]"></a>USBH_ParseInterfaceDesc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_stdreq.o(i.USBH_ParseInterfaceDesc))
<BR><BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[4e8]"></a>USBH_ParseStringDesc</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, usbh_stdreq.o(i.USBH_ParseStringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
</UL>

<P><STRONG><a name="[3e]"></a>AudioCmd</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32_audio_in_if.o(i.AudioCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AudioCmd &rArr; STM32_AudioRec_Start &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_Stop
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_in_if.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>DeInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32_audio_in_if.o(i.DeInit))
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_in_if.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_audio_in_if.o(i.GetState))
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_in_if.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32_audio_in_if.o(i.Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Init &rArr; STM32_AudioRec_Init &rArr; STM32_AudioRec_ADC_Init &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_in_if.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>MuteCtl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_audio_in_if.o(i.MuteCtl))
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_in_if.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>OptionCtrl</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32_audio_in_if.o(i.OptionCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OptionCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_in_if.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>SetXferCpltCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_audio_in_if.o(i.SetXferCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_in_if.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>VolumeCtl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_audio_in_if.o(i.VolumeCtl))
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_in_if.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>AudioCmd</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, stm32_audio_out_if.o(i.AudioCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = AudioCmd &rArr; EVAL_AUDIO_Stop &rArr; Codec_Stop &rArr; IOE_WriteIOPin &rArr; I2C_WriteDeviceRegister &rArr; IOE_TimeoutUserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVAL_AUDIO_Stop
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVAL_AUDIO_PauseResume
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Play
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_out_if.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>DeInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32_audio_out_if.o(i.DeInit))
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_out_if.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_audio_out_if.o(i.GetState))
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_out_if.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>Init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, stm32_audio_out_if.o(i.Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Init &rArr; EVAL_AUDIO_Init &rArr; Codec_Init &rArr; Codec_VolumeCtrl &rArr; Codec_WriteRegister &rArr; Codec_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVAL_AUDIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_out_if.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>MuteCtl</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32_audio_out_if.o(i.MuteCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MuteCtl &rArr; EVAL_AUDIO_Mute &rArr; Codec_Mute &rArr; Codec_WriteRegister &rArr; Codec_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVAL_AUDIO_Mute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_out_if.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>OptionCtrl</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32_audio_out_if.o(i.OptionCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OptionCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_out_if.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>SetXferCpltCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_audio_out_if.o(i.SetXferCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_out_if.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>VolumeCtl</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32_audio_out_if.o(i.VolumeCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = VolumeCtl &rArr; EVAL_AUDIO_VolumeCtl &rArr; Codec_VolumeCtrl &rArr; Codec_WriteRegister &rArr; Codec_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVAL_AUDIO_VolumeCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_audio_out_if.o(.data)
</UL>
<P><STRONG><a name="[527]"></a>ReadUnit</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, wavprocess.o(i.ReadUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavProcess_ParseHeader
</UL>

<P><STRONG><a name="[526]"></a>WavProcess_ParseHeader</STRONG> (Thumb, 386 bytes, Stack size 24 bytes, wavprocess.o(i.WavProcess_ParseHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = WavProcess_ParseHeader &rArr; ReadUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavProcess_DecoderInit
</UL>

<P><STRONG><a name="[2d5]"></a>Codec_AudioInterface_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm324xg_audio_codec.o(i.Codec_AudioInterface_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Codec_AudioInterface_DeInit &rArr; SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_Stop
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_MAL_PauseResume
</UL>

<P><STRONG><a name="[338]"></a>Codec_CtrlInterface_Init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm324xg_audio_codec.o(i.Codec_CtrlInterface_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Codec_CtrlInterface_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Init
</UL>

<P><STRONG><a name="[33c]"></a>Codec_GPIO_Init</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm324xg_audio_codec.o(i.Codec_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Codec_GPIO_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Init
</UL>

<P><STRONG><a name="[340]"></a>Codec_WriteRegister</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, stm324xg_audio_codec.o(i.Codec_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Codec_WriteRegister &rArr; Codec_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_VolumeCtrl
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Stop
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_PauseResume
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Mute
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Init
</UL>

<P><STRONG><a name="[345]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm324xg_audio_codec.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Stop
</UL>

<P><STRONG><a name="[490]"></a>STM32_AudioRec_ADC_Init</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, stm324xg_audio_recorder.o(i.STM32_AudioRec_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = STM32_AudioRec_ADC_Init &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonStructInit
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_Init
</UL>

<P><STRONG><a name="[495]"></a>STM32_AudioRec_GPIO_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm324xg_audio_recorder.o(i.STM32_AudioRec_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = STM32_AudioRec_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_Init
</UL>

<P><STRONG><a name="[497]"></a>STM32_AudioRec_NVIC_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm324xg_audio_recorder.o(i.STM32_AudioRec_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STM32_AudioRec_NVIC_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_Init
</UL>

<P><STRONG><a name="[498]"></a>STM32_AudioRec_TIM_Init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm324xg_audio_recorder.o(i.STM32_AudioRec_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = STM32_AudioRec_TIM_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOutputTrigger
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_AudioRec_Init
</UL>

<P><STRONG><a name="[549]"></a>check_fs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = check_fs &rArr; disk_read &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[560]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[5f3]"></a>chk_lock</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, ff.o(i.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[54b]"></a>chk_mounted</STRONG> (Thumb, 918 bytes, Stack size 80 bytes, ff.o(i.chk_mounted))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = chk_mounted &rArr; check_fs &rArr; disk_read &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[54f]"></a>clear_lock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ff.o(i.clear_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[550]"></a>cmp_lfn</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[555]"></a>create_chain</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[55e]"></a>create_name</STRONG> (Thumb, 534 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[5ed]"></a>dec_lock</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, ff.o(i.dec_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[59b]"></a>dir_find</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[5a0]"></a>dir_next</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[5a2]"></a>dir_read</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[5a4]"></a>dir_register</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 900<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[5a8]"></a>dir_remove</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[59c]"></a>dir_sdi</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[5f4]"></a>enq_lock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.enq_lock))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[5a7]"></a>fit_lfn</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[5f2]"></a>follow_path</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 876<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[5f9]"></a>get_fileinfo</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[5f7]"></a>inc_lock</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, ff.o(i.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[54c]"></a>lock_fs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ff.o(i.lock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[59f]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[5a5]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[561]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[59d]"></a>move_window</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[5a3]"></a>pick_lfn</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pick_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[5f6]"></a>remove_chain</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[59e]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[5fa]"></a>sync</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, ff.o(i.sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = sync &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[5ee]"></a>unlock_fs</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ff.o(i.unlock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[5ec]"></a>validate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[6b9]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[6ba]"></a>prvCopyDataToQueue</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[6c0]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[6c1]"></a>prvIsQueueFull</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[6c4]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[6b1]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[6b3]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tasks.o(i.prvAllocateTCBAndStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[6b6]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[6b8]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[239]"></a>prvIdleTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[6bc]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tasks.o(i.prvInitialiseTCBVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseTCBVariables &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[6be]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[6c2]"></a>prvListTaskWithinSingleList</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, tasks.o(i.prvListTaskWithinSingleList))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvListTaskWithinSingleList &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usTaskCheckFreeStackSpace
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[6c3]"></a>usTaskCheckFreeStackSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.usTaskCheckFreeStackSpace))
<BR><BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
</UL>

<P><STRONG><a name="[701]"></a>prvSetupTimerInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port_cm4.o(i.prvSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[544]"></a>arith_encode</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, jcarith.o(i.arith_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arith_encode &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_DC_refine
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_DC_first
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_refine
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_first
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu
</UL>

<P><STRONG><a name="[545]"></a>emit_byte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, jcarith.o(i.emit_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = emit_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_encode
</UL>

<P><STRONG><a name="[5d0]"></a>emit_restart</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, jcarith.o(i.emit_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = emit_restart &rArr; finish_pass &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_DC_refine
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_DC_first
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_refine
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_first
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu
</UL>

<P><STRONG><a name="[1c7]"></a>encode_mcu</STRONG> (Thumb, 814 bytes, Stack size 72 bytes, jcarith.o(i.encode_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = encode_mcu &rArr; emit_restart &rArr; finish_pass &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[1c4]"></a>encode_mcu_AC_first</STRONG> (Thumb, 500 bytes, Stack size 56 bytes, jcarith.o(i.encode_mcu_AC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = encode_mcu_AC_first &rArr; emit_restart &rArr; finish_pass &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[1c6]"></a>encode_mcu_AC_refine</STRONG> (Thumb, 444 bytes, Stack size 56 bytes, jcarith.o(i.encode_mcu_AC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = encode_mcu_AC_refine &rArr; emit_restart &rArr; finish_pass &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[1c3]"></a>encode_mcu_DC_first</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, jcarith.o(i.encode_mcu_DC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = encode_mcu_DC_first &rArr; emit_restart &rArr; finish_pass &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[1c5]"></a>encode_mcu_DC_refine</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, jcarith.o(i.encode_mcu_DC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = encode_mcu_DC_refine &rArr; emit_restart &rArr; finish_pass &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[155]"></a>finish_pass</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, jcarith.o(i.finish_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finish_pass &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcarith.o(i.jinit_arith_encoder)
</UL>
<P><STRONG><a name="[154]"></a>start_pass</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, jcarith.o(i.start_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = start_pass
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcarith.o(i.jinit_arith_encoder)
</UL>
<P><STRONG><a name="[1f9]"></a>compress_data</STRONG> (Thumb, 414 bytes, Stack size 88 bytes, jccoefct.o(i.compress_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = compress_data
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_iMCU_row
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccoefct.o(i.start_pass_coef)
</UL>
<P><STRONG><a name="[1fa]"></a>compress_first_pass</STRONG> (Thumb, 400 bytes, Stack size 96 bytes, jccoefct.o(i.compress_first_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = compress_first_pass &rArr; compress_output
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_output
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccoefct.o(i.start_pass_coef)
</UL>
<P><STRONG><a name="[1fb]"></a>compress_output</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, jccoefct.o(i.compress_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = compress_output
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_iMCU_row
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_first_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccoefct.o(i.start_pass_coef)
</UL>
<P><STRONG><a name="[552]"></a>start_iMCU_row</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, jccoefct.o(i.start_iMCU_row))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_coef
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_output
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_data
</UL>

<P><STRONG><a name="[156]"></a>start_pass_coef</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, jccoefct.o(i.start_pass_coef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = start_pass_coef
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_iMCU_row
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccoefct.o(i.jinit_c_coef_controller)
</UL>
<P><STRONG><a name="[165]"></a>cmyk_ycck_convert</STRONG> (Thumb, 258 bytes, Stack size 52 bytes, jccolor.o(i.cmyk_ycck_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cmyk_ycck_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccolor.o(i.jinit_color_converter)
</UL>
<P><STRONG><a name="[15f]"></a>grayscale_convert</STRONG> (Thumb, 64 bytes, Stack size 28 bytes, jccolor.o(i.grayscale_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = grayscale_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccolor.o(i.jinit_color_converter)
</UL>
<P><STRONG><a name="[164]"></a>null_convert</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, jccolor.o(i.null_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = null_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccolor.o(i.jinit_color_converter)
</UL>
<P><STRONG><a name="[15e]"></a>null_method</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jccolor.o(i.null_method))
<BR>[Address Reference Count : 1]<UL><LI> jccolor.o(i.jinit_color_converter)
</UL>
<P><STRONG><a name="[162]"></a>rgb_convert</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, jccolor.o(i.rgb_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rgb_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccolor.o(i.jinit_color_converter)
</UL>
<P><STRONG><a name="[161]"></a>rgb_gray_convert</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, jccolor.o(i.rgb_gray_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rgb_gray_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccolor.o(i.jinit_color_converter)
</UL>
<P><STRONG><a name="[163]"></a>rgb_ycc_convert</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, jccolor.o(i.rgb_ycc_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rgb_ycc_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccolor.o(i.jinit_color_converter)
</UL>
<P><STRONG><a name="[160]"></a>rgb_ycc_start</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, jccolor.o(i.rgb_ycc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rgb_ycc_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccolor.o(i.jinit_color_converter)
</UL>
<P><STRONG><a name="[221]"></a>forward_DCT</STRONG> (Thumb, 166 bytes, Stack size 304 bytes, jcdctmgr.o(i.forward_DCT))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = forward_DCT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[222]"></a>forward_DCT_float</STRONG> (Thumb, 150 bytes, Stack size 304 bytes, jcdctmgr.o(i.forward_DCT_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = forward_DCT_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[17e]"></a>start_pass_fdctmgr</STRONG> (Thumb, 1632 bytes, Stack size 96 bytes, jcdctmgr.o(i.start_pass_fdctmgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = start_pass_fdctmgr &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.jinit_forward_dct)
</UL>
<P><STRONG><a name="[5c5]"></a>dump_buffer_e</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, jchuff.o(i.dump_buffer_e))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dump_buffer_e
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_e
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
</UL>

<P><STRONG><a name="[5c7]"></a>dump_buffer_s</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, jchuff.o(i.dump_buffer_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dump_buffer_s
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_s
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_s
</UL>

<P><STRONG><a name="[5c1]"></a>emit_ac_symbol</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, jchuff.o(i.emit_ac_symbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = emit_ac_symbol &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_refine
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_first
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_eobrun
</UL>

<P><STRONG><a name="[5c2]"></a>emit_bits_e</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, jchuff.o(i.emit_bits_e))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_buffer_e
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_bits_e
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_DC_refine
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_DC_first
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_refine
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_first
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_eobrun
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_buffered_bits
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_ac_symbol
</UL>

<P><STRONG><a name="[5c6]"></a>emit_bits_s</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, jchuff.o(i.emit_bits_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = emit_bits_s &rArr; dump_buffer_s
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_buffer_s
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_bits_s
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_one_block
</UL>

<P><STRONG><a name="[5c8]"></a>emit_buffered_bits</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, jchuff.o(i.emit_buffered_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = emit_buffered_bits &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_refine
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_eobrun
</UL>

<P><STRONG><a name="[5cd]"></a>emit_eobrun</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, jchuff.o(i.emit_eobrun))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = emit_eobrun &rArr; emit_ac_symbol &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_buffered_bits
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_ac_symbol
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass_huff
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass_gather
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_refine
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_first
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_e
</UL>

<P><STRONG><a name="[5d1]"></a>emit_restart_e</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, jchuff.o(i.emit_restart_e))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = emit_restart_e &rArr; emit_eobrun &rArr; emit_ac_symbol &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_bits_e
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_eobrun
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_buffer_e
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_DC_refine
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_DC_first
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_refine
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_first
</UL>

<P><STRONG><a name="[5d3]"></a>emit_restart_s</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, jchuff.o(i.emit_restart_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = emit_restart_s &rArr; flush_bits_s &rArr; emit_bits_s &rArr; dump_buffer_s
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_bits_s
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_buffer_s
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_huff
</UL>

<P><STRONG><a name="[226]"></a>encode_mcu_AC_first</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, jchuff.o(i.encode_mcu_AC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = encode_mcu_AC_first &rArr; emit_restart_e &rArr; emit_eobrun &rArr; emit_ac_symbol &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_e
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_eobrun
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_ac_symbol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.start_pass_huff)
</UL>
<P><STRONG><a name="[228]"></a>encode_mcu_AC_refine</STRONG> (Thumb, 412 bytes, Stack size 320 bytes, jchuff.o(i.encode_mcu_AC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = encode_mcu_AC_refine &rArr; emit_restart_e &rArr; emit_eobrun &rArr; emit_ac_symbol &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_e
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_eobrun
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_buffered_bits
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_ac_symbol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.start_pass_huff)
</UL>
<P><STRONG><a name="[225]"></a>encode_mcu_DC_first</STRONG> (Thumb, 334 bytes, Stack size 72 bytes, jchuff.o(i.encode_mcu_DC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = encode_mcu_DC_first &rArr; emit_restart_e &rArr; emit_eobrun &rArr; emit_ac_symbol &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_e
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.start_pass_huff)
</UL>
<P><STRONG><a name="[227]"></a>encode_mcu_DC_refine</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, jchuff.o(i.encode_mcu_DC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = encode_mcu_DC_refine &rArr; emit_restart_e &rArr; emit_eobrun &rArr; emit_ac_symbol &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_e
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.start_pass_huff)
</UL>
<P><STRONG><a name="[229]"></a>encode_mcu_gather</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, jchuff.o(i.encode_mcu_gather))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = encode_mcu_gather &rArr; htest_one_block
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htest_one_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.start_pass_huff)
</UL>
<P><STRONG><a name="[22a]"></a>encode_mcu_huff</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, jchuff.o(i.encode_mcu_huff))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = encode_mcu_huff &rArr; encode_one_block &rArr; emit_bits_s &rArr; dump_buffer_s
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_one_block
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_s
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.start_pass_huff)
</UL>
<P><STRONG><a name="[5d9]"></a>encode_one_block</STRONG> (Thumb, 326 bytes, Stack size 64 bytes, jchuff.o(i.encode_one_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = encode_one_block &rArr; emit_bits_s &rArr; dump_buffer_s
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_s
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_huff
</UL>

<P><STRONG><a name="[223]"></a>finish_pass_gather</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, jchuff.o(i.finish_pass_gather))
<BR><BR>[Stack]<UL><LI>Max Depth = 2200<LI>Call Chain = finish_pass_gather &rArr; jpeg_gen_optimal_table
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_alloc_huff_table
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_gen_optimal_table
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_eobrun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.start_pass_huff)
</UL>
<P><STRONG><a name="[224]"></a>finish_pass_huff</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, jchuff.o(i.finish_pass_huff))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = finish_pass_huff &rArr; emit_eobrun &rArr; emit_ac_symbol &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_bits_s
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_bits_e
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_eobrun
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.start_pass_huff)
</UL>
<P><STRONG><a name="[5d2]"></a>flush_bits_e</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, jchuff.o(i.flush_bits_e))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flush_bits_e &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass_huff
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_e
</UL>

<P><STRONG><a name="[5d4]"></a>flush_bits_s</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, jchuff.o(i.flush_bits_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flush_bits_s &rArr; emit_bits_s &rArr; dump_buffer_s
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_s
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass_huff
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_s
</UL>

<P><STRONG><a name="[5d8]"></a>htest_one_block</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, jchuff.o(i.htest_one_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = htest_one_block
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_gather
</UL>

<P><STRONG><a name="[607]"></a>jpeg_gen_optimal_table</STRONG> (Thumb, 594 bytes, Stack size 2136 bytes, jchuff.o(i.jpeg_gen_optimal_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136<LI>Call Chain = jpeg_gen_optimal_table
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass_gather
</UL>

<P><STRONG><a name="[67d]"></a>jpeg_make_c_derived_tbl</STRONG> (Thumb, 414 bytes, Stack size 1360 bytes, jchuff.o(i.jpeg_make_c_derived_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = jpeg_make_c_derived_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_huff
</UL>

<P><STRONG><a name="[180]"></a>start_pass_huff</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, jchuff.o(i.start_pass_huff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = start_pass_huff &rArr; jpeg_make_c_derived_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_make_c_derived_tbl
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.jinit_huff_encoder)
</UL>
<P><STRONG><a name="[231]"></a>process_data_simple_main</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, jcmainct.o(i.process_data_simple_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = process_data_simple_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmainct.o(i.start_pass_main)
</UL>
<P><STRONG><a name="[157]"></a>start_pass_main</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, jcmainct.o(i.start_pass_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = start_pass_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmainct.o(i.jinit_c_main_controller)
</UL>
<P><STRONG><a name="[5bf]"></a>emit_2bytes</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, jcmarker.o(i.emit_2bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = emit_2bytes &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_marker_header
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_sos
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_sof
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_pseudo_sos
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_jfif_app0
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dri
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dqt
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dht
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dac
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_adobe_app14
</UL>

<P><STRONG><a name="[5c3]"></a>emit_adobe_app14</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, jcmarker.o(i.emit_adobe_app14))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = emit_adobe_app14 &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_file_header
</UL>

<P><STRONG><a name="[5c0]"></a>emit_byte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, jcmarker.o(i.emit_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = emit_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_marker_byte
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_sos
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_sof
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_pseudo_sos
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_jfif_app0
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dqt
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dht
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dac
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_adobe_app14
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>

<P><STRONG><a name="[5c9]"></a>emit_dac</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, jcmarker.o(i.emit_dac))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = emit_dac &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_scan_header
</UL>

<P><STRONG><a name="[5ca]"></a>emit_dht</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, jcmarker.o(i.emit_dht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = emit_dht &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tables_only
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_scan_header
</UL>

<P><STRONG><a name="[5cb]"></a>emit_dqt</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, jcmarker.o(i.emit_dqt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = emit_dqt &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tables_only
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_frame_header
</UL>

<P><STRONG><a name="[5cc]"></a>emit_dri</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, jcmarker.o(i.emit_dri))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = emit_dri &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_scan_header
</UL>

<P><STRONG><a name="[5ce]"></a>emit_jfif_app0</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, jcmarker.o(i.emit_jfif_app0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = emit_jfif_app0 &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_file_header
</UL>

<P><STRONG><a name="[5c4]"></a>emit_marker</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, jcmarker.o(i.emit_marker))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tables_only
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_marker_header
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_file_trailer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_file_header
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_sos
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_sof
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_pseudo_sos
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_jfif_app0
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dri
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dqt
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dht
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dac
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_adobe_app14
</UL>

<P><STRONG><a name="[5cf]"></a>emit_pseudo_sos</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, jcmarker.o(i.emit_pseudo_sos))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = emit_pseudo_sos &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_frame_header
</UL>

<P><STRONG><a name="[5d5]"></a>emit_sof</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, jcmarker.o(i.emit_sof))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = emit_sof &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_frame_header
</UL>

<P><STRONG><a name="[5d6]"></a>emit_sos</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, jcmarker.o(i.emit_sos))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = emit_sos &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_scan_header
</UL>

<P><STRONG><a name="[18a]"></a>write_file_header</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, jcmarker.o(i.write_file_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_file_header &rArr; emit_jfif_app0 &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_jfif_app0
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_adobe_app14
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmarker.o(i.jinit_marker_writer)
</UL>
<P><STRONG><a name="[18d]"></a>write_file_trailer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, jcmarker.o(i.write_file_trailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_file_trailer &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmarker.o(i.jinit_marker_writer)
</UL>
<P><STRONG><a name="[18b]"></a>write_frame_header</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, jcmarker.o(i.write_frame_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = write_frame_header &rArr; emit_dqt &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_sof
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_pseudo_sos
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dqt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmarker.o(i.jinit_marker_writer)
</UL>
<P><STRONG><a name="[190]"></a>write_marker_byte</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, jcmarker.o(i.write_marker_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_marker_byte &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmarker.o(i.jinit_marker_writer)
</UL>
<P><STRONG><a name="[18f]"></a>write_marker_header</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, jcmarker.o(i.write_marker_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_marker_header &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmarker.o(i.jinit_marker_writer)
</UL>
<P><STRONG><a name="[18c]"></a>write_scan_header</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, jcmarker.o(i.write_scan_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = write_scan_header &rArr; emit_dac &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_sos
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dri
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dht
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmarker.o(i.jinit_marker_writer)
</UL>
<P><STRONG><a name="[18e]"></a>write_tables_only</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, jcmarker.o(i.write_tables_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_tables_only &rArr; emit_dqt &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dqt
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmarker.o(i.jinit_marker_writer)
</UL>
<P><STRONG><a name="[15a]"></a>finish_pass_master</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, jcmaster.o(i.finish_pass_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finish_pass_master
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmaster.o(i.jinit_c_master_control)
</UL>
<P><STRONG><a name="[637]"></a>initial_setup</STRONG> (Thumb, 756 bytes, Stack size 32 bytes, jcmaster.o(i.initial_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = initial_setup &rArr; jpeg_calc_jpeg_dimensions
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdiv_round_up
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_calc_jpeg_dimensions
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_calc_trans_dimensions
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_master_control
</UL>

<P><STRONG><a name="[638]"></a>jpeg_calc_trans_dimensions</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, jcmaster.o(i.jpeg_calc_trans_dimensions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_calc_trans_dimensions
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_setup
</UL>

<P><STRONG><a name="[159]"></a>pass_startup</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, jcmaster.o(i.pass_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pass_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmaster.o(i.jinit_c_master_control)
</UL>
<P><STRONG><a name="[6ac]"></a>per_scan_setup</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, jcmaster.o(i.per_scan_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = per_scan_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdiv_round_up
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_pass
</UL>

<P><STRONG><a name="[158]"></a>prepare_for_pass</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, jcmaster.o(i.prepare_for_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prepare_for_pass &rArr; per_scan_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_scan_parameters
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;per_scan_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmaster.o(i.jinit_c_master_control)
</UL>
<P><STRONG><a name="[648]"></a>reduce_script</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, jcmaster.o(i.reduce_script))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = reduce_script
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_master_control
</UL>

<P><STRONG><a name="[6ae]"></a>select_scan_parameters</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, jcmaster.o(i.select_scan_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = select_scan_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_pass
</UL>

<P><STRONG><a name="[647]"></a>validate_script</STRONG> (Thumb, 826 bytes, Stack size 2656 bytes, jcmaster.o(i.validate_script))
<BR><BR>[Stack]<UL><LI>Max Depth = 2656<LI>Call Chain = validate_script
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_master_control
</UL>

<P><STRONG><a name="[53d]"></a>add_huff_table</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, jcparam.o(i.add_huff_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = add_huff_table &rArr; jpeg_alloc_huff_table
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_alloc_huff_table
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_huff_tables
</UL>

<P><STRONG><a name="[680]"></a>std_huff_tables</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, jcparam.o(i.std_huff_tables))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std_huff_tables &rArr; add_huff_table &rArr; jpeg_alloc_huff_table
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_huff_table
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_defaults
</UL>

<P><STRONG><a name="[55d]"></a>create_context_buffer</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, jcprepct.o(i.create_context_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = create_context_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_prep_controller
</UL>

<P><STRONG><a name="[5e9]"></a>expand_bottom_edge</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, jcprepct.o(i.expand_bottom_edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = expand_bottom_edge &rArr; jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_process_data
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_process_context
</UL>

<P><STRONG><a name="[15c]"></a>pre_process_context</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, jcprepct.o(i.pre_process_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pre_process_context &rArr; expand_bottom_edge &rArr; jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_bottom_edge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcprepct.o(i.jinit_c_prep_controller)
</UL>
<P><STRONG><a name="[15d]"></a>pre_process_data</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, jcprepct.o(i.pre_process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pre_process_data &rArr; expand_bottom_edge &rArr; jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_bottom_edge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcprepct.o(i.jinit_c_prep_controller)
</UL>
<P><STRONG><a name="[15b]"></a>start_pass_prep</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, jcprepct.o(i.start_pass_prep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = start_pass_prep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcprepct.o(i.jinit_c_prep_controller)
</UL>
<P><STRONG><a name="[60e]"></a>expand_right_edge</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, jcsample.o(i.expand_right_edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = expand_right_edge
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_downsample
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2v2_smooth_downsample
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2v2_downsample
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2v1_downsample
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullsize_smooth_downsample
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullsize_downsample
</UL>

<P><STRONG><a name="[179]"></a>fullsize_downsample</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, jcsample.o(i.fullsize_downsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fullsize_downsample &rArr; jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_right_edge
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcsample.o(i.jinit_downsampler)
</UL>
<P><STRONG><a name="[178]"></a>fullsize_smooth_downsample</STRONG> (Thumb, 314 bytes, Stack size 88 bytes, jcsample.o(i.fullsize_smooth_downsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fullsize_smooth_downsample &rArr; expand_right_edge
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_right_edge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcsample.o(i.jinit_downsampler)
</UL>
<P><STRONG><a name="[17a]"></a>h2v1_downsample</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, jcsample.o(i.h2v1_downsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = h2v1_downsample &rArr; expand_right_edge
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_right_edge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcsample.o(i.jinit_downsampler)
</UL>
<P><STRONG><a name="[17c]"></a>h2v2_downsample</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, jcsample.o(i.h2v2_downsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = h2v2_downsample &rArr; expand_right_edge
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_right_edge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcsample.o(i.jinit_downsampler)
</UL>
<P><STRONG><a name="[17b]"></a>h2v2_smooth_downsample</STRONG> (Thumb, 490 bytes, Stack size 80 bytes, jcsample.o(i.h2v2_smooth_downsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = h2v2_smooth_downsample &rArr; expand_right_edge
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_right_edge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcsample.o(i.jinit_downsampler)
</UL>
<P><STRONG><a name="[17d]"></a>int_downsample</STRONG> (Thumb, 228 bytes, Stack size 96 bytes, jcsample.o(i.int_downsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = int_downsample &rArr; expand_right_edge
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_right_edge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcsample.o(i.jinit_downsampler)
</UL>
<P><STRONG><a name="[177]"></a>sep_downsample</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, jcsample.o(i.sep_downsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sep_downsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcsample.o(i.jinit_downsampler)
</UL>
<P><STRONG><a name="[176]"></a>start_pass_downsample</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jcsample.o(i.start_pass_downsample))
<BR>[Address Reference Count : 1]<UL><LI> jcsample.o(i.jinit_downsampler)
</UL>
<P><STRONG><a name="[673]"></a>default_decompress_parms</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, jdapimin.o(i.default_decompress_parms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = default_decompress_parms
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_consume_input
</UL>

<P><STRONG><a name="[684]"></a>output_pass_setup</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, jdapistd.o(i.output_pass_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = output_pass_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_start_decompress
</UL>

<P><STRONG><a name="[542]"></a>arith_decode</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, jdarith.o(i.arith_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arith_decode &rArr; get_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_refine
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_first
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_refine
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_first
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu
</UL>

<P><STRONG><a name="[1cc]"></a>decode_mcu</STRONG> (Thumb, 704 bytes, Stack size 64 bytes, jdarith.o(i.decode_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = decode_mcu &rArr; arith_decode &rArr; get_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[1c9]"></a>decode_mcu_AC_first</STRONG> (Thumb, 366 bytes, Stack size 56 bytes, jdarith.o(i.decode_mcu_AC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = decode_mcu_AC_first &rArr; arith_decode &rArr; get_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[1cb]"></a>decode_mcu_AC_refine</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, jdarith.o(i.decode_mcu_AC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = decode_mcu_AC_refine &rArr; arith_decode &rArr; get_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[1c8]"></a>decode_mcu_DC_first</STRONG> (Thumb, 410 bytes, Stack size 56 bytes, jdarith.o(i.decode_mcu_DC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = decode_mcu_DC_first &rArr; arith_decode &rArr; get_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[1ca]"></a>decode_mcu_DC_refine</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, jdarith.o(i.decode_mcu_DC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = decode_mcu_DC_refine &rArr; arith_decode &rArr; get_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[543]"></a>get_byte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, jdarith.o(i.get_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_decode
</UL>

<P><STRONG><a name="[565]"></a>process_restart</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, jdarith.o(i.process_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = process_restart
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_refine
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_first
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_refine
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_first
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu
</UL>

<P><STRONG><a name="[153]"></a>start_pass</STRONG> (Thumb, 666 bytes, Stack size 40 bytes, jdarith.o(i.start_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = start_pass
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.jinit_arith_decoder)
</UL>
<P><STRONG><a name="[1b0]"></a>empty_output_buffer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, jdatadst.o(i.empty_output_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 884<LI>Call Chain = empty_output_buffer &rArr; write_file &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdatadst.o(i.jpeg_stdio_dest)
</UL>
<P><STRONG><a name="[1af]"></a>init_destination</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jdatadst.o(i.init_destination))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_destination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdatadst.o(i.jpeg_stdio_dest)
</UL>
<P><STRONG><a name="[1b1]"></a>term_destination</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, jdatadst.o(i.term_destination))
<BR><BR>[Stack]<UL><LI>Max Depth = 884<LI>Call Chain = term_destination &rArr; write_file &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdatadst.o(i.jpeg_stdio_dest)
</UL>
<P><STRONG><a name="[5d7]"></a>write_file</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, jdatadst.o(i.write_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = write_file &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;term_destination
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_output_buffer
</UL>

<P><STRONG><a name="[1b3]"></a>fill_input_buffer</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, jdatasrc.o(i.fill_input_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = fill_input_buffer &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdatasrc.o(i.jpeg_stdio_src)
</UL>
<P><STRONG><a name="[1b2]"></a>init_source</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, jdatasrc.o(i.init_source))
<BR>[Address Reference Count : 1]<UL><LI> jdatasrc.o(i.jpeg_stdio_src)
</UL>
<P><STRONG><a name="[1b4]"></a>skip_input_data</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, jdatasrc.o(i.skip_input_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = skip_input_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdatasrc.o(i.jpeg_stdio_src)
</UL>
<P><STRONG><a name="[1b6]"></a>term_source</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jdatasrc.o(i.term_source))
<BR>[Address Reference Count : 1]<UL><LI> jdatasrc.o(i.jpeg_stdio_src)
</UL>
<P><STRONG><a name="[170]"></a>consume_data</STRONG> (Thumb, 300 bytes, Stack size 72 bytes, jdcoefct.o(i.consume_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = consume_data
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_iMCU_row
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcoefct.o(i.jinit_d_coef_controller)
</UL>
<P><STRONG><a name="[171]"></a>decompress_data</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, jdcoefct.o(i.decompress_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = decompress_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcoefct.o(i.jinit_d_coef_controller)
</UL>
<P><STRONG><a name="[173]"></a>decompress_onepass</STRONG> (Thumb, 372 bytes, Stack size 80 bytes, jdcoefct.o(i.decompress_onepass))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = decompress_onepass
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_iMCU_row
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcoefct.o(i.jinit_d_coef_controller)
</UL>
<P><STRONG><a name="[172]"></a>dummy_consume_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jdcoefct.o(i.dummy_consume_data))
<BR>[Address Reference Count : 1]<UL><LI> jdcoefct.o(i.jinit_d_coef_controller)
</UL>
<P><STRONG><a name="[553]"></a>start_iMCU_row</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, jdcoefct.o(i.start_iMCU_row))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_input_pass
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress_onepass
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_data
</UL>

<P><STRONG><a name="[16e]"></a>start_input_pass</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, jdcoefct.o(i.start_input_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_input_pass
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_iMCU_row
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcoefct.o(i.jinit_d_coef_controller)
</UL>
<P><STRONG><a name="[16f]"></a>start_output_pass</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, jdcoefct.o(i.start_output_pass))
<BR>[Address Reference Count : 1]<UL><LI> jdcoefct.o(i.jinit_d_coef_controller)
</UL>
<P><STRONG><a name="[64b]"></a>build_rgb_y_table</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, jdcolor.o(i.build_rgb_y_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = build_rgb_y_table
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_color_deconverter
</UL>

<P><STRONG><a name="[64c]"></a>build_ycc_rgb_table</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, jdcolor.o(i.build_ycc_rgb_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = build_ycc_rgb_table
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_color_deconverter
</UL>

<P><STRONG><a name="[16a]"></a>gray_rgb_convert</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, jdcolor.o(i.gray_rgb_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gray_rgb_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[167]"></a>grayscale_convert</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, jdcolor.o(i.grayscale_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = grayscale_convert &rArr; jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[16d]"></a>null_convert</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, jdcolor.o(i.null_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = null_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[16b]"></a>rgb_convert</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, jdcolor.o(i.rgb_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rgb_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[168]"></a>rgb_gray_convert</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, jdcolor.o(i.rgb_gray_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rgb_gray_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[166]"></a>start_pass_dcolor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jdcolor.o(i.start_pass_dcolor))
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[169]"></a>ycc_rgb_convert</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, jdcolor.o(i.ycc_rgb_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ycc_rgb_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[16c]"></a>ycck_cmyk_convert</STRONG> (Thumb, 254 bytes, Stack size 68 bytes, jdcolor.o(i.ycck_cmyk_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ycck_cmyk_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[184]"></a>start_pass</STRONG> (Thumb, 1070 bytes, Stack size 80 bytes, jddctmgr.o(i.start_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = start_pass &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.jinit_inverse_dct)
</UL>
<P><STRONG><a name="[230]"></a>decode_mcu</STRONG> (Thumb, 894 bytes, Stack size 112 bytes, jdhuff.o(i.decode_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = decode_mcu &rArr; jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[22c]"></a>decode_mcu_AC_first</STRONG> (Thumb, 474 bytes, Stack size 96 bytes, jdhuff.o(i.decode_mcu_AC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = decode_mcu_AC_first &rArr; jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[22e]"></a>decode_mcu_AC_refine</STRONG> (Thumb, 784 bytes, Stack size 368 bytes, jdhuff.o(i.decode_mcu_AC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = decode_mcu_AC_refine &rArr; jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[22b]"></a>decode_mcu_DC_first</STRONG> (Thumb, 404 bytes, Stack size 112 bytes, jdhuff.o(i.decode_mcu_DC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = decode_mcu_DC_first &rArr; jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[22d]"></a>decode_mcu_DC_refine</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, jdhuff.o(i.decode_mcu_DC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = decode_mcu_DC_refine &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[22f]"></a>decode_mcu_sub</STRONG> (Thumb, 906 bytes, Stack size 120 bytes, jdhuff.o(i.decode_mcu_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = decode_mcu_sub &rArr; jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[567]"></a>jpeg_fill_bit_buffer</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, jdhuff.o(i.jpeg_fill_bit_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jpeg_fill_bit_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_sub
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_refine
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_first
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_refine
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_first
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu
</UL>

<P><STRONG><a name="[568]"></a>jpeg_huff_decode</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, jdhuff.o(i.jpeg_huff_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_sub
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_first
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_refine
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_first
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu
</UL>

<P><STRONG><a name="[67e]"></a>jpeg_make_d_derived_tbl</STRONG> (Thumb, 572 bytes, Stack size 1360 bytes, jdhuff.o(i.jpeg_make_d_derived_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = jpeg_make_d_derived_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_huff_decoder
</UL>

<P><STRONG><a name="[566]"></a>process_restart</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, jdhuff.o(i.process_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = process_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_sub
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_refine
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_first
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_refine
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_first
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu
</UL>

<P><STRONG><a name="[17f]"></a>start_pass_huff_decoder</STRONG> (Thumb, 1136 bytes, Stack size 48 bytes, jdhuff.o(i.start_pass_huff_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = start_pass_huff_decoder &rArr; jpeg_make_d_derived_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_make_d_derived_tbl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.jinit_huff_decoder)
</UL>
<P><STRONG><a name="[14c]"></a>consume_markers</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, jdinput.o(i.consume_markers))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = consume_markers &rArr; start_input_pass &rArr; per_scan_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_input_pass
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_setup
</UL>
<BR>[Address Reference Count : 3]<UL><LI> jdinput.o(i.reset_input_controller)
<LI> jdinput.o(i.finish_input_pass)
<LI> jdinput.o(i.jinit_input_controller)
</UL>
<P><STRONG><a name="[183]"></a>finish_input_pass</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jdinput.o(i.finish_input_pass))
<BR>[Address Reference Count : 1]<UL><LI> jdinput.o(i.jinit_input_controller)
</UL>
<P><STRONG><a name="[554]"></a>initial_setup</STRONG> (Thumb, 934 bytes, Stack size 16 bytes, jdinput.o(i.initial_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initial_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdiv_round_up
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_markers
</UL>

<P><STRONG><a name="[685]"></a>latch_quant_tables</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, jdinput.o(i.latch_quant_tables))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = latch_quant_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_input_pass
</UL>

<P><STRONG><a name="[6ad]"></a>per_scan_setup</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, jdinput.o(i.per_scan_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = per_scan_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdiv_round_up
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_input_pass
</UL>

<P><STRONG><a name="[181]"></a>reset_input_controller</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, jdinput.o(i.reset_input_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reset_input_controller
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdinput.o(i.jinit_input_controller)
</UL>
<P><STRONG><a name="[182]"></a>start_input_pass</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, jdinput.o(i.start_input_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = start_input_pass &rArr; per_scan_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;per_scan_setup
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;latch_quant_tables
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_markers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdinput.o(i.jinit_input_controller)
</UL>
<P><STRONG><a name="[657]"></a>alloc_funny_pointers</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, jdmainct.o(i.alloc_funny_pointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = alloc_funny_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_main_controller
</UL>

<P><STRONG><a name="[6d3]"></a>make_funny_pointers</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, jdmainct.o(i.make_funny_pointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = make_funny_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_main
</UL>

<P><STRONG><a name="[232]"></a>process_data_context_main</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, jdmainct.o(i.process_data_context_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = process_data_context_main &rArr; set_wraparound_pointers
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wraparound_pointers
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bottom_pointers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmainct.o(i.start_pass_main)
</UL>
<P><STRONG><a name="[234]"></a>process_data_crank_post</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, jdmainct.o(i.process_data_crank_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = process_data_crank_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmainct.o(i.start_pass_main)
</UL>
<P><STRONG><a name="[233]"></a>process_data_simple_main</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, jdmainct.o(i.process_data_simple_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = process_data_simple_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmainct.o(i.start_pass_main)
</UL>
<P><STRONG><a name="[6af]"></a>set_bottom_pointers</STRONG> (Thumb, 134 bytes, Stack size 28 bytes, jdmainct.o(i.set_bottom_pointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = set_bottom_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_context_main
</UL>

<P><STRONG><a name="[6b0]"></a>set_wraparound_pointers</STRONG> (Thumb, 156 bytes, Stack size 28 bytes, jdmainct.o(i.set_wraparound_pointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = set_wraparound_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_context_main
</UL>

<P><STRONG><a name="[174]"></a>start_pass_main</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, jdmainct.o(i.start_pass_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = start_pass_main &rArr; make_funny_pointers
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_funny_pointers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmainct.o(i.jinit_d_main_controller)
</UL>
<P><STRONG><a name="[612]"></a>examine_app0</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, jdmarker.o(i.examine_app0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = examine_app0
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_interesting_appn
</UL>

<P><STRONG><a name="[613]"></a>examine_app14</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, jdmarker.o(i.examine_app14))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = examine_app14
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_interesting_appn
</UL>

<P><STRONG><a name="[6c8]"></a>first_marker</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, jdmarker.o(i.first_marker))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = first_marker
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[6cc]"></a>get_dac</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, jdmarker.o(i.get_dac))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_dac
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[60f]"></a>get_dht</STRONG> (Thumb, 616 bytes, Stack size 320 bytes, jdmarker.o(i.get_dht))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = get_dht &rArr; jpeg_alloc_huff_table
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_alloc_huff_table
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[610]"></a>get_dqt</STRONG> (Thumb, 718 bytes, Stack size 56 bytes, jdmarker.o(i.get_dqt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_dqt &rArr; jpeg_alloc_quant_table
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_alloc_quant_table
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[6cd]"></a>get_dri</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, jdmarker.o(i.get_dri))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_dri
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[189]"></a>get_interesting_appn</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, jdmarker.o(i.get_interesting_appn))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_interesting_appn &rArr; examine_app14
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;examine_app14
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;examine_app0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmarker.o(i.jinit_marker_reader)
</UL>
<P><STRONG><a name="[6ca]"></a>get_sof</STRONG> (Thumb, 654 bytes, Stack size 56 bytes, jdmarker.o(i.get_sof))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_sof
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[6c9]"></a>get_soi</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, jdmarker.o(i.get_soi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_soi
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[6cb]"></a>get_sos</STRONG> (Thumb, 602 bytes, Stack size 56 bytes, jdmarker.o(i.get_sos))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_sos
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[67f]"></a>next_marker</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, jdmarker.o(i.next_marker))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = next_marker
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_resync_to_restart
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_restart_marker
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[186]"></a>read_markers</STRONG> (Thumb, 620 bytes, Stack size 8 bytes, jdmarker.o(i.read_markers))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = read_markers &rArr; get_dht &rArr; jpeg_alloc_huff_table
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_variable
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_marker
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sos
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_soi
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sof
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dri
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dqt
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dht
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dac
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_marker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmarker.o(i.jinit_marker_reader)
</UL>
<P><STRONG><a name="[187]"></a>read_restart_marker</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, jdmarker.o(i.read_restart_marker))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_restart_marker &rArr; next_marker
</UL>
<BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_marker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmarker.o(i.jinit_marker_reader)
</UL>
<P><STRONG><a name="[185]"></a>reset_marker_reader</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, jdmarker.o(i.reset_marker_reader))
<BR><BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_marker_reader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmarker.o(i.jinit_marker_reader)
</UL>
<P><STRONG><a name="[188]"></a>skip_variable</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, jdmarker.o(i.skip_variable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = skip_variable
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmarker.o(i.jinit_marker_reader)
</UL>
<P><STRONG><a name="[192]"></a>finish_output_pass</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, jdmaster.o(i.finish_output_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finish_output_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmaster.o(i.jinit_master_decompress)
</UL>
<P><STRONG><a name="[65c]"></a>master_selection</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, jdmaster.o(i.master_selection))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = master_selection &rArr; jinit_1pass_quantizer &rArr; create_colormap &rArr; select_ncolors
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_coef_controller
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_arith_decoder
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_upsampler
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_merged_upsampler
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_post_controller
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_2pass_quantizer
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_1pass_quantizer
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_calc_output_dimensions
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_merged_upsample
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_range_limit_table
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_main_controller
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_huff_decoder
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_inverse_dct
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_color_deconverter
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
</UL>

<P><STRONG><a name="[191]"></a>prepare_for_output_pass</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, jdmaster.o(i.prepare_for_output_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prepare_for_output_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmaster.o(i.jinit_master_decompress)
</UL>
<P><STRONG><a name="[694]"></a>prepare_range_limit_table</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, jdmaster.o(i.prepare_range_limit_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prepare_range_limit_table
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[669]"></a>use_merged_upsample</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, jdmaster.o(i.use_merged_upsample))
<BR><BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_calc_output_dimensions
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[661]"></a>build_ycc_rgb_table</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, jdmerge.o(i.build_ycc_rgb_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = build_ycc_rgb_table
</UL>
<BR>[Called By]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_merged_upsampler
</UL>

<P><STRONG><a name="[1a2]"></a>h2v1_merged_upsample</STRONG> (Thumb, 392 bytes, Stack size 80 bytes, jdmerge.o(i.h2v1_merged_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = h2v1_merged_upsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmerge.o(i.jinit_merged_upsampler)
</UL>
<P><STRONG><a name="[1a0]"></a>h2v2_merged_upsample</STRONG> (Thumb, 584 bytes, Stack size 84 bytes, jdmerge.o(i.h2v2_merged_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = h2v2_merged_upsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmerge.o(i.jinit_merged_upsampler)
</UL>
<P><STRONG><a name="[1a1]"></a>merged_1v_upsample</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, jdmerge.o(i.merged_1v_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = merged_1v_upsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmerge.o(i.jinit_merged_upsampler)
</UL>
<P><STRONG><a name="[19f]"></a>merged_2v_upsample</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, jdmerge.o(i.merged_2v_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = merged_2v_upsample &rArr; jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmerge.o(i.jinit_merged_upsampler)
</UL>
<P><STRONG><a name="[19e]"></a>start_pass_merged_upsample</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, jdmerge.o(i.start_pass_merged_upsample))
<BR>[Address Reference Count : 1]<UL><LI> jdmerge.o(i.jinit_merged_upsampler)
</UL>
<P><STRONG><a name="[1fc]"></a>post_process_1pass</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, jdpostct.o(i.post_process_1pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = post_process_1pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdpostct.o(i.start_pass_dpost)
</UL>
<P><STRONG><a name="[1fe]"></a>post_process_2pass</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, jdpostct.o(i.post_process_2pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = post_process_2pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdpostct.o(i.start_pass_dpost)
</UL>
<P><STRONG><a name="[1fd]"></a>post_process_prepass</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, jdpostct.o(i.post_process_prepass))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = post_process_prepass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdpostct.o(i.start_pass_dpost)
</UL>
<P><STRONG><a name="[175]"></a>start_pass_dpost</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, jdpostct.o(i.start_pass_dpost))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = start_pass_dpost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdpostct.o(i.jinit_d_post_controller)
</UL>
<P><STRONG><a name="[1a6]"></a>fullsize_upsample</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jdsample.o(i.fullsize_upsample))
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[1a7]"></a>h2v1_upsample</STRONG> (Thumb, 66 bytes, Stack size 28 bytes, jdsample.o(i.h2v1_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = h2v1_upsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[1a8]"></a>h2v2_upsample</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, jdsample.o(i.h2v2_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = h2v2_upsample &rArr; jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[1a9]"></a>int_upsample</STRONG> (Thumb, 156 bytes, Stack size 80 bytes, jdsample.o(i.int_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = int_upsample &rArr; jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[1a5]"></a>noop_upsample</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, jdsample.o(i.noop_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = noop_upsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[1a4]"></a>sep_upsample</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, jdsample.o(i.sep_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sep_upsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[1a3]"></a>start_pass_upsample</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jdsample.o(i.start_pass_upsample))
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[1ab]"></a>emit_message</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, jerror.o(i.emit_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = emit_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[1aa]"></a>error_exit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, jerror.o(i.error_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = error_exit &rArr; jpeg_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[1ad]"></a>format_message</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, jerror.o(i.format_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = format_message &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[1ac]"></a>output_message</STRONG> (Thumb, 20 bytes, Stack size 208 bytes, jerror.o(i.output_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = output_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[1ae]"></a>reset_error_mgr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jerror.o(i.reset_error_mgr))
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[19b]"></a>access_virt_barray</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, jmemmgr.o(i.access_virt_barray))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = access_virt_barray &rArr; do_barray_io
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_barray_io
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[19a]"></a>access_virt_sarray</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, jmemmgr.o(i.access_virt_sarray))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = access_virt_sarray &rArr; do_sarray_io
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sarray_io
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[196]"></a>alloc_barray</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, jmemmgr.o(i.alloc_barray))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = alloc_barray &rArr; alloc_small &rArr; jpeg_get_small &rArr; p_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_large
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realize_virt_arrays
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[194]"></a>alloc_large</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, jmemmgr.o(i.alloc_large))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = alloc_large &rArr; jpeg_get_large &rArr; p_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_large
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_sarray
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_barray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[195]"></a>alloc_sarray</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, jmemmgr.o(i.alloc_sarray))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = alloc_sarray &rArr; alloc_small &rArr; jpeg_get_small &rArr; p_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_large
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realize_virt_arrays
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[193]"></a>alloc_small</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, jmemmgr.o(i.alloc_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = alloc_small &rArr; jpeg_get_small &rArr; p_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_small
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_virt_sarray
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_virt_barray
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_sarray
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_barray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[53b]"></a>do_barray_io</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, jmemmgr.o(i.do_barray_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = do_barray_io
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_virt_barray
</UL>

<P><STRONG><a name="[53c]"></a>do_sarray_io</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, jmemmgr.o(i.do_sarray_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = do_sarray_io
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_virt_sarray
</UL>

<P><STRONG><a name="[19c]"></a>free_pool</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, jmemmgr.o(i.free_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = free_pool &rArr; jpeg_free_small &rArr; p_free
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_small
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_large
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_destruct
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[53f]"></a>out_of_memory</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, jmemmgr.o(i.out_of_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = out_of_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_large
</UL>

<P><STRONG><a name="[199]"></a>realize_virt_arrays</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, jmemmgr.o(i.realize_virt_arrays))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = realize_virt_arrays &rArr; alloc_sarray &rArr; alloc_small &rArr; jpeg_get_small &rArr; p_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_open_backing_store
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_available
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_sarray
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_barray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[198]"></a>request_virt_barray</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, jmemmgr.o(i.request_virt_barray))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = request_virt_barray &rArr; alloc_small &rArr; jpeg_get_small &rArr; p_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[197]"></a>request_virt_sarray</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, jmemmgr.o(i.request_virt_sarray))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = request_virt_sarray &rArr; alloc_small &rArr; jpeg_get_small &rArr; p_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[19d]"></a>self_destruct</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, jmemmgr.o(i.self_destruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = self_destruct &rArr; free_pool &rArr; jpeg_free_small &rArr; p_free
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_term
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_small
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[641]"></a>alloc_fs_workspace</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, jquant1.o(i.alloc_fs_workspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = alloc_fs_workspace
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_1pass_quantizer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_1_quant
</UL>

<P><STRONG><a name="[1f0]"></a>color_quantize</STRONG> (Thumb, 98 bytes, Stack size 44 bytes, jquant1.o(i.color_quantize))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = color_quantize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.start_pass_1_quant)
</UL>
<P><STRONG><a name="[1ef]"></a>color_quantize3</STRONG> (Thumb, 126 bytes, Stack size 44 bytes, jquant1.o(i.color_quantize3))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = color_quantize3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.start_pass_1_quant)
</UL>
<P><STRONG><a name="[558]"></a>create_colorindex</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, jquant1.o(i.create_colorindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = create_colorindex &rArr; largest_input_value
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;largest_input_value
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_1pass_quantizer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_1_quant
</UL>

<P><STRONG><a name="[55a]"></a>create_colormap</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, jquant1.o(i.create_colormap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = create_colormap &rArr; select_ncolors
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ncolors
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_value
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_1pass_quantizer
</UL>

<P><STRONG><a name="[562]"></a>create_odither_tables</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, jquant1.o(i.create_odither_tables))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_odither_tables &rArr; make_odither_array
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_odither_array
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_1_quant
</UL>

<P><STRONG><a name="[14f]"></a>finish_pass_1_quant</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jquant1.o(i.finish_pass_1_quant))
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.jinit_1pass_quantizer)
</UL>
<P><STRONG><a name="[559]"></a>largest_input_value</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, jquant1.o(i.largest_input_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = largest_input_value
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_colorindex
</UL>

<P><STRONG><a name="[563]"></a>make_odither_array</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, jquant1.o(i.make_odither_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = make_odither_array
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_odither_tables
</UL>

<P><STRONG><a name="[150]"></a>new_color_map_1_quant</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, jquant1.o(i.new_color_map_1_quant))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = new_color_map_1_quant
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.jinit_1pass_quantizer)
</UL>
<P><STRONG><a name="[55c]"></a>output_value</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, jquant1.o(i.output_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = output_value
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_colormap
</UL>

<P><STRONG><a name="[1f1]"></a>quantize3_ord_dither</STRONG> (Thumb, 216 bytes, Stack size 68 bytes, jquant1.o(i.quantize3_ord_dither))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = quantize3_ord_dither
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.start_pass_1_quant)
</UL>
<P><STRONG><a name="[1f3]"></a>quantize_fs_dither</STRONG> (Thumb, 334 bytes, Stack size 104 bytes, jquant1.o(i.quantize_fs_dither))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = quantize_fs_dither
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.start_pass_1_quant)
</UL>
<P><STRONG><a name="[1f2]"></a>quantize_ord_dither</STRONG> (Thumb, 186 bytes, Stack size 80 bytes, jquant1.o(i.quantize_ord_dither))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = quantize_ord_dither
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.start_pass_1_quant)
</UL>
<P><STRONG><a name="[55b]"></a>select_ncolors</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, jquant1.o(i.select_ncolors))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = select_ncolors
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_colormap
</UL>

<P><STRONG><a name="[14e]"></a>start_pass_1_quant</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, jquant1.o(i.start_pass_1_quant))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = start_pass_1_quant &rArr; create_odither_tables &rArr; make_odither_array
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_odither_tables
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_colorindex
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_fs_workspace
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.jinit_1pass_quantizer)
</UL>
<P><STRONG><a name="[6d2]"></a>compute_color</STRONG> (Thumb, 258 bytes, Stack size 68 bytes, jquant2.o(i.compute_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = compute_color
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_colors
</UL>

<P><STRONG><a name="[603]"></a>fill_inverse_cmap</STRONG> (Thumb, 190 bytes, Stack size 464 bytes, jquant2.o(i.fill_inverse_cmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1564<LI>Call Chain = fill_inverse_cmap &rArr; find_nearby_colors
</UL>
<BR>[Calls]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_nearby_colors
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_best_colors
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pass2_no_dither
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pass2_fs_dither
</UL>

<P><STRONG><a name="[605]"></a>find_best_colors</STRONG> (Thumb, 336 bytes, Stack size 584 bytes, jquant2.o(i.find_best_colors))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = find_best_colors
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_inverse_cmap
</UL>

<P><STRONG><a name="[698]"></a>find_biggest_color_pop</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, jquant2.o(i.find_biggest_color_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = find_biggest_color_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;median_cut
</UL>

<P><STRONG><a name="[699]"></a>find_biggest_volume</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, jquant2.o(i.find_biggest_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = find_biggest_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;median_cut
</UL>

<P><STRONG><a name="[604]"></a>find_nearby_colors</STRONG> (Thumb, 440 bytes, Stack size 1100 bytes, jquant2.o(i.find_nearby_colors))
<BR><BR>[Stack]<UL><LI>Max Depth = 1100<LI>Call Chain = find_nearby_colors
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_inverse_cmap
</UL>

<P><STRONG><a name="[1f5]"></a>finish_pass1</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, jquant2.o(i.finish_pass1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = finish_pass1 &rArr; select_colors &rArr; median_cut &rArr; update_box
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_colors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.start_pass_2_quant)
</UL>
<P><STRONG><a name="[1f8]"></a>finish_pass2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jquant2.o(i.finish_pass2))
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.start_pass_2_quant)
</UL>
<P><STRONG><a name="[643]"></a>init_error_limit</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, jquant2.o(i.init_error_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_error_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_2pass_quantizer
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_2_quant
</UL>

<P><STRONG><a name="[697]"></a>median_cut</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, jquant2.o(i.median_cut))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = median_cut &rArr; update_box
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_box
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_biggest_volume
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_biggest_color_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_colors
</UL>

<P><STRONG><a name="[152]"></a>new_color_map_2_quant</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jquant2.o(i.new_color_map_2_quant))
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.jinit_2pass_quantizer)
</UL>
<P><STRONG><a name="[1f6]"></a>pass2_fs_dither</STRONG> (Thumb, 486 bytes, Stack size 128 bytes, jquant2.o(i.pass2_fs_dither))
<BR><BR>[Stack]<UL><LI>Max Depth = 1692<LI>Call Chain = pass2_fs_dither &rArr; fill_inverse_cmap &rArr; find_nearby_colors
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_inverse_cmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.start_pass_2_quant)
</UL>
<P><STRONG><a name="[1f7]"></a>pass2_no_dither</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, jquant2.o(i.pass2_no_dither))
<BR><BR>[Stack]<UL><LI>Max Depth = 1636<LI>Call Chain = pass2_no_dither &rArr; fill_inverse_cmap &rArr; find_nearby_colors
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_inverse_cmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.start_pass_2_quant)
</UL>
<P><STRONG><a name="[1f4]"></a>prescan_quantize</STRONG> (Thumb, 122 bytes, Stack size 36 bytes, jquant2.o(i.prescan_quantize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prescan_quantize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.start_pass_2_quant)
</UL>
<P><STRONG><a name="[606]"></a>select_colors</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, jquant2.o(i.select_colors))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = select_colors &rArr; median_cut &rArr; update_box
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_box
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;median_cut
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_color
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass1
</UL>

<P><STRONG><a name="[151]"></a>start_pass_2_quant</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, jquant2.o(i.start_pass_2_quant))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = start_pass_2_quant &rArr; init_error_limit
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_error_limit
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.jinit_2pass_quantizer)
</UL>
<P><STRONG><a name="[69a]"></a>update_box</STRONG> (Thumb, 590 bytes, Stack size 64 bytes, jquant2.o(i.update_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = update_box
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_colors
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;median_cut
</UL>

<P><STRONG><a name="[146]"></a>accept_function</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, api_msg.o(i.accept_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = accept_function &rArr; netconn_alloc &rArr; sys_sem_new &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.do_listen)
</UL>
<P><STRONG><a name="[5ae]"></a>do_close_internal</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, api_msg.o(i.do_close_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = do_close_internal &rArr; tcp_close &rArr; tcp_send_ctrl &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
</UL>

<P><STRONG><a name="[5bc]"></a>do_writemore</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, api_msg.o(i.do_writemore))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = do_writemore &rArr; tcp_write &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
</UL>

<P><STRONG><a name="[145]"></a>err_tcp</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, api_msg.o(i.err_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = err_tcp &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[5ba]"></a>pcb_new</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, api_msg.o(i.pcb_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
</UL>

<P><STRONG><a name="[144]"></a>poll_tcp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, api_msg.o(i.poll_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = poll_tcp &rArr; do_writemore &rArr; tcp_write &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[1c0]"></a>recv_raw</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, api_msg.o(i.recv_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[1c2]"></a>recv_tcp</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, api_msg.o(i.recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = recv_tcp &rArr; sys_mbox_trypost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[1c1]"></a>recv_udp</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, api_msg.o(i.recv_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[143]"></a>sent_tcp</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, api_msg.o(i.sent_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sent_tcp &rArr; do_writemore &rArr; tcp_write &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[538]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, api_msg.o(i.setup_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setup_tcp
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[13e]"></a>arp_timer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcpip.o(i.arp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arp_timer &rArr; sys_timeout &rArr; sys_arch_timeouts
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tcpip.o(i.tcpip_thread)
<LI> tcpip.o(i.arp_timer)
</UL>
<P><STRONG><a name="[141]"></a>dhcp_timer_coarse</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcpip.o(i.dhcp_timer_coarse))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dhcp_timer_coarse &rArr; dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tcpip.o(i.tcpip_thread)
<LI> tcpip.o(i.dhcp_timer_coarse)
</UL>
<P><STRONG><a name="[142]"></a>dhcp_timer_fine</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcpip.o(i.dhcp_timer_fine))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = dhcp_timer_fine &rArr; dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tcpip.o(i.tcpip_thread)
<LI> tcpip.o(i.dhcp_timer_fine)
</UL>
<P><STRONG><a name="[237]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_send_ctrl &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tcpip.o(i.tcpip_tcp_timer)
<LI> tcpip.o(i.tcp_timer_needed)
</UL>
<P><STRONG><a name="[238]"></a>tcpip_thread</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[623]"></a>icmp_send_response</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[636]"></a>lwip_standard_chksum</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[56c]"></a>dhcp_bind</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[572]"></a>dhcp_check</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[577]"></a>dhcp_create_request</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_create_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dhcp_create_request &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[56b]"></a>dhcp_decline</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_decline))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[57f]"></a>dhcp_delete_request</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_delete_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dhcp_delete_request &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[581]"></a>dhcp_discover</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[585]"></a>dhcp_free_reply</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_free_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dhcp_free_reply &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[58a]"></a>dhcp_get_option_byte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_get_option_byte))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[589]"></a>dhcp_get_option_long</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_get_option_long))
<BR><BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[588]"></a>dhcp_get_option_ptr</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_get_option_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcp_get_option_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[587]"></a>dhcp_handle_ack</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_handle_ack &rArr; dhcp_get_option_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[58b]"></a>dhcp_handle_nak</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_nak))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dhcp_handle_nak &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[58d]"></a>dhcp_handle_offer</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_handle_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dhcp_handle_offer &rArr; dhcp_select &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[579]"></a>dhcp_option</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[57a]"></a>dhcp_option_byte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_option_byte))
<BR><BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[57b]"></a>dhcp_option_long</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[582]"></a>dhcp_option_short</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_short
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[57c]"></a>dhcp_option_trailer</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[58f]"></a>dhcp_rebind</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
</UL>

<P><STRONG><a name="[590]"></a>dhcp_reboot</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[140]"></a>dhcp_recv</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_byte
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(i.dhcp_start)
</UL>
<P><STRONG><a name="[58e]"></a>dhcp_select</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>

<P><STRONG><a name="[571]"></a>dhcp_set_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[576]"></a>dhcp_t1_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t1_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = dhcp_t1_timeout &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[575]"></a>dhcp_t2_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t2_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[584]"></a>dhcp_timeout</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[591]"></a>dhcp_unfold_reply</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_unfold_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_unfold_reply &rArr; mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[68e]"></a>lwip_sanity_check</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(i.lwip_sanity_check))
<BR><BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[69c]"></a>plug_holes</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[236]"></a>tcp_accept_null</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept_null))
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_listen_with_backlog)
</UL>
<P><STRONG><a name="[6de]"></a>tcp_kill_prio</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[6dd]"></a>tcp_kill_timewait</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[6e0]"></a>tcp_new_port</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[6e8]"></a>tcp_listen_input</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[6eb]"></a>tcp_parseopt</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_parseopt &rArr; ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[6e9]"></a>tcp_process</STRONG> (Thumb, 1428 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = tcp_process &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[6f1]"></a>tcp_receive</STRONG> (Thumb, 1648 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tcp_receive &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[6e7]"></a>tcp_timewait_input</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[6ed]"></a>tcp_output_segment</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; pbuf_header
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[6ef]"></a>tcp_output_set_header</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_set_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_output_set_header &rArr; ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[13f]"></a>arp_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ethernetif.o(i.arp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arp_timer &rArr; sys_timeout &rArr; sys_arch_timeouts
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ethernetif.o(i.arp_timer)
<LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[1b7]"></a>ethernetif_input</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.low_level_init)
</UL>
<P><STRONG><a name="[5e7]"></a>low_level_init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ethernetif.o(i.low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = low_level_init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[5e8]"></a>low_level_input</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Get_Received_Frame_interrupt
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[148]"></a>low_level_output</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = low_level_output &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; GL_DisplayAdjStringLine &rArr; GL_LCD_DisplayChar &rArr; GL_LCD_DrawChar &rArr; LCD_PutPixel &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Prepare_Transmit_Descriptors
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[5e4]"></a>etharp_raw</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[5e1]"></a>etharp_send_ip</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[5e2]"></a>find_entry</STRONG> (Thumb, 370 bytes, Stack size 28 bytes, etharp.o(i.find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[5de]"></a>update_arp_entry</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, etharp.o(i.update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = update_arp_entry &rArr; find_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[633]"></a>icvRunFeature</STRONG> (Thumb, 962 bytes, Stack size 208 bytes, objdetectorc.o(i.icvRunFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = icvRunFeature &rArr; uxTaskGetStackHighWaterMark
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvObjectDetection
</UL>

<P><STRONG><a name="[244]"></a>delay_copy</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOUDNESS_SPCORP_Symbol_005
</UL>

<P><STRONG><a name="[241]"></a>mid_point_prms</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mid_point_prms
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOUDNESS_SPCORP_Symbol_005
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_approx
</UL>

<P><STRONG><a name="[23f]"></a>filter_approx</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = filter_approx &rArr; mid_point_prms
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOUDNESS_SPCORP_Symbol_004
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mid_point_prms
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOUDNESS_SPCORP_Symbol_005
</UL>

<P><STRONG><a name="[242]"></a>mix</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mix &rArr; mid_point_prms
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mid_point_prms
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOUDNESS_SPCORP_Symbol_005
</UL>

<P><STRONG><a name="[245]"></a>transition_len</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = transition_len &rArr; LOUDNESS_SPCORP_Symbol_004
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOUDNESS_SPCORP_Symbol_004
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOUDNESS_SPCORP_Symbol_005
</UL>

<P><STRONG><a name="[533]"></a>_fp_digits</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[529]"></a>_printf_core</STRONG> (Thumb, 1762 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[535]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[534]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
